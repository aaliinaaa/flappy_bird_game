
bird.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d6c  08006078  08006078  00016078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008de4  08008de4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008de4  08008de4  00018de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dec  08008dec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dec  08008dec  00018dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008df0  08008df0  00018df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000074  08008e68  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08008e68  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d5c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf1  00000000  00000000  00030e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00033af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00034ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c38  00000000  00000000  000358f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013866  00000000  00000000  0005b528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df8e6  00000000  00000000  0006ed8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e674  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b6c  00000000  00000000  0014e6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006060 	.word	0x08006060

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006060 	.word	0x08006060

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_ADC3_Init+0x98>)
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <MX_ADC3_Init+0x9c>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC3_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <MX_ADC3_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC3_Init+0x98>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_ADC3_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC3_Init+0x98>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ADC3_Init+0x98>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_ADC3_Init+0x98>)
 80005f4:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_ADC3_Init+0xa0>)
 80005f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_ADC3_Init+0x98>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_ADC3_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_ADC3_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC3_Init+0x98>)
 800060e:	2201      	movs	r2, #1
 8000610:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000612:	480e      	ldr	r0, [pc, #56]	; (800064c <MX_ADC3_Init+0x98>)
 8000614:	f001 fc6c 	bl	8001ef0 <HAL_ADC_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800061e:	f000 ffd7 	bl	80015d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <MX_ADC3_Init+0x98>)
 8000634:	f001 fef6 	bl	8002424 <HAL_ADC_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800063e:	f000 ffc7 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000090 	.word	0x20000090
 8000650:	40012200 	.word	0x40012200
 8000654:	0f000001 	.word	0x0f000001

08000658 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <HAL_ADC_MspInit+0x8c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d12f      	bne.n	80006da <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <HAL_ADC_MspInit+0x90>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <HAL_ADC_MspInit+0x90>)
 8000684:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000688:	6453      	str	r3, [r2, #68]	; 0x44
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <HAL_ADC_MspInit+0x90>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <HAL_ADC_MspInit+0x90>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <HAL_ADC_MspInit+0x90>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <HAL_ADC_MspInit+0x90>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0-WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <HAL_ADC_MspInit+0x94>)
 80006c6:	f002 f9f7 	bl	8002ab8 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2012      	movs	r0, #18
 80006d0:	f002 f9bb 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006d4:	2012      	movs	r0, #18
 80006d6:	f002 f9d4 	bl	8002a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40012200 	.word	0x40012200
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000

080006f0 <disp1color_UpdateFromBuff>:

//==============================================================================
// Процедура обновляет состояние индикаторов в соответствии с буфером кадра disp1color_buff
//==============================================================================
void disp1color_UpdateFromBuff(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  DMD_1COLOR_DisplayFullUpdate(disp1color_buff, sizeof(disp1color_buff));
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	4802      	ldr	r0, [pc, #8]	; (8000700 <disp1color_UpdateFromBuff+0x10>)
 80006f8:	f000 fa4b 	bl	8000b92 <DMD_1COLOR_DisplayFullUpdate>

  //printf("BUF horz:\n");
  //print_buf(DMD_1COLOR_Buff, sizeof(DMD_1COLOR_Buff));
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000158 	.word	0x20000158

08000704 <disp1color_printf>:

//==============================================================================
// Процедура выводит на дисплей форматированную строку
//==============================================================================
void disp1color_printf(int16_t X, int16_t Y, uint8_t FontID, const char *args, ...)
{
 8000704:	b408      	push	{r3}
 8000706:	b580      	push	{r7, lr}
 8000708:	b09d      	sub	sp, #116	; 0x74
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	80fb      	strh	r3, [r7, #6]
 8000710:	460b      	mov	r3, r1
 8000712:	80bb      	strh	r3, [r7, #4]
 8000714:	4613      	mov	r3, r2
 8000716:	70fb      	strb	r3, [r7, #3]
  char StrBuff[100];
  
  //Формирование массива из переданных аргументов
  va_list ap;
  va_start(ap, args);
 8000718:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800071c:	60bb      	str	r3, [r7, #8]
  vsnprintf(StrBuff, sizeof(StrBuff), args, ap);
 800071e:	f107 000c 	add.w	r0, r7, #12
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000726:	2164      	movs	r1, #100	; 0x64
 8000728:	f004 fae4 	bl	8004cf4 <vsniprintf>
  va_end(ap);
  
  disp1color_DrawString(X, Y, FontID, (uint8_t *)StrBuff);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	78fa      	ldrb	r2, [r7, #3]
 8000732:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000736:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800073a:	f000 f9d9 	bl	8000af0 <disp1color_DrawString>
}
 800073e:	bf00      	nop
 8000740:	3774      	adds	r7, #116	; 0x74
 8000742:	46bd      	mov	sp, r7
 8000744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000748:	b001      	add	sp, #4
 800074a:	4770      	bx	lr

0800074c <disp1color_DrawPixel>:

//==============================================================================
// Процедура устанавливает состояние 1 пикселя дисплея
//==============================================================================
void disp1color_DrawPixel(int16_t X, int16_t Y, uint8_t State)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	80fb      	strh	r3, [r7, #6]
 8000756:	460b      	mov	r3, r1
 8000758:	80bb      	strh	r3, [r7, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	70fb      	strb	r3, [r7, #3]
  //Х и У координаты пикселя, отсчитываются слева направо (Х) сверху вниз (У) с 0
  // Проверяем, находится ли точка в поле отрисовки дисплея
  if ((X >= DISP1COLOR_Width) || (Y >= DISP1COLOR_Height) || (X < 0) || (Y < 0))
 800075e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000762:	2b1f      	cmp	r3, #31
 8000764:	dc48      	bgt.n	80007f8 <disp1color_DrawPixel+0xac>
 8000766:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800076a:	2b0f      	cmp	r3, #15
 800076c:	dc44      	bgt.n	80007f8 <disp1color_DrawPixel+0xac>
 800076e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000772:	2b00      	cmp	r3, #0
 8000774:	db40      	blt.n	80007f8 <disp1color_DrawPixel+0xac>
 8000776:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	db3c      	blt.n	80007f8 <disp1color_DrawPixel+0xac>
    return;
  
  //Байты относительно матрицы расположены вертикально, в 2 ряда
  uint16_t ByteIdx = Y >> 3;
 800077e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000782:	10db      	asrs	r3, r3, #3
 8000784:	b21b      	sxth	r3, r3
 8000786:	81fb      	strh	r3, [r7, #14]
  uint8_t BitIdx = Y - (ByteIdx << 3); // Высота относительно строки байт (0<=Y<=7)
 8000788:	88bb      	ldrh	r3, [r7, #4]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	89fb      	ldrh	r3, [r7, #14]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	737b      	strb	r3, [r7, #13]
  ByteIdx *= DISP1COLOR_Width;  
 8000798:	89fb      	ldrh	r3, [r7, #14]
 800079a:	015b      	lsls	r3, r3, #5
 800079c:	81fb      	strh	r3, [r7, #14]
  ByteIdx += X;
 800079e:	88fa      	ldrh	r2, [r7, #6]
 80007a0:	89fb      	ldrh	r3, [r7, #14]
 80007a2:	4413      	add	r3, r2
 80007a4:	81fb      	strh	r3, [r7, #14]
  
  //Заполнение буфера данных для отрисовки
  if (State)
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d00f      	beq.n	80007cc <disp1color_DrawPixel+0x80>
    disp1color_buff[ByteIdx] |= (1 << BitIdx);
 80007ac:	89fb      	ldrh	r3, [r7, #14]
 80007ae:	4a15      	ldr	r2, [pc, #84]	; (8000804 <disp1color_DrawPixel+0xb8>)
 80007b0:	5cd3      	ldrb	r3, [r2, r3]
 80007b2:	b25a      	sxtb	r2, r3
 80007b4:	7b7b      	ldrb	r3, [r7, #13]
 80007b6:	2101      	movs	r1, #1
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	89fb      	ldrh	r3, [r7, #14]
 80007c4:	b2d1      	uxtb	r1, r2
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <disp1color_DrawPixel+0xb8>)
 80007c8:	54d1      	strb	r1, [r2, r3]
 80007ca:	e010      	b.n	80007ee <disp1color_DrawPixel+0xa2>
  else
    disp1color_buff[ByteIdx] &= ~(1 << BitIdx);
 80007cc:	89fb      	ldrh	r3, [r7, #14]
 80007ce:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <disp1color_DrawPixel+0xb8>)
 80007d0:	5cd3      	ldrb	r3, [r2, r3]
 80007d2:	b25a      	sxtb	r2, r3
 80007d4:	7b7b      	ldrb	r3, [r7, #13]
 80007d6:	2101      	movs	r1, #1
 80007d8:	fa01 f303 	lsl.w	r3, r1, r3
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	4013      	ands	r3, r2
 80007e4:	b25a      	sxtb	r2, r3
 80007e6:	89fb      	ldrh	r3, [r7, #14]
 80007e8:	b2d1      	uxtb	r1, r2
 80007ea:	4a06      	ldr	r2, [pc, #24]	; (8000804 <disp1color_DrawPixel+0xb8>)
 80007ec:	54d1      	strb	r1, [r2, r3]

 // printf("PIX:%d%s", disp1color_buff[ByteIdx], "\n");
  uint8_t buf = disp1color_buff[ByteIdx];
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <disp1color_DrawPixel+0xb8>)
 80007f2:	5cd3      	ldrb	r3, [r2, r3]
 80007f4:	733b      	strb	r3, [r7, #12]
 80007f6:	e000      	b.n	80007fa <disp1color_DrawPixel+0xae>
    return;
 80007f8:	bf00      	nop
//  for (int i = 0; i < 8; i++) {
//	  printf("%c", (buf & 0x80) ? '1' : '0');
//	  buf <<= 1;
//  }
//  printf("\n");
}
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	20000158 	.word	0x20000158

08000808 <disp1color_DrawLine>:

//==============================================================================
// Процедура рисует прямую линию в буфере кадра дисплея
//==============================================================================
void disp1color_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2) 
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b087      	sub	sp, #28
 800080c:	af00      	add	r7, sp, #0
 800080e:	4604      	mov	r4, r0
 8000810:	4608      	mov	r0, r1
 8000812:	4611      	mov	r1, r2
 8000814:	461a      	mov	r2, r3
 8000816:	4623      	mov	r3, r4
 8000818:	80fb      	strh	r3, [r7, #6]
 800081a:	4603      	mov	r3, r0
 800081c:	80bb      	strh	r3, [r7, #4]
 800081e:	460b      	mov	r3, r1
 8000820:	807b      	strh	r3, [r7, #2]
 8000822:	4613      	mov	r3, r2
 8000824:	803b      	strh	r3, [r7, #0]
  const int16_t deltaX = abs(x2 - x1);
 8000826:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800082a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	bfb8      	it	lt
 8000834:	425b      	neglt	r3, r3
 8000836:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 8000838:	f9b7 2000 	ldrsh.w	r2, [r7]
 800083c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	bfb8      	it	lt
 8000846:	425b      	neglt	r3, r3
 8000848:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 800084a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800084e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000852:	429a      	cmp	r2, r3
 8000854:	da01      	bge.n	800085a <disp1color_DrawLine+0x52>
 8000856:	2301      	movs	r3, #1
 8000858:	e001      	b.n	800085e <disp1color_DrawLine+0x56>
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 8000860:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000864:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000868:	429a      	cmp	r2, r3
 800086a:	da01      	bge.n	8000870 <disp1color_DrawLine+0x68>
 800086c:	2301      	movs	r3, #1
 800086e:	e001      	b.n	8000874 <disp1color_DrawLine+0x6c>
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 8000876:	8aba      	ldrh	r2, [r7, #20]
 8000878:	8a7b      	ldrh	r3, [r7, #18]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	b29b      	uxth	r3, r3
 800087e:	82fb      	strh	r3, [r7, #22]

  disp1color_DrawPixel(x2, y2, 1);
 8000880:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000884:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000888:	2201      	movs	r2, #1
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff5e 	bl	800074c <disp1color_DrawPixel>

  while (x1 != x2 || y1 != y2) 
 8000890:	e02c      	b.n	80008ec <disp1color_DrawLine+0xe4>
  {
    disp1color_DrawPixel(x1, y1, 1);
 8000892:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800089a:	2201      	movs	r2, #1
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff55 	bl	800074c <disp1color_DrawPixel>
    const int16_t error2 = error * 2;
 80008a2:	8afb      	ldrh	r3, [r7, #22]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) 
 80008aa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008b2:	425b      	negs	r3, r3
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dd09      	ble.n	80008cc <disp1color_DrawLine+0xc4>
    {
      error -= deltaY;
 80008b8:	8afa      	ldrh	r2, [r7, #22]
 80008ba:	8a7b      	ldrh	r3, [r7, #18]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	b29b      	uxth	r3, r3
 80008c0:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 80008c2:	88fa      	ldrh	r2, [r7, #6]
 80008c4:	8a3b      	ldrh	r3, [r7, #16]
 80008c6:	4413      	add	r3, r2
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX)
 80008cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	da09      	bge.n	80008ec <disp1color_DrawLine+0xe4>
    {
      error += deltaX;
 80008d8:	8afa      	ldrh	r2, [r7, #22]
 80008da:	8abb      	ldrh	r3, [r7, #20]
 80008dc:	4413      	add	r3, r2
 80008de:	b29b      	uxth	r3, r3
 80008e0:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 80008e2:	88ba      	ldrh	r2, [r7, #4]
 80008e4:	89fb      	ldrh	r3, [r7, #14]
 80008e6:	4413      	add	r3, r2
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) 
 80008ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d1cc      	bne.n	8000892 <disp1color_DrawLine+0x8a>
 80008f8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80008fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000900:	429a      	cmp	r2, r3
 8000902:	d1c6      	bne.n	8000892 <disp1color_DrawLine+0x8a>
    }
  }
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	371c      	adds	r7, #28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd90      	pop	{r4, r7, pc}

0800090e <disp1color_DrawRectangle>:

//==============================================================================
// Процедура рисует прямоугольник в буфере кадра дисплея
//==============================================================================
void disp1color_DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2) 
{
 800090e:	b590      	push	{r4, r7, lr}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	4604      	mov	r4, r0
 8000916:	4608      	mov	r0, r1
 8000918:	4611      	mov	r1, r2
 800091a:	461a      	mov	r2, r3
 800091c:	4623      	mov	r3, r4
 800091e:	80fb      	strh	r3, [r7, #6]
 8000920:	4603      	mov	r3, r0
 8000922:	80bb      	strh	r3, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	807b      	strh	r3, [r7, #2]
 8000928:	4613      	mov	r3, r2
 800092a:	803b      	strh	r3, [r7, #0]
  disp1color_DrawLine(x1, y1, x1, y2);
 800092c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000930:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000934:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000938:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800093c:	f7ff ff64 	bl	8000808 <disp1color_DrawLine>
  disp1color_DrawLine(x2, y1, x2, y2);
 8000940:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000944:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000948:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800094c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000950:	f7ff ff5a 	bl	8000808 <disp1color_DrawLine>
  disp1color_DrawLine(x1, y1, x2, y1);
 8000954:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000958:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800095c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000960:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000964:	f7ff ff50 	bl	8000808 <disp1color_DrawLine>
  disp1color_DrawLine(x1, y2, x2, y2);
 8000968:	f9b7 3000 	ldrsh.w	r3, [r7]
 800096c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000970:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000974:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000978:	f7ff ff46 	bl	8000808 <disp1color_DrawLine>
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bd90      	pop	{r4, r7, pc}

08000984 <disp1color_DrawChar>:

//==============================================================================
// Функция вывода символа Char на дисплей. Возвращает ширину выведенного символа
//==============================================================================
uint8_t disp1color_DrawChar(int16_t X, int16_t Y, uint8_t FontID, uint8_t Char)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
 800098a:	4604      	mov	r4, r0
 800098c:	4608      	mov	r0, r1
 800098e:	4611      	mov	r1, r2
 8000990:	461a      	mov	r2, r3
 8000992:	4623      	mov	r3, r4
 8000994:	80fb      	strh	r3, [r7, #6]
 8000996:	4603      	mov	r3, r0
 8000998:	80bb      	strh	r3, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	70fb      	strb	r3, [r7, #3]
 800099e:	4613      	mov	r3, r2
 80009a0:	70bb      	strb	r3, [r7, #2]

  // Указатель на подтабличку конкретного символа шрифта
  uint8_t *pCharTable = font_GetFontStruct(FontID, Char);
 80009a2:	78ba      	ldrb	r2, [r7, #2]
 80009a4:	78fb      	ldrb	r3, [r7, #3]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fa85 	bl	8000eb8 <font_GetFontStruct>
 80009ae:	6138      	str	r0, [r7, #16]
  uint8_t CharWidth = font_GetCharWidth(pCharTable);    // Ширина символа
 80009b0:	6938      	ldr	r0, [r7, #16]
 80009b2:	f000 fa97 	bl	8000ee4 <font_GetCharWidth>
 80009b6:	4603      	mov	r3, r0
 80009b8:	73fb      	strb	r3, [r7, #15]
  uint8_t CharHeight = font_GetCharHeight(pCharTable);  // Высота символа
 80009ba:	6938      	ldr	r0, [r7, #16]
 80009bc:	f000 fa9e 	bl	8000efc <font_GetCharHeight>
 80009c0:	4603      	mov	r3, r0
 80009c2:	73bb      	strb	r3, [r7, #14]
  pCharTable += 2;
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	3302      	adds	r3, #2
 80009c8:	613b      	str	r3, [r7, #16]
  
  if (FontID == FONTID_6X8M)
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d132      	bne.n	8000a36 <disp1color_DrawChar+0xb2>
  {
    for (uint8_t row = 0; row < CharHeight; row++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	75fb      	strb	r3, [r7, #23]
 80009d4:	e02a      	b.n	8000a2c <disp1color_DrawChar+0xa8>
    {
		for (uint8_t col = 0; col < CharWidth; col++) {
 80009d6:	2300      	movs	r3, #0
 80009d8:	75bb      	strb	r3, [r7, #22]
 80009da:	e020      	b.n	8000a1e <disp1color_DrawChar+0x9a>

			//printf("X+col=%d%s%d%s", X + col, " Y+row=", Y + row, "\n");
			disp1color_DrawPixel(X + col, Y + row, pCharTable[row] & (1 << (7 - col)));
 80009dc:	7dbb      	ldrb	r3, [r7, #22]
 80009de:	b29a      	uxth	r2, r3
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	4413      	add	r3, r2
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	b218      	sxth	r0, r3
 80009e8:	7dfb      	ldrb	r3, [r7, #23]
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	88bb      	ldrh	r3, [r7, #4]
 80009ee:	4413      	add	r3, r2
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	b219      	sxth	r1, r3
 80009f4:	7dfb      	ldrb	r3, [r7, #23]
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4413      	add	r3, r2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b25a      	sxtb	r2, r3
 80009fe:	7dbb      	ldrb	r3, [r7, #22]
 8000a00:	f1c3 0307 	rsb	r3, r3, #7
 8000a04:	2401      	movs	r4, #1
 8000a06:	fa04 f303 	lsl.w	r3, r4, r3
 8000a0a:	b25b      	sxtb	r3, r3
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	f7ff fe9a 	bl	800074c <disp1color_DrawPixel>
		for (uint8_t col = 0; col < CharWidth; col++) {
 8000a18:	7dbb      	ldrb	r3, [r7, #22]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	75bb      	strb	r3, [r7, #22]
 8000a1e:	7dba      	ldrb	r2, [r7, #22]
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d3da      	bcc.n	80009dc <disp1color_DrawChar+0x58>
    for (uint8_t row = 0; row < CharHeight; row++)
 8000a26:	7dfb      	ldrb	r3, [r7, #23]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	75fb      	strb	r3, [r7, #23]
 8000a2c:	7dfa      	ldrb	r2, [r7, #23]
 8000a2e:	7bbb      	ldrb	r3, [r7, #14]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d3d0      	bcc.n	80009d6 <disp1color_DrawChar+0x52>
 8000a34:	e057      	b.n	8000ae6 <disp1color_DrawChar+0x162>
		}
    }
  }
  else
  {
    for (uint8_t row = 0; row < CharHeight; row++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	757b      	strb	r3, [r7, #21]
 8000a3a:	e050      	b.n	8000ade <disp1color_DrawChar+0x15a>
    {
      for (uint8_t col = 0; col < CharWidth; col++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	753b      	strb	r3, [r7, #20]
 8000a40:	e046      	b.n	8000ad0 <disp1color_DrawChar+0x14c>
      {
        if (col < 8)
 8000a42:	7d3b      	ldrb	r3, [r7, #20]
 8000a44:	2b07      	cmp	r3, #7
 8000a46:	d820      	bhi.n	8000a8a <disp1color_DrawChar+0x106>
          disp1color_DrawPixel(X + col, Y + row, pCharTable[row * 2] & (1 << (7 - col)));
 8000a48:	7d3b      	ldrb	r3, [r7, #20]
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	4413      	add	r3, r2
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	b218      	sxth	r0, r3
 8000a54:	7d7b      	ldrb	r3, [r7, #21]
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	88bb      	ldrh	r3, [r7, #4]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	b219      	sxth	r1, r3
 8000a60:	7d7b      	ldrb	r3, [r7, #21]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	461a      	mov	r2, r3
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	4413      	add	r3, r2
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b25a      	sxtb	r2, r3
 8000a6e:	7d3b      	ldrb	r3, [r7, #20]
 8000a70:	f1c3 0307 	rsb	r3, r3, #7
 8000a74:	2401      	movs	r4, #1
 8000a76:	fa04 f303 	lsl.w	r3, r4, r3
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	461a      	mov	r2, r3
 8000a84:	f7ff fe62 	bl	800074c <disp1color_DrawPixel>
 8000a88:	e01f      	b.n	8000aca <disp1color_DrawChar+0x146>
        else
          disp1color_DrawPixel(X + col, Y + row, pCharTable[(row * 2) + 1] & (1 << (15 - col)));
 8000a8a:	7d3b      	ldrb	r3, [r7, #20]
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	4413      	add	r3, r2
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	b218      	sxth	r0, r3
 8000a96:	7d7b      	ldrb	r3, [r7, #21]
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	88bb      	ldrh	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b219      	sxth	r1, r3
 8000aa2:	7d7b      	ldrb	r3, [r7, #21]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b25a      	sxtb	r2, r3
 8000ab0:	7d3b      	ldrb	r3, [r7, #20]
 8000ab2:	f1c3 030f 	rsb	r3, r3, #15
 8000ab6:	2401      	movs	r4, #1
 8000ab8:	fa04 f303 	lsl.w	r3, r4, r3
 8000abc:	b25b      	sxtb	r3, r3
 8000abe:	4013      	ands	r3, r2
 8000ac0:	b25b      	sxtb	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	f7ff fe41 	bl	800074c <disp1color_DrawPixel>
      for (uint8_t col = 0; col < CharWidth; col++)
 8000aca:	7d3b      	ldrb	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	753b      	strb	r3, [r7, #20]
 8000ad0:	7d3a      	ldrb	r2, [r7, #20]
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d3b4      	bcc.n	8000a42 <disp1color_DrawChar+0xbe>
    for (uint8_t row = 0; row < CharHeight; row++)
 8000ad8:	7d7b      	ldrb	r3, [r7, #21]
 8000ada:	3301      	adds	r3, #1
 8000adc:	757b      	strb	r3, [r7, #21]
 8000ade:	7d7a      	ldrb	r2, [r7, #21]
 8000ae0:	7bbb      	ldrb	r3, [r7, #14]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d3aa      	bcc.n	8000a3c <disp1color_DrawChar+0xb8>
      }
    }
  }
  
  return CharWidth;
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	371c      	adds	r7, #28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd90      	pop	{r4, r7, pc}

08000af0 <disp1color_DrawString>:

//==============================================================================
// Функция вывода текста из строки Str на дисплей
//==============================================================================
void disp1color_DrawString(int16_t X, int16_t Y, uint8_t FontID, uint8_t *Str)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	4603      	mov	r3, r0
 8000afa:	81fb      	strh	r3, [r7, #14]
 8000afc:	460b      	mov	r3, r1
 8000afe:	81bb      	strh	r3, [r7, #12]
 8000b00:	4613      	mov	r3, r2
 8000b02:	72fb      	strb	r3, [r7, #11]
  uint8_t done = 0;             // Флаг окончания вывода
 8000b04:	2300      	movs	r3, #0
 8000b06:	75fb      	strb	r3, [r7, #23]
  int16_t Xstart = X;           // Запоминаем куда будем переводить каретку при переходе на новую строку
 8000b08:	89fb      	ldrh	r3, [r7, #14]
 8000b0a:	82bb      	strh	r3, [r7, #20]
  uint8_t StrHeight = 8;        // Высота символов в пикселях для перехода на слежующую строку
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	75bb      	strb	r3, [r7, #22]

  // Вывод строки
  while (!done)
 8000b10:	e037      	b.n	8000b82 <disp1color_DrawString+0x92>
  {
    switch (*Str)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b0d      	cmp	r3, #13
 8000b18:	d010      	beq.n	8000b3c <disp1color_DrawString+0x4c>
 8000b1a:	2b0d      	cmp	r3, #13
 8000b1c:	dc11      	bgt.n	8000b42 <disp1color_DrawString+0x52>
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d002      	beq.n	8000b28 <disp1color_DrawString+0x38>
 8000b22:	2b0a      	cmp	r3, #10
 8000b24:	d003      	beq.n	8000b2e <disp1color_DrawString+0x3e>
 8000b26:	e00c      	b.n	8000b42 <disp1color_DrawString+0x52>
    {
    case '\0':  // Конец строки
      done = 1;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8000b2c:	e026      	b.n	8000b7c <disp1color_DrawString+0x8c>
    case '\n':  // Переход на следующую строку
      Y += StrHeight;
 8000b2e:	7dbb      	ldrb	r3, [r7, #22]
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	89bb      	ldrh	r3, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	81bb      	strh	r3, [r7, #12]
      break;
 8000b3a:	e01f      	b.n	8000b7c <disp1color_DrawString+0x8c>
    case '\r':  // Переход в начало строки
      X = Xstart;
 8000b3c:	8abb      	ldrh	r3, [r7, #20]
 8000b3e:	81fb      	strh	r3, [r7, #14]
      break;
 8000b40:	e01c      	b.n	8000b7c <disp1color_DrawString+0x8c>
    default:    // Отображаемый символ
		//printf("Symbol:%c\n", *Str);
		//printf("X=%d%s%d%s", X, " Y=", Y, "\n");
      X += disp1color_DrawChar(X, Y, FontID, *Str);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	7afa      	ldrb	r2, [r7, #11]
 8000b48:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000b4c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8000b50:	f7ff ff18 	bl	8000984 <disp1color_DrawChar>
 8000b54:	4603      	mov	r3, r0
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	89fb      	ldrh	r3, [r7, #14]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	81fb      	strh	r3, [r7, #14]
	  ///////
	  //setlocale(LC_ALL, "ru_UA.UTF-8");
	 // printf("BUF vert:\n");
	// print_buf(disp1color_buff, sizeof(disp1color_buff));
	  ///////
      StrHeight = font_GetCharHeight(font_GetFontStruct(FontID, *Str));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	7afb      	ldrb	r3, [r7, #11]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f9a5 	bl	8000eb8 <font_GetFontStruct>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 f9c3 	bl	8000efc <font_GetCharHeight>
 8000b76:	4603      	mov	r3, r0
 8000b78:	75bb      	strb	r3, [r7, #22]
      break;
 8000b7a:	bf00      	nop
    }
    Str++;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	607b      	str	r3, [r7, #4]
  while (!done)
 8000b82:	7dfb      	ldrb	r3, [r7, #23]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0c4      	beq.n	8000b12 <disp1color_DrawString+0x22>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <DMD_1COLOR_DisplayFullUpdate>:

//==============================================================================
// Процедура подготавливает буфер на передачу в экран в соответствии с буфером pBuff графической бибилиотеки
//==============================================================================
void DMD_1COLOR_DisplayFullUpdate(uint8_t *pBuff, uint16_t BuffLen)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	807b      	strh	r3, [r7, #2]
	DMD_1COLOR_UpdateRow4(0, pBuff, BuffLen);
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 f817 	bl	8000bd8 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(1, pBuff, BuffLen);
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	461a      	mov	r2, r3
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f000 f811 	bl	8000bd8 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(2, pBuff, BuffLen);
 8000bb6:	887b      	ldrh	r3, [r7, #2]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	f000 f80b 	bl	8000bd8 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(3, pBuff, BuffLen);
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f805 	bl	8000bd8 <DMD_1COLOR_UpdateRow4>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <DMD_1COLOR_UpdateRow4>:

//==============================================================================
// Процедура обновляет поочерёдно все матрицы экрана
//==============================================================================
void DMD_1COLOR_UpdateRow4(uint8_t Row4, uint8_t *pBuff, uint16_t BuffLen)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	4613      	mov	r3, r2
 8000be6:	80bb      	strh	r3, [r7, #4]
	// Подготавливаем данные для передачи
	uint16_t MatrixInRow = DMD_1COLOR_ScreenWidth / DMD_1COLOR_MatrixWidth;
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <DMD_1COLOR_UpdateRow4+0xcc>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	095b      	lsrs	r3, r3, #5
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	81bb      	strh	r3, [r7, #12]
	uint16_t MatrixInCol = DMD_1COLOR_ScreenHeight / DMD_1COLOR_MatrixHeight;
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <DMD_1COLOR_UpdateRow4+0xd0>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	817b      	strh	r3, [r7, #10]
	uint8_t MatrixLines8 = DMD_1COLOR_MatrixHeight >> 3;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	727b      	strb	r3, [r7, #9]
	uint16_t StartIdxRow = 0, StartIdxCol = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	83fb      	strh	r3, [r7, #30]
 8000c04:	2300      	movs	r3, #0
 8000c06:	83bb      	strh	r3, [r7, #28]

	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	76fb      	strb	r3, [r7, #27]
 8000c0c:	e040      	b.n	8000c90 <DMD_1COLOR_UpdateRow4+0xb8>
	{
		StartIdxCol = StartIdxRow;
 8000c0e:	8bfb      	ldrh	r3, [r7, #30]
 8000c10:	83bb      	strh	r3, [r7, #28]

		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	76bb      	strb	r3, [r7, #26]
 8000c16:	e028      	b.n	8000c6a <DMD_1COLOR_UpdateRow4+0x92>
		{
			// Копируем буфер кадра одной матрицы
			uint8_t *pDst = DMD_1COLOR_MatrixBuff;
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <DMD_1COLOR_UpdateRow4+0xd4>)
 8000c1a:	617b      	str	r3, [r7, #20]
			uint8_t *pSrc = &pBuff[StartIdxCol];
 8000c1c:	8bbb      	ldrh	r3, [r7, #28]
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	4413      	add	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]

			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e015      	b.n	8000c56 <DMD_1COLOR_UpdateRow4+0x7e>
			{
				memcpy(pDst, pSrc, DMD_1COLOR_MatrixWidth);
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	6939      	ldr	r1, [r7, #16]
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f003 ffc0 	bl	8004bb4 <memcpy>
				DMD_1COLOR_SendFromMatrixBuff(Row4, DMD_1COLOR_MatrixBuff);
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	491d      	ldr	r1, [pc, #116]	; (8000cac <DMD_1COLOR_UpdateRow4+0xd4>)
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f839 	bl	8000cb0 <DMD_1COLOR_SendFromMatrixBuff>
				pDst += DMD_1COLOR_MatrixWidth;
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3320      	adds	r3, #32
 8000c42:	617b      	str	r3, [r7, #20]
				pSrc += DMD_1COLOR_ScreenWidth;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <DMD_1COLOR_UpdateRow4+0xcc>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	3301      	adds	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	7bfa      	ldrb	r2, [r7, #15]
 8000c58:	7a7b      	ldrb	r3, [r7, #9]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d3e5      	bcc.n	8000c2a <DMD_1COLOR_UpdateRow4+0x52>
			}

			StartIdxCol += DMD_1COLOR_MatrixWidth;
 8000c5e:	8bbb      	ldrh	r3, [r7, #28]
 8000c60:	3320      	adds	r3, #32
 8000c62:	83bb      	strh	r3, [r7, #28]
		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 8000c64:	7ebb      	ldrb	r3, [r7, #26]
 8000c66:	3301      	adds	r3, #1
 8000c68:	76bb      	strb	r3, [r7, #26]
 8000c6a:	7ebb      	ldrb	r3, [r7, #26]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	897a      	ldrh	r2, [r7, #10]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d8d1      	bhi.n	8000c18 <DMD_1COLOR_UpdateRow4+0x40>
		}
		StartIdxRow += MatrixLines8 * DMD_1COLOR_ScreenWidth;
 8000c74:	7a7b      	ldrb	r3, [r7, #9]
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <DMD_1COLOR_UpdateRow4+0xcc>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	fb12 f303 	smulbb	r3, r2, r3
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	8bfb      	ldrh	r3, [r7, #30]
 8000c86:	4413      	add	r3, r2
 8000c88:	83fb      	strh	r3, [r7, #30]
	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8000c8a:	7efb      	ldrb	r3, [r7, #27]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	76fb      	strb	r3, [r7, #27]
 8000c90:	7efb      	ldrb	r3, [r7, #27]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	89ba      	ldrh	r2, [r7, #12]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d8b9      	bhi.n	8000c0e <DMD_1COLOR_UpdateRow4+0x36>
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	bf00      	nop
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000001 	.word	0x20000001
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	200000d8 	.word	0x200000d8

08000cb0 <DMD_1COLOR_SendFromMatrixBuff>:

//==============================================================================
// Процедура обновляет 1 матрицу
//==============================================================================
void DMD_1COLOR_SendFromMatrixBuff(uint8_t Row4, uint8_t *pBuff)
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
	uint8_t MatrixRows8bit = DMD_1COLOR_MatrixHeight >> 3;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	747b      	strb	r3, [r7, #17]
	uint8_t MatrixCols8bit = DMD_1COLOR_MatrixWidth >> 3;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	743b      	strb	r3, [r7, #16]
	uint8_t *pPart = (uint8_t *) &(DMD_1COLOR_Buff[Row4][0]);
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	4a22      	ldr	r2, [pc, #136]	; (8000d54 <DMD_1COLOR_SendFromMatrixBuff+0xa4>)
 8000cca:	4413      	add	r3, r2
 8000ccc:	617b      	str	r3, [r7, #20]

	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	74fb      	strb	r3, [r7, #19]
 8000cd2:	e035      	b.n	8000d40 <DMD_1COLOR_SendFromMatrixBuff+0x90>
	{
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 8000cd4:	7c7b      	ldrb	r3, [r7, #17]
 8000cd6:	74bb      	strb	r3, [r7, #18]
 8000cd8:	e02c      	b.n	8000d34 <DMD_1COLOR_SendFromMatrixBuff+0x84>
		{
			uint8_t *p8Bytes = pBuff + ((Row - 1) * DMD_1COLOR_MatrixWidth);
 8000cda:	7cbb      	ldrb	r3, [r7, #18]
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	015b      	lsls	r3, r3, #5
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
			p8Bytes += (Col << 3);
 8000ce8:	7cfb      	ldrb	r3, [r7, #19]
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	461a      	mov	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << (Row4 + 4), p8Bytes);
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	697c      	ldr	r4, [r7, #20]
 8000d02:	1c63      	adds	r3, r4, #1
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	68f9      	ldr	r1, [r7, #12]
 8000d08:	4610      	mov	r0, r2
 8000d0a:	f000 f825 	bl	8000d58 <DMD_1COLOR_GetFrom8ScreenBytes>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	7023      	strb	r3, [r4, #0]
			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << Row4, p8Bytes);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2201      	movs	r2, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	697c      	ldr	r4, [r7, #20]
 8000d1e:	1c63      	adds	r3, r4, #1
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	68f9      	ldr	r1, [r7, #12]
 8000d24:	4610      	mov	r0, r2
 8000d26:	f000 f817 	bl	8000d58 <DMD_1COLOR_GetFrom8ScreenBytes>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	7023      	strb	r3, [r4, #0]
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 8000d2e:	7cbb      	ldrb	r3, [r7, #18]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	74bb      	strb	r3, [r7, #18]
 8000d34:	7cbb      	ldrb	r3, [r7, #18]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1cf      	bne.n	8000cda <DMD_1COLOR_SendFromMatrixBuff+0x2a>
	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 8000d3a:	7cfb      	ldrb	r3, [r7, #19]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	74fb      	strb	r3, [r7, #19]
 8000d40:	7cfa      	ldrb	r2, [r7, #19]
 8000d42:	7c3b      	ldrb	r3, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d3c5      	bcc.n	8000cd4 <DMD_1COLOR_SendFromMatrixBuff+0x24>
		}
	}
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	371c      	adds	r7, #28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd90      	pop	{r4, r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000118 	.word	0x20000118

08000d58 <DMD_1COLOR_GetFrom8ScreenBytes>:
//==============================================================================
// Функция возвращает байт (строку из 8 светодиодов) по 8-байтному фрагменту буфера
// графической библиотеки и маске соответствующей строки светодиодов во фрагменте
//==============================================================================
uint8_t DMD_1COLOR_GetFrom8ScreenBytes(uint8_t Mask, uint8_t *pBuff)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]
	//Переводим "вертикальные" байты из массива в горизонтальные
	//в соответствии с текущей строкой.
	//В итоге получается массив, где биты расположены горизонтально,
	//Первый бит слева внизу, счет увеличивается вверх и вправо.
	//Но строки в секторе расположены сверху вниз
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	73bb      	strb	r3, [r7, #14]
 8000d6c:	e010      	b.n	8000d90 <DMD_1COLOR_GetFrom8ScreenBytes+0x38>
	{
		if (*pBuff & Mask)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	781a      	ldrb	r2, [r3, #0]
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4013      	ands	r3, r2
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <DMD_1COLOR_GetFrom8ScreenBytes+0x2c>
			Byte |= BitMask;
 8000d7c:	7bfa      	ldrb	r2, [r7, #15]
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	73fb      	strb	r3, [r7, #15]
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
 8000d86:	085b      	lsrs	r3, r3, #1
 8000d88:	73bb      	strb	r3, [r7, #14]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1eb      	bne.n	8000d6e <DMD_1COLOR_GetFrom8ScreenBytes+0x16>
	}

//#if (DMD_1COLOR_Inverse == 1)
	//Инвертируем данные (так как LED панель горит при 0)
	Byte ^= 0xFF;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	73fb      	strb	r3, [r7, #15]
//#endif

	return Byte;
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <prepare_data>:
//==============================================================================


//Копирование из подготовленного буфера в массивиы для построчного вводы в матрицу
void prepare_data() {
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
	//Идем по строкам
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 8000db2:	2300      	movs	r3, #0
 8000db4:	71fb      	strb	r3, [r7, #7]
 8000db6:	e042      	b.n	8000e3e <prepare_data+0x92>
		//По столбцам
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 8000db8:	2300      	movs	r3, #0
 8000dba:	71bb      	strb	r3, [r7, #6]
 8000dbc:	e039      	b.n	8000e32 <prepare_data+0x86>
			if (i == 0) {
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10a      	bne.n	8000dda <prepare_data+0x2e>
				data1[k] = DMD_1COLOR_Buff[i][k];
 8000dc4:	79f9      	ldrb	r1, [r7, #7]
 8000dc6:	79ba      	ldrb	r2, [r7, #6]
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	4822      	ldr	r0, [pc, #136]	; (8000e54 <prepare_data+0xa8>)
 8000dcc:	0109      	lsls	r1, r1, #4
 8000dce:	4401      	add	r1, r0
 8000dd0:	440a      	add	r2, r1
 8000dd2:	7811      	ldrb	r1, [r2, #0]
 8000dd4:	4a20      	ldr	r2, [pc, #128]	; (8000e58 <prepare_data+0xac>)
 8000dd6:	54d1      	strb	r1, [r2, r3]
 8000dd8:	e028      	b.n	8000e2c <prepare_data+0x80>
			}
			else if (i == 1) {
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d10a      	bne.n	8000df6 <prepare_data+0x4a>
				data2[k] = DMD_1COLOR_Buff[i][k];
 8000de0:	79f9      	ldrb	r1, [r7, #7]
 8000de2:	79ba      	ldrb	r2, [r7, #6]
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	481b      	ldr	r0, [pc, #108]	; (8000e54 <prepare_data+0xa8>)
 8000de8:	0109      	lsls	r1, r1, #4
 8000dea:	4401      	add	r1, r0
 8000dec:	440a      	add	r2, r1
 8000dee:	7811      	ldrb	r1, [r2, #0]
 8000df0:	4a1a      	ldr	r2, [pc, #104]	; (8000e5c <prepare_data+0xb0>)
 8000df2:	54d1      	strb	r1, [r2, r3]
 8000df4:	e01a      	b.n	8000e2c <prepare_data+0x80>
			}
			else if (i == 2) {
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d10a      	bne.n	8000e12 <prepare_data+0x66>
				data3[k] = DMD_1COLOR_Buff[i][k];
 8000dfc:	79f9      	ldrb	r1, [r7, #7]
 8000dfe:	79ba      	ldrb	r2, [r7, #6]
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	4814      	ldr	r0, [pc, #80]	; (8000e54 <prepare_data+0xa8>)
 8000e04:	0109      	lsls	r1, r1, #4
 8000e06:	4401      	add	r1, r0
 8000e08:	440a      	add	r2, r1
 8000e0a:	7811      	ldrb	r1, [r2, #0]
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <prepare_data+0xb4>)
 8000e0e:	54d1      	strb	r1, [r2, r3]
 8000e10:	e00c      	b.n	8000e2c <prepare_data+0x80>
			}
			else if (i == 3) {
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d109      	bne.n	8000e2c <prepare_data+0x80>
				data4[k] = DMD_1COLOR_Buff[i][k];
 8000e18:	79f9      	ldrb	r1, [r7, #7]
 8000e1a:	79ba      	ldrb	r2, [r7, #6]
 8000e1c:	79bb      	ldrb	r3, [r7, #6]
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <prepare_data+0xa8>)
 8000e20:	0109      	lsls	r1, r1, #4
 8000e22:	4401      	add	r1, r0
 8000e24:	440a      	add	r2, r1
 8000e26:	7811      	ldrb	r1, [r2, #0]
 8000e28:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <prepare_data+0xb8>)
 8000e2a:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 8000e2c:	79bb      	ldrb	r3, [r7, #6]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	71bb      	strb	r3, [r7, #6]
 8000e32:	79bb      	ldrb	r3, [r7, #6]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d9c2      	bls.n	8000dbe <prepare_data+0x12>
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	71fb      	strb	r3, [r7, #7]
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d9b9      	bls.n	8000db8 <prepare_data+0xc>
			}
		}
	}
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000118 	.word	0x20000118
 8000e58:	20000198 	.word	0x20000198
 8000e5c:	200001a8 	.word	0x200001a8
 8000e60:	200001b8 	.word	0x200001b8
 8000e64:	200001c8 	.word	0x200001c8

08000e68 <f10x16f_GetCharTable>:

//==============================================================================
// Функция возвращает указатель на подтаблицу символа Char
//==============================================================================
uint8_t *f10x16f_GetCharTable(uint8_t Char)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  return (uint8_t *)(&f10x16f_table[Char][0]);
 8000e72:	79fa      	ldrb	r2, [r7, #7]
 8000e74:	4613      	mov	r3, r2
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	4413      	add	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4a03      	ldr	r2, [pc, #12]	; (8000e8c <f10x16f_GetCharTable+0x24>)
 8000e7e:	4413      	add	r3, r2
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	08006084 	.word	0x08006084

08000e90 <f6x8m_GetCharTable>:

//==============================================================================
// Функция возвращает указатель на подтаблицу символа Char
//==============================================================================
uint8_t *f6x8m_GetCharTable(uint8_t Char)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  return (uint8_t *)(&f6x8m_table[Char][0]);
 8000e9a:	79fa      	ldrb	r2, [r7, #7]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4a03      	ldr	r2, [pc, #12]	; (8000eb4 <f6x8m_GetCharTable+0x24>)
 8000ea6:	4413      	add	r3, r2
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	08008284 	.word	0x08008284

08000eb8 <font_GetFontStruct>:

//==============================================================================
// Функция возвращает указатель на структуру, описывающую символ Char
//==============================================================================
uint8_t *font_GetFontStruct(uint8_t FontID, uint8_t Char)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	71fb      	strb	r3, [r7, #7]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	71bb      	strb	r3, [r7, #6]
  return font_table_funcs[FontID](Char);
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <font_GetFontStruct+0x28>)
 8000ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed0:	79ba      	ldrb	r2, [r7, #6]
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4798      	blx	r3
 8000ed6:	4603      	mov	r3, r0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	08008c84 	.word	0x08008c84

08000ee4 <font_GetCharWidth>:

//==============================================================================
// Функция возвращает ширину символа
//==============================================================================
uint8_t font_GetCharWidth(uint8_t *pCharTable)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  return *pCharTable;  // Ширина символа
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	781b      	ldrb	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <font_GetCharHeight>:

//==============================================================================
// Функция возвращает высоту символа
//==============================================================================
uint8_t font_GetCharHeight(uint8_t *pCharTable)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  pCharTable++;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3301      	adds	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
  return *pCharTable;  // Высота символа
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <MX_GPIO_Init+0xd8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a2e      	ldr	r2, [pc, #184]	; (8000ff4 <MX_GPIO_Init+0xd8>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <MX_GPIO_Init+0xd8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <MX_GPIO_Init+0xd8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <MX_GPIO_Init+0xd8>)
 8000f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <MX_GPIO_Init+0xd8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <MX_GPIO_Init+0xd8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a20      	ldr	r2, [pc, #128]	; (8000ff4 <MX_GPIO_Init+0xd8>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <MX_GPIO_Init+0xd8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nOE_Pin|SCLK_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2150      	movs	r1, #80	; 0x50
 8000f8a:	481b      	ldr	r0, [pc, #108]	; (8000ff8 <MX_GPIO_Init+0xdc>)
 8000f8c:	f001 ff28 	bl	8002de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2130      	movs	r1, #48	; 0x30
 8000f94:	4819      	ldr	r0, [pc, #100]	; (8000ffc <MX_GPIO_Init+0xe0>)
 8000f96:	f001 ff23 	bl	8002de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4619      	mov	r1, r3
 8000fae:	4813      	ldr	r0, [pc, #76]	; (8000ffc <MX_GPIO_Init+0xe0>)
 8000fb0:	f001 fd82 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nOE_Pin|SCLK_Pin;
 8000fb4:	2350      	movs	r3, #80	; 0x50
 8000fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <MX_GPIO_Init+0xdc>)
 8000fcc:	f001 fd74 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin;
 8000fd0:	2330      	movs	r3, #48	; 0x30
 8000fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_GPIO_Init+0xe0>)
 8000fe8:	f001 fd66 	bl	8002ab8 <HAL_GPIO_Init>

}
 8000fec:	bf00      	nop
 8000fee:	3720      	adds	r7, #32
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	40020800 	.word	0x40020800

08001000 <disp_row>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void disp_row(uint16_t row) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]

	if (row == 0) {
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d122      	bne.n	8001056 <disp_row+0x56>

		for (uint8_t i = 0; i < 6; i++) {
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e008      	b.n	8001028 <disp_row+0x28>
			HAL_SPI_Transmit(&hspi1, &data1, 16, 1);
 8001016:	2301      	movs	r3, #1
 8001018:	2210      	movs	r2, #16
 800101a:	4954      	ldr	r1, [pc, #336]	; (800116c <disp_row+0x16c>)
 800101c:	4854      	ldr	r0, [pc, #336]	; (8001170 <disp_row+0x170>)
 800101e:	f002 fcb0 	bl	8003982 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 6; i++) {
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	3301      	adds	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	2b05      	cmp	r3, #5
 800102c:	d9f3      	bls.n	8001016 <disp_row+0x16>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2140      	movs	r1, #64	; 0x40
 8001032:	4850      	ldr	r0, [pc, #320]	; (8001174 <disp_row+0x174>)
 8001034:	f001 fed4 	bl	8002de0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2140      	movs	r1, #64	; 0x40
 800103c:	484d      	ldr	r0, [pc, #308]	; (8001174 <disp_row+0x174>)
 800103e:	f001 fecf 	bl	8002de0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2110      	movs	r1, #16
 8001046:	484c      	ldr	r0, [pc, #304]	; (8001178 <disp_row+0x178>)
 8001048:	f001 feca 	bl	8002de0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2120      	movs	r1, #32
 8001050:	4849      	ldr	r0, [pc, #292]	; (8001178 <disp_row+0x178>)
 8001052:	f001 fec5 	bl	8002de0 <HAL_GPIO_WritePin>
	}
	if (row == 1) {
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d122      	bne.n	80010a2 <disp_row+0xa2>

		for (uint8_t i = 0; i < 6; i++) {
 800105c:	2300      	movs	r3, #0
 800105e:	73bb      	strb	r3, [r7, #14]
 8001060:	e008      	b.n	8001074 <disp_row+0x74>
			HAL_SPI_Transmit(&hspi1, &data2, 16, 1);
 8001062:	2301      	movs	r3, #1
 8001064:	2210      	movs	r2, #16
 8001066:	4945      	ldr	r1, [pc, #276]	; (800117c <disp_row+0x17c>)
 8001068:	4841      	ldr	r0, [pc, #260]	; (8001170 <disp_row+0x170>)
 800106a:	f002 fc8a 	bl	8003982 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 6; i++) {
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	3301      	adds	r3, #1
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	2b05      	cmp	r3, #5
 8001078:	d9f3      	bls.n	8001062 <disp_row+0x62>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2140      	movs	r1, #64	; 0x40
 800107e:	483d      	ldr	r0, [pc, #244]	; (8001174 <disp_row+0x174>)
 8001080:	f001 feae 	bl	8002de0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2140      	movs	r1, #64	; 0x40
 8001088:	483a      	ldr	r0, [pc, #232]	; (8001174 <disp_row+0x174>)
 800108a:	f001 fea9 	bl	8002de0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2110      	movs	r1, #16
 8001092:	4839      	ldr	r0, [pc, #228]	; (8001178 <disp_row+0x178>)
 8001094:	f001 fea4 	bl	8002de0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2120      	movs	r1, #32
 800109c:	4836      	ldr	r0, [pc, #216]	; (8001178 <disp_row+0x178>)
 800109e:	f001 fe9f 	bl	8002de0 <HAL_GPIO_WritePin>
	}

	if (row == 2) {
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d122      	bne.n	80010ee <disp_row+0xee>

		for (uint8_t i = 0; i < 6; i++) {
 80010a8:	2300      	movs	r3, #0
 80010aa:	737b      	strb	r3, [r7, #13]
 80010ac:	e008      	b.n	80010c0 <disp_row+0xc0>
			HAL_SPI_Transmit(&hspi1, &data3, 16, 1);
 80010ae:	2301      	movs	r3, #1
 80010b0:	2210      	movs	r2, #16
 80010b2:	4933      	ldr	r1, [pc, #204]	; (8001180 <disp_row+0x180>)
 80010b4:	482e      	ldr	r0, [pc, #184]	; (8001170 <disp_row+0x170>)
 80010b6:	f002 fc64 	bl	8003982 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 6; i++) {
 80010ba:	7b7b      	ldrb	r3, [r7, #13]
 80010bc:	3301      	adds	r3, #1
 80010be:	737b      	strb	r3, [r7, #13]
 80010c0:	7b7b      	ldrb	r3, [r7, #13]
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	d9f3      	bls.n	80010ae <disp_row+0xae>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2140      	movs	r1, #64	; 0x40
 80010ca:	482a      	ldr	r0, [pc, #168]	; (8001174 <disp_row+0x174>)
 80010cc:	f001 fe88 	bl	8002de0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2140      	movs	r1, #64	; 0x40
 80010d4:	4827      	ldr	r0, [pc, #156]	; (8001174 <disp_row+0x174>)
 80010d6:	f001 fe83 	bl	8002de0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2110      	movs	r1, #16
 80010de:	4826      	ldr	r0, [pc, #152]	; (8001178 <disp_row+0x178>)
 80010e0:	f001 fe7e 	bl	8002de0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2120      	movs	r1, #32
 80010e8:	4823      	ldr	r0, [pc, #140]	; (8001178 <disp_row+0x178>)
 80010ea:	f001 fe79 	bl	8002de0 <HAL_GPIO_WritePin>
	}

	if (row == 3) {
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d122      	bne.n	800113a <disp_row+0x13a>

		for (uint8_t i = 0; i < 6; i++) {
 80010f4:	2300      	movs	r3, #0
 80010f6:	733b      	strb	r3, [r7, #12]
 80010f8:	e008      	b.n	800110c <disp_row+0x10c>
			HAL_SPI_Transmit(&hspi1, &data4, 16, 1);
 80010fa:	2301      	movs	r3, #1
 80010fc:	2210      	movs	r2, #16
 80010fe:	4921      	ldr	r1, [pc, #132]	; (8001184 <disp_row+0x184>)
 8001100:	481b      	ldr	r0, [pc, #108]	; (8001170 <disp_row+0x170>)
 8001102:	f002 fc3e 	bl	8003982 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 6; i++) {
 8001106:	7b3b      	ldrb	r3, [r7, #12]
 8001108:	3301      	adds	r3, #1
 800110a:	733b      	strb	r3, [r7, #12]
 800110c:	7b3b      	ldrb	r3, [r7, #12]
 800110e:	2b05      	cmp	r3, #5
 8001110:	d9f3      	bls.n	80010fa <disp_row+0xfa>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2140      	movs	r1, #64	; 0x40
 8001116:	4817      	ldr	r0, [pc, #92]	; (8001174 <disp_row+0x174>)
 8001118:	f001 fe62 	bl	8002de0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	4814      	ldr	r0, [pc, #80]	; (8001174 <disp_row+0x174>)
 8001122:	f001 fe5d 	bl	8002de0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001126:	2201      	movs	r2, #1
 8001128:	2110      	movs	r1, #16
 800112a:	4813      	ldr	r0, [pc, #76]	; (8001178 <disp_row+0x178>)
 800112c:	f001 fe58 	bl	8002de0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2120      	movs	r1, #32
 8001134:	4810      	ldr	r0, [pc, #64]	; (8001178 <disp_row+0x178>)
 8001136:	f001 fe53 	bl	8002de0 <HAL_GPIO_WritePin>
	}

	HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	2110      	movs	r1, #16
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <disp_row+0x174>)
 8001140:	f001 fe4e 	bl	8002de0 <HAL_GPIO_WritePin>
	for (uint32_t g = 0; g <= 500; g++) {};
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	e002      	b.n	8001150 <disp_row+0x150>
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	3301      	adds	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001156:	d9f8      	bls.n	800114a <disp_row+0x14a>
	HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2110      	movs	r1, #16
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <disp_row+0x174>)
 800115e:	f001 fe3f 	bl	8002de0 <HAL_GPIO_WritePin>
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000198 	.word	0x20000198
 8001170:	200001f8 	.word	0x200001f8
 8001174:	40020000 	.word	0x40020000
 8001178:	40020800 	.word	0x40020800
 800117c:	200001a8 	.word	0x200001a8
 8001180:	200001b8 	.word	0x200001b8
 8001184:	200001c8 	.word	0x200001c8

08001188 <draw_screen>:

void draw_screen(uint8_t state) { // включает/выключает все светодиоды на экране
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	for (uint16_t i = 0; i < WIDTH; i++) {
 8001192:	2300      	movs	r3, #0
 8001194:	81fb      	strh	r3, [r7, #14]
 8001196:	e011      	b.n	80011bc <draw_screen+0x34>
		for (uint16_t j = 0; j < HEIGHT; j++) {
 8001198:	2300      	movs	r3, #0
 800119a:	81bb      	strh	r3, [r7, #12]
 800119c:	e008      	b.n	80011b0 <draw_screen+0x28>
			disp1color_DrawPixel(i, j, state);
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	89b9      	ldrh	r1, [r7, #12]
 80011a2:	79fa      	ldrb	r2, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fad1 	bl	800074c <disp1color_DrawPixel>
		for (uint16_t j = 0; j < HEIGHT; j++) {
 80011aa:	89bb      	ldrh	r3, [r7, #12]
 80011ac:	3301      	adds	r3, #1
 80011ae:	81bb      	strh	r3, [r7, #12]
 80011b0:	89bb      	ldrh	r3, [r7, #12]
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	d9f3      	bls.n	800119e <draw_screen+0x16>
	for (uint16_t i = 0; i < WIDTH; i++) {
 80011b6:	89fb      	ldrh	r3, [r7, #14]
 80011b8:	3301      	adds	r3, #1
 80011ba:	81fb      	strh	r3, [r7, #14]
 80011bc:	89fb      	ldrh	r3, [r7, #14]
 80011be:	2b1f      	cmp	r3, #31
 80011c0:	d9ea      	bls.n	8001198 <draw_screen+0x10>
		}
	}
}
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <draw_bird>:

void draw_bird(int16_t h) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	80fb      	strh	r3, [r7, #6]
	disp1color_DrawRectangle(14 + h, 6, 17 + h, 9);
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	330e      	adds	r3, #14
 80011da:	b29b      	uxth	r3, r3
 80011dc:	b218      	sxth	r0, r3
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	3311      	adds	r3, #17
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	2309      	movs	r3, #9
 80011e8:	2106      	movs	r1, #6
 80011ea:	f7ff fb90 	bl	800090e <disp1color_DrawRectangle>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <draw_box>:

void draw_box(int16_t number, int16_t counter) {
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	460a      	mov	r2, r1
 8001200:	80fb      	strh	r3, [r7, #6]
 8001202:	4613      	mov	r3, r2
 8001204:	80bb      	strh	r3, [r7, #4]
	disp1color_DrawRectangle(21 - number, 11 + counter, 31, 15 + counter); //верхний
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	f1c3 0315 	rsb	r3, r3, #21
 800120c:	b29b      	uxth	r3, r3
 800120e:	b218      	sxth	r0, r3
 8001210:	88bb      	ldrh	r3, [r7, #4]
 8001212:	330b      	adds	r3, #11
 8001214:	b29b      	uxth	r3, r3
 8001216:	b219      	sxth	r1, r3
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	330f      	adds	r3, #15
 800121c:	b29b      	uxth	r3, r3
 800121e:	b21b      	sxth	r3, r3
 8001220:	221f      	movs	r2, #31
 8001222:	f7ff fb74 	bl	800090e <disp1color_DrawRectangle>
	disp1color_DrawRectangle(10 - number, 11 + counter, 0, 15 + counter); //нижний
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	f1c3 030a 	rsb	r3, r3, #10
 800122c:	b29b      	uxth	r3, r3
 800122e:	b218      	sxth	r0, r3
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	330b      	adds	r3, #11
 8001234:	b29b      	uxth	r3, r3
 8001236:	b219      	sxth	r1, r3
 8001238:	88bb      	ldrh	r3, [r7, #4]
 800123a:	330f      	adds	r3, #15
 800123c:	b29b      	uxth	r3, r3
 800123e:	b21b      	sxth	r3, r3
 8001240:	2200      	movs	r2, #0
 8001242:	f7ff fb64 	bl	800090e <disp1color_DrawRectangle>

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <is_gameover>:

void is_gameover(int16_t number, int16_t counter, int16_t h) {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	80fb      	strh	r3, [r7, #6]
 800125a:	460b      	mov	r3, r1
 800125c:	80bb      	strh	r3, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	807b      	strh	r3, [r7, #2]
	if (t > 0) {
 8001262:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <is_gameover+0xa8>)
 8001264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001268:	2b00      	cmp	r3, #0
 800126a:	dd3b      	ble.n	80012e4 <is_gameover+0x94>
		a = 11 + counter;
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	330b      	adds	r3, #11
 8001270:	b29b      	uxth	r3, r3
 8001272:	b21a      	sxth	r2, r3
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <is_gameover+0xac>)
 8001276:	801a      	strh	r2, [r3, #0]
		d = 21 - number - 17 - h;
 8001278:	88fa      	ldrh	r2, [r7, #6]
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	4413      	add	r3, r2
 800127e:	b29b      	uxth	r3, r3
 8001280:	f1c3 0304 	rsb	r3, r3, #4
 8001284:	b29b      	uxth	r3, r3
 8001286:	b21a      	sxth	r2, r3
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <is_gameover+0xb0>)
 800128a:	801a      	strh	r2, [r3, #0]
		g = 14 + h - 10 + number;
 800128c:	887a      	ldrh	r2, [r7, #2]
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	4413      	add	r3, r2
 8001292:	b29b      	uxth	r3, r3
 8001294:	3304      	adds	r3, #4
 8001296:	b29b      	uxth	r3, r3
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <is_gameover+0xb4>)
 800129c:	801a      	strh	r2, [r3, #0]
		if (11 + counter >= 2 && 11 + counter <= 9 && ((21 - number - 17 - h < 2) || (14 + h - 10 + number < 2))) {
 800129e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012a2:	f113 0f09 	cmn.w	r3, #9
 80012a6:	db19      	blt.n	80012dc <is_gameover+0x8c>
 80012a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	da14      	bge.n	80012dc <is_gameover+0x8c>
 80012b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b6:	f1c3 0204 	rsb	r2, r3, #4
 80012ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	dd07      	ble.n	80012d4 <is_gameover+0x84>
 80012c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012c8:	1d1a      	adds	r2, r3, #4
 80012ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ce:	4413      	add	r3, r2
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	dc03      	bgt.n	80012dc <is_gameover+0x8c>
			gameover = 1;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <is_gameover+0xb8>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	801a      	strh	r2, [r3, #0]
		}
		else {gameover = 0;}
		}
	else {gameover = 0;}

}
 80012da:	e006      	b.n	80012ea <is_gameover+0x9a>
		else {gameover = 0;}
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <is_gameover+0xb8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	801a      	strh	r2, [r3, #0]
}
 80012e2:	e002      	b.n	80012ea <is_gameover+0x9a>
	else {gameover = 0;}
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <is_gameover+0xb8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	801a      	strh	r2, [r3, #0]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000002 	.word	0x20000002
 80012fc:	200001e8 	.word	0x200001e8
 8001300:	200001ea 	.word	0x200001ea
 8001304:	200001ec 	.word	0x200001ec
 8001308:	200001e0 	.word	0x200001e0

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	f5ad 6d7c 	sub.w	sp, sp, #4032	; 0xfc0
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001314:	f000 fd7a 	bl	8001e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001318:	f000 f8fa 	bl	8001510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131c:	f7ff fdfe 	bl	8000f1c <MX_GPIO_Init>
  MX_ADC3_Init();
 8001320:	f7ff f948 	bl	80005b4 <MX_ADC3_Init>
  MX_SPI1_Init();
 8001324:	f000 f95a 	bl	80015dc <MX_SPI1_Init>
  MX_TIM2_Init();
 8001328:	f000 fbba 	bl	8001aa0 <MX_TIM2_Init>
  MX_TIM4_Init();
 800132c:	f000 fc64 	bl	8001bf8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001330:	f000 fc0c 	bl	8001b4c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001334:	4865      	ldr	r0, [pc, #404]	; (80014cc <main+0x1c0>)
 8001336:	f002 fd7b 	bl	8003e30 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800133a:	4865      	ldr	r0, [pc, #404]	; (80014d0 <main+0x1c4>)
 800133c:	f002 fd78 	bl	8003e30 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001340:	4864      	ldr	r0, [pc, #400]	; (80014d4 <main+0x1c8>)
 8001342:	f002 fd75 	bl	8003e30 <HAL_TIM_Base_Start_IT>

	char *gameoverr = "LOSER";
 8001346:	4b64      	ldr	r3, [pc, #400]	; (80014d8 <main+0x1cc>)
 8001348:	f8c7 3fb8 	str.w	r3, [r7, #4024]	; 0xfb8

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (gameover == 0) {
 800134c:	4b63      	ldr	r3, [pc, #396]	; (80014dc <main+0x1d0>)
 800134e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d146      	bne.n	80013e4 <main+0xd8>
			draw_screen(0);
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff ff16 	bl	8001188 <draw_screen>
			draw_bird(h);
 800135c:	4b60      	ldr	r3, [pc, #384]	; (80014e0 <main+0x1d4>)
 800135e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff32 	bl	80011cc <draw_bird>
			number = (numb - 1) * 2;
 8001368:	4b5e      	ldr	r3, [pc, #376]	; (80014e4 <main+0x1d8>)
 800136a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136e:	3b01      	subs	r3, #1
 8001370:	b29b      	uxth	r3, r3
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	b29b      	uxth	r3, r3
 8001376:	b21a      	sxth	r2, r3
 8001378:	4b5b      	ldr	r3, [pc, #364]	; (80014e8 <main+0x1dc>)
 800137a:	801a      	strh	r2, [r3, #0]
			draw_box(number, counter);
 800137c:	4b5a      	ldr	r3, [pc, #360]	; (80014e8 <main+0x1dc>)
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	4a5a      	ldr	r2, [pc, #360]	; (80014ec <main+0x1e0>)
 8001384:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff33 	bl	80011f6 <draw_box>
			is_gameover(number, counter, h);
 8001390:	4b55      	ldr	r3, [pc, #340]	; (80014e8 <main+0x1dc>)
 8001392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001396:	4a55      	ldr	r2, [pc, #340]	; (80014ec <main+0x1e0>)
 8001398:	f9b2 1000 	ldrsh.w	r1, [r2]
 800139c:	4a50      	ldr	r2, [pc, #320]	; (80014e0 <main+0x1d4>)
 800139e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff54 	bl	8001250 <is_gameover>
			disp1color_UpdateFromBuff(); //Перевод рассчитанных данных в массив
 80013a8:	f7ff f9a2 	bl	80006f0 <disp1color_UpdateFromBuff>
			prepare_data(); //Разбиение массива на массивы под каждую строку
 80013ac:	f7ff fcfe 	bl	8000dac <prepare_data>
			for (uint8_t i = 0; i < 20; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 3fbf 	strb.w	r3, [r7, #4031]	; 0xfbf
 80013b6:	e010      	b.n	80013da <main+0xce>
				disp_row(0);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff fe21 	bl	8001000 <disp_row>
				disp_row(1);
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff fe1e 	bl	8001000 <disp_row>
				disp_row(2);
 80013c4:	2002      	movs	r0, #2
 80013c6:	f7ff fe1b 	bl	8001000 <disp_row>
				disp_row(3);
 80013ca:	2003      	movs	r0, #3
 80013cc:	f7ff fe18 	bl	8001000 <disp_row>
			for (uint8_t i = 0; i < 20; i++) {
 80013d0:	f897 3fbf 	ldrb.w	r3, [r7, #4031]	; 0xfbf
 80013d4:	3301      	adds	r3, #1
 80013d6:	f887 3fbf 	strb.w	r3, [r7, #4031]	; 0xfbf
 80013da:	f897 3fbf 	ldrb.w	r3, [r7, #4031]	; 0xfbf
 80013de:	2b13      	cmp	r3, #19
 80013e0:	d9ea      	bls.n	80013b8 <main+0xac>
 80013e2:	e7b3      	b.n	800134c <main+0x40>
			}
		}
		else {
			if (flag4 == 0) {
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <main+0x1e4>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d134      	bne.n	8001456 <main+0x14a>
					disp1color_UpdateFromBuff(); //Перевод рассчитанных данных в массив
 80013ec:	f7ff f980 	bl	80006f0 <disp1color_UpdateFromBuff>
					prepare_data(); //Разбиение массива на массивы под каждую строку
 80013f0:	f7ff fcdc 	bl	8000dac <prepare_data>
					for (uint8_t i = 0; i < 20; i++) {
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3fbe 	strb.w	r3, [r7, #4030]	; 0xfbe
 80013fa:	e010      	b.n	800141e <main+0x112>
						disp_row(0);
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff fdff 	bl	8001000 <disp_row>
						disp_row(1);
 8001402:	2001      	movs	r0, #1
 8001404:	f7ff fdfc 	bl	8001000 <disp_row>
						disp_row(2);
 8001408:	2002      	movs	r0, #2
 800140a:	f7ff fdf9 	bl	8001000 <disp_row>
						disp_row(3);
 800140e:	2003      	movs	r0, #3
 8001410:	f7ff fdf6 	bl	8001000 <disp_row>
					for (uint8_t i = 0; i < 20; i++) {
 8001414:	f897 3fbe 	ldrb.w	r3, [r7, #4030]	; 0xfbe
 8001418:	3301      	adds	r3, #1
 800141a:	f887 3fbe 	strb.w	r3, [r7, #4030]	; 0xfbe
 800141e:	f897 3fbe 	ldrb.w	r3, [r7, #4030]	; 0xfbe
 8001422:	2b13      	cmp	r3, #19
 8001424:	d9ea      	bls.n	80013fc <main+0xf0>
					}
					if (flag5 == 0) {pred_count = count; flag5 = 1;}
 8001426:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <main+0x1e8>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d106      	bne.n	800143c <main+0x130>
 800142e:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <main+0x1ec>)
 8001430:	881a      	ldrh	r2, [r3, #0]
 8001432:	4b32      	ldr	r3, [pc, #200]	; (80014fc <main+0x1f0>)
 8001434:	801a      	strh	r2, [r3, #0]
 8001436:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <main+0x1e8>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
					if (count - pred_count > 15){ flag4 = 1; }
 800143c:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <main+0x1ec>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <main+0x1f0>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b0f      	cmp	r3, #15
 800144a:	f77f af7f 	ble.w	800134c <main+0x40>
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <main+0x1e4>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	e77a      	b.n	800134c <main+0x40>
//						disp_row(0);
//						disp_row(1);
//						disp_row(2);
//						disp_row(3);
//					}
					if (flag6 == 0) {score1 = score; flag6 = 1;}
 8001456:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <main+0x1f4>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <main+0x160>
 800145e:	4b29      	ldr	r3, [pc, #164]	; (8001504 <main+0x1f8>)
 8001460:	881a      	ldrh	r2, [r3, #0]
 8001462:	4b29      	ldr	r3, [pc, #164]	; (8001508 <main+0x1fc>)
 8001464:	801a      	strh	r2, [r3, #0]
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <main+0x1f4>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
					draw_screen(0);
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff fe8b 	bl	8001188 <draw_screen>
					sprintf(scor, "%d", score1);
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <main+0x1fc>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4924      	ldr	r1, [pc, #144]	; (800150c <main+0x200>)
 800147c:	4618      	mov	r0, r3
 800147e:	f003 fbed 	bl	8004c5c <siprintf>
					disp1color_printf(11, 4, FONTID_6X8M, scor);
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	2104      	movs	r1, #4
 8001488:	200b      	movs	r0, #11
 800148a:	f7ff f93b 	bl	8000704 <disp1color_printf>
					disp1color_UpdateFromBuff(); //Перевод рассчитанных данных в массив
 800148e:	f7ff f92f 	bl	80006f0 <disp1color_UpdateFromBuff>
										prepare_data(); //Разбиение массива на массивы под каждую строку
 8001492:	f7ff fc8b 	bl	8000dac <prepare_data>
										for (uint8_t i = 0; i < 20; i++) {
 8001496:	2300      	movs	r3, #0
 8001498:	f887 3fbd 	strb.w	r3, [r7, #4029]	; 0xfbd
 800149c:	e010      	b.n	80014c0 <main+0x1b4>
											disp_row(0);
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff fdae 	bl	8001000 <disp_row>
											disp_row(1);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff fdab 	bl	8001000 <disp_row>
											disp_row(2);
 80014aa:	2002      	movs	r0, #2
 80014ac:	f7ff fda8 	bl	8001000 <disp_row>
											disp_row(3);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f7ff fda5 	bl	8001000 <disp_row>
										for (uint8_t i = 0; i < 20; i++) {
 80014b6:	f897 3fbd 	ldrb.w	r3, [r7, #4029]	; 0xfbd
 80014ba:	3301      	adds	r3, #1
 80014bc:	f887 3fbd 	strb.w	r3, [r7, #4029]	; 0xfbd
 80014c0:	f897 3fbd 	ldrb.w	r3, [r7, #4029]	; 0xfbd
 80014c4:	2b13      	cmp	r3, #19
 80014c6:	d9ea      	bls.n	800149e <main+0x192>
		if (gameover == 0) {
 80014c8:	e740      	b.n	800134c <main+0x40>
 80014ca:	bf00      	nop
 80014cc:	20000258 	.word	0x20000258
 80014d0:	200002a0 	.word	0x200002a0
 80014d4:	200002e8 	.word	0x200002e8
 80014d8:	08006078 	.word	0x08006078
 80014dc:	200001e0 	.word	0x200001e0
 80014e0:	200001d8 	.word	0x200001d8
 80014e4:	200001dc 	.word	0x200001dc
 80014e8:	200001de 	.word	0x200001de
 80014ec:	200001da 	.word	0x200001da
 80014f0:	200001e4 	.word	0x200001e4
 80014f4:	200001e5 	.word	0x200001e5
 80014f8:	200001ee 	.word	0x200001ee
 80014fc:	200001f0 	.word	0x200001f0
 8001500:	200001e6 	.word	0x200001e6
 8001504:	200001f2 	.word	0x200001f2
 8001508:	200001f4 	.word	0x200001f4
 800150c:	08006080 	.word	0x08006080

08001510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b094      	sub	sp, #80	; 0x50
 8001514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	2234      	movs	r2, #52	; 0x34
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f003 fb56 	bl	8004bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <SystemClock_Config+0xb8>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	4a22      	ldr	r2, [pc, #136]	; (80015c8 <SystemClock_Config+0xb8>)
 800153e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001542:	6413      	str	r3, [r2, #64]	; 0x40
 8001544:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <SystemClock_Config+0xb8>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001550:	2300      	movs	r3, #0
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <SystemClock_Config+0xbc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800155c:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <SystemClock_Config+0xbc>)
 800155e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <SystemClock_Config+0xbc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001570:	2302      	movs	r3, #2
 8001572:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001574:	2301      	movs	r3, #1
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001578:	2310      	movs	r3, #16
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800157c:	2300      	movs	r3, #0
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4618      	mov	r0, r3
 8001586:	f001 fed5 	bl	8003334 <HAL_RCC_OscConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001590:	f000 f81e 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001594:	230f      	movs	r3, #15
 8001596:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 fc30 	bl	8002e14 <HAL_RCC_ClockConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015ba:	f000 f809 	bl	80015d0 <Error_Handler>
  }
}
 80015be:	bf00      	nop
 80015c0:	3750      	adds	r7, #80	; 0x50
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015d8:	e7fe      	b.n	80015d8 <Error_Handler+0x8>
	...

080015dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_SPI1_Init+0x64>)
 80015e2:	4a18      	ldr	r2, [pc, #96]	; (8001644 <MX_SPI1_Init+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <MX_SPI1_Init+0x64>)
 80015e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_SPI1_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_SPI1_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_SPI1_Init+0x64>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_SPI1_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_SPI1_Init+0x64>)
 8001608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_SPI1_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <MX_SPI1_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_SPI1_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_SPI1_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_SPI1_Init+0x64>)
 8001628:	220a      	movs	r2, #10
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_SPI1_Init+0x64>)
 800162e:	f002 f91f 	bl	8003870 <HAL_SPI_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001638:	f7ff ffca 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200001f8 	.word	0x200001f8
 8001644:	40013000 	.word	0x40013000

08001648 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_SPI_MspInit+0x84>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d12b      	bne.n	80016c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_SPI_MspInit+0x88>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <HAL_SPI_MspInit+0x88>)
 8001674:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001678:	6453      	str	r3, [r2, #68]	; 0x44
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_SPI_MspInit+0x88>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_SPI_MspInit+0x88>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <HAL_SPI_MspInit+0x88>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_SPI_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016a2:	23a0      	movs	r3, #160	; 0xa0
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016b2:	2305      	movs	r3, #5
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <HAL_SPI_MspInit+0x8c>)
 80016be:	f001 f9fb 	bl	8002ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	; 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40013000 	.word	0x40013000
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000

080016d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <HAL_MspInit+0x4c>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <HAL_MspInit+0x4c>)
 80016e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <HAL_MspInit+0x4c>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_MspInit+0x4c>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_MspInit+0x4c>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_MspInit+0x4c>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800172c:	e7fe      	b.n	800172c <NMI_Handler+0x4>

0800172e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <MemManage_Handler+0x4>

0800173a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <UsageFault_Handler+0x4>

08001746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001774:	f000 fb9c 	bl	8001eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <ADC_IRQHandler+0x10>)
 8001782:	f000 fd14 	bl	80021ae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000090 	.word	0x20000090

08001790 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_ADC_Start_IT(&hadc3);
 8001794:	4828      	ldr	r0, [pc, #160]	; (8001838 <TIM2_IRQHandler+0xa8>)
 8001796:	f000 fbef 	bl	8001f78 <HAL_ADC_Start_IT>
	adc_reg_val = HAL_ADC_GetValue(&hadc3);
 800179a:	4827      	ldr	r0, [pc, #156]	; (8001838 <TIM2_IRQHandler+0xa8>)
 800179c:	f000 fe17 	bl	80023ce <HAL_ADC_GetValue>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <TIM2_IRQHandler+0xac>)
 80017a6:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop_IT(&hadc3);
 80017a8:	4823      	ldr	r0, [pc, #140]	; (8001838 <TIM2_IRQHandler+0xa8>)
 80017aa:	f000 fcc3 	bl	8002134 <HAL_ADC_Stop_IT>

	if (3700 <= adc_reg_val && adc_reg_val <= 3800) {
 80017ae:	4b23      	ldr	r3, [pc, #140]	; (800183c <TIM2_IRQHandler+0xac>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	f640 6273 	movw	r2, #3699	; 0xe73
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d915      	bls.n	80017e6 <TIM2_IRQHandler+0x56>
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <TIM2_IRQHandler+0xac>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	f640 62d8 	movw	r2, #3800	; 0xed8
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d80f      	bhi.n	80017e6 <TIM2_IRQHandler+0x56>
		flag = 1;
 80017c6:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <TIM2_IRQHandler+0xb0>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	801a      	strh	r2, [r3, #0]
		flag3 = 1;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <TIM2_IRQHandler+0xb4>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	801a      	strh	r2, [r3, #0]
		h++; }
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <TIM2_IRQHandler+0xb8>)
 80017d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3301      	adds	r3, #1
 80017dc:	b29b      	uxth	r3, r3
 80017de:	b21a      	sxth	r2, r3
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <TIM2_IRQHandler+0xb8>)
 80017e2:	801a      	strh	r2, [r3, #0]
 80017e4:	e010      	b.n	8001808 <TIM2_IRQHandler+0x78>
	else if (flag != 0) { h--; }
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <TIM2_IRQHandler+0xb0>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <TIM2_IRQHandler+0x72>
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <TIM2_IRQHandler+0xb8>)
 80017f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <TIM2_IRQHandler+0xb8>)
 80017fe:	801a      	strh	r2, [r3, #0]
 8001800:	e002      	b.n	8001808 <TIM2_IRQHandler+0x78>
	else { h = 0; }
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <TIM2_IRQHandler+0xb8>)
 8001804:	2200      	movs	r2, #0
 8001806:	801a      	strh	r2, [r3, #0]
	if (h < -14) { h = -14; }
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <TIM2_IRQHandler+0xb8>)
 800180a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180e:	f113 0f0e 	cmn.w	r3, #14
 8001812:	da04      	bge.n	800181e <TIM2_IRQHandler+0x8e>
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <TIM2_IRQHandler+0xb8>)
 8001816:	f64f 72f2 	movw	r2, #65522	; 0xfff2
 800181a:	801a      	strh	r2, [r3, #0]
 800181c:	e007      	b.n	800182e <TIM2_IRQHandler+0x9e>
	else if (h > 14) { h = 14; }
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <TIM2_IRQHandler+0xb8>)
 8001820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001824:	2b0e      	cmp	r3, #14
 8001826:	dd02      	ble.n	800182e <TIM2_IRQHandler+0x9e>
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <TIM2_IRQHandler+0xb8>)
 800182a:	220e      	movs	r2, #14
 800182c:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800182e:	4807      	ldr	r0, [pc, #28]	; (800184c <TIM2_IRQHandler+0xbc>)
 8001830:	f002 fbbd 	bl	8003fae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000090 	.word	0x20000090
 800183c:	20000250 	.word	0x20000250
 8001840:	20000252 	.word	0x20000252
 8001844:	200001e2 	.word	0x200001e2
 8001848:	200001d8 	.word	0x200001d8
 800184c:	20000258 	.word	0x20000258

08001850 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
//	if (k != -10 && k <= 15) {
//		k++;
//	} else if (k > 15) {
//		k = 0;
//	}
	if (flag == 0) {counter = 0;}
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <TIM3_IRQHandler+0x68>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d103      	bne.n	8001864 <TIM3_IRQHandler+0x14>
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <TIM3_IRQHandler+0x6c>)
 800185e:	2200      	movs	r2, #0
 8001860:	801a      	strh	r2, [r3, #0]
 8001862:	e024      	b.n	80018ae <TIM3_IRQHandler+0x5e>
	else {
		counter --;
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <TIM3_IRQHandler+0x6c>)
 8001866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186a:	b29b      	uxth	r3, r3
 800186c:	3b01      	subs	r3, #1
 800186e:	b29b      	uxth	r3, r3
 8001870:	b21a      	sxth	r2, r3
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <TIM3_IRQHandler+0x6c>)
 8001874:	801a      	strh	r2, [r3, #0]
		if (counter < -20){ counter = 5; numb = rand() % 4; score++; }
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <TIM3_IRQHandler+0x6c>)
 8001878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187c:	f113 0f14 	cmn.w	r3, #20
 8001880:	da15      	bge.n	80018ae <TIM3_IRQHandler+0x5e>
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <TIM3_IRQHandler+0x6c>)
 8001884:	2205      	movs	r2, #5
 8001886:	801a      	strh	r2, [r3, #0]
 8001888:	f003 f9aa 	bl	8004be0 <rand>
 800188c:	4603      	mov	r3, r0
 800188e:	425a      	negs	r2, r3
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	f002 0203 	and.w	r2, r2, #3
 8001898:	bf58      	it	pl
 800189a:	4253      	negpl	r3, r2
 800189c:	b21a      	sxth	r2, r3
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <TIM3_IRQHandler+0x70>)
 80018a0:	801a      	strh	r2, [r3, #0]
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <TIM3_IRQHandler+0x74>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <TIM3_IRQHandler+0x74>)
 80018ac:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <TIM3_IRQHandler+0x78>)
 80018b0:	f002 fb7d 	bl	8003fae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000252 	.word	0x20000252
 80018bc:	200001da 	.word	0x200001da
 80018c0:	200001dc 	.word	0x200001dc
 80018c4:	200001f2 	.word	0x200001f2
 80018c8:	200002a0 	.word	0x200002a0

080018cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	count++;
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <TIM4_IRQHandler+0x1c>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	3301      	adds	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <TIM4_IRQHandler+0x1c>)
 80018da:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018dc:	4803      	ldr	r0, [pc, #12]	; (80018ec <TIM4_IRQHandler+0x20>)
 80018de:	f002 fb66 	bl	8003fae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200001ee 	.word	0x200001ee
 80018ec:	200002e8 	.word	0x200002e8

080018f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_kill>:

int _kill(int pid, int sig)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800190a:	f003 f929 	bl	8004b60 <__errno>
 800190e:	4603      	mov	r3, r0
 8001910:	2216      	movs	r2, #22
 8001912:	601a      	str	r2, [r3, #0]
  return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_exit>:

void _exit (int status)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ffe7 	bl	8001900 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001932:	e7fe      	b.n	8001932 <_exit+0x12>

08001934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e00a      	b.n	800195c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001946:	f3af 8000 	nop.w
 800194a:	4601      	mov	r1, r0
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf0      	blt.n	8001946 <_read+0x12>
  }

  return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e009      	b.n	8001994 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60ba      	str	r2, [r7, #8]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf1      	blt.n	8001980 <_write+0x12>
  }
  return len;
 800199c:	687b      	ldr	r3, [r7, #4]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_close>:

int _close(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ce:	605a      	str	r2, [r3, #4]
  return 0;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <_isatty>:

int _isatty(int file)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f003 f88e 	bl	8004b60 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20020000 	.word	0x20020000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	20000254 	.word	0x20000254
 8001a78:	20000348 	.word	0x20000348

08001a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <SystemInit+0x20>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <SystemInit+0x20>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa6:	f107 0320 	add.w	r3, r7, #32
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
 8001abe:	615a      	str	r2, [r3, #20]
 8001ac0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <MX_TIM2_Init+0xa8>)
 8001ac4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <MX_TIM2_Init+0xa8>)
 8001acc:	2263      	movs	r2, #99	; 0x63
 8001ace:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <MX_TIM2_Init+0xa8>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000-1;
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <MX_TIM2_Init+0xa8>)
 8001ad8:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001adc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_TIM2_Init+0xa8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <MX_TIM2_Init+0xa8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001aea:	4817      	ldr	r0, [pc, #92]	; (8001b48 <MX_TIM2_Init+0xa8>)
 8001aec:	f002 fa10 	bl	8003f10 <HAL_TIM_OC_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001af6:	f7ff fd6b 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b02:	f107 0320 	add.w	r3, r7, #32
 8001b06:	4619      	mov	r1, r3
 8001b08:	480f      	ldr	r0, [pc, #60]	; (8001b48 <MX_TIM2_Init+0xa8>)
 8001b0a:	f002 ff99 	bl	8004a40 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b14:	f7ff fd5c 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <MX_TIM2_Init+0xa8>)
 8001b30:	f002 fb46 	bl	80041c0 <HAL_TIM_OC_ConfigChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b3a:	f7ff fd49 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	; 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000258 	.word	0x20000258

08001b4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b52:	f107 0320 	add.w	r3, r7, #32
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]
 8001b6a:	615a      	str	r2, [r3, #20]
 8001b6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <MX_TIM3_Init+0xa4>)
 8001b70:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <MX_TIM3_Init+0xa8>)
 8001b72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <MX_TIM3_Init+0xa4>)
 8001b76:	221f      	movs	r2, #31
 8001b78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <MX_TIM3_Init+0xa4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <MX_TIM3_Init+0xa4>)
 8001b82:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <MX_TIM3_Init+0xa4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <MX_TIM3_Init+0xa4>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001b94:	4816      	ldr	r0, [pc, #88]	; (8001bf0 <MX_TIM3_Init+0xa4>)
 8001b96:	f002 f9bb 	bl	8003f10 <HAL_TIM_OC_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001ba0:	f7ff fd16 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bac:	f107 0320 	add.w	r3, r7, #32
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480f      	ldr	r0, [pc, #60]	; (8001bf0 <MX_TIM3_Init+0xa4>)
 8001bb4:	f002 ff44 	bl	8004a40 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001bbe:	f7ff fd07 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_TIM3_Init+0xa4>)
 8001bda:	f002 faf1 	bl	80041c0 <HAL_TIM_OC_ConfigChannel>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001be4:	f7ff fcf4 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200002a0 	.word	0x200002a0
 8001bf4:	40000400 	.word	0x40000400

08001bf8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08e      	sub	sp, #56	; 0x38
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0c:	f107 0320 	add.w	r3, r7, #32
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
 8001c24:	615a      	str	r2, [r3, #20]
 8001c26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c28:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <MX_TIM4_Init+0xe0>)
 8001c2a:	4a2c      	ldr	r2, [pc, #176]	; (8001cdc <MX_TIM4_Init+0xe4>)
 8001c2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <MX_TIM4_Init+0xe0>)
 8001c30:	229f      	movs	r2, #159	; 0x9f
 8001c32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <MX_TIM4_Init+0xe0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001c3a:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <MX_TIM4_Init+0xe0>)
 8001c3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c42:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <MX_TIM4_Init+0xe0>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <MX_TIM4_Init+0xe0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c4e:	4822      	ldr	r0, [pc, #136]	; (8001cd8 <MX_TIM4_Init+0xe0>)
 8001c50:	f002 f89e 	bl	8003d90 <HAL_TIM_Base_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001c5a:	f7ff fcb9 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c68:	4619      	mov	r1, r3
 8001c6a:	481b      	ldr	r0, [pc, #108]	; (8001cd8 <MX_TIM4_Init+0xe0>)
 8001c6c:	f002 fb04 	bl	8004278 <HAL_TIM_ConfigClockSource>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001c76:	f7ff fcab 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001c7a:	4817      	ldr	r0, [pc, #92]	; (8001cd8 <MX_TIM4_Init+0xe0>)
 8001c7c:	f002 f948 	bl	8003f10 <HAL_TIM_OC_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001c86:	f7ff fca3 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c92:	f107 0320 	add.w	r3, r7, #32
 8001c96:	4619      	mov	r1, r3
 8001c98:	480f      	ldr	r0, [pc, #60]	; (8001cd8 <MX_TIM4_Init+0xe0>)
 8001c9a:	f002 fed1 	bl	8004a40 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ca4:	f7ff fc94 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <MX_TIM4_Init+0xe0>)
 8001cc0:	f002 fa7e 	bl	80041c0 <HAL_TIM_OC_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001cca:	f7ff fc81 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	3738      	adds	r7, #56	; 0x38
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200002e8 	.word	0x200002e8
 8001cdc:	40000800 	.word	0x40000800

08001ce0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf0:	d116      	bne.n	8001d20 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_TIM_OC_MspInit+0x80>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_TIM_OC_MspInit+0x80>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_TIM_OC_MspInit+0x80>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	201c      	movs	r0, #28
 8001d14:	f000 fe99 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d18:	201c      	movs	r0, #28
 8001d1a:	f000 feb2 	bl	8002a82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d1e:	e01a      	b.n	8001d56 <HAL_TIM_OC_MspInit+0x76>
  else if(tim_ocHandle->Instance==TIM3)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <HAL_TIM_OC_MspInit+0x84>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d115      	bne.n	8001d56 <HAL_TIM_OC_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_TIM_OC_MspInit+0x80>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <HAL_TIM_OC_MspInit+0x80>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_TIM_OC_MspInit+0x80>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	201d      	movs	r0, #29
 8001d4c:	f000 fe7d 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d50:	201d      	movs	r0, #29
 8001d52:	f000 fe96 	bl	8002a82 <HAL_NVIC_EnableIRQ>
}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40000400 	.word	0x40000400

08001d68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <HAL_TIM_Base_MspInit+0x48>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d115      	bne.n	8001da6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_TIM_Base_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <HAL_TIM_Base_MspInit+0x4c>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_TIM_Base_MspInit+0x4c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	201e      	movs	r0, #30
 8001d9c:	f000 fe55 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001da0:	201e      	movs	r0, #30
 8001da2:	f000 fe6e 	bl	8002a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40000800 	.word	0x40000800
 8001db4:	40023800 	.word	0x40023800

08001db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dbe:	490e      	ldr	r1, [pc, #56]	; (8001df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dd4:	4c0b      	ldr	r4, [pc, #44]	; (8001e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001de2:	f7ff fe4b 	bl	8001a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de6:	f002 fec1 	bl	8004b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dea:	f7ff fa8f 	bl	800130c <main>
  bx  lr    
 8001dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001dfc:	08008df4 	.word	0x08008df4
  ldr r2, =_sbss
 8001e00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e04:	20000344 	.word	0x20000344

08001e08 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <CAN1_RX0_IRQHandler>
	...

08001e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <HAL_Init+0x40>)
 8001e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_Init+0x40>)
 8001e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_Init+0x40>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f000 fdfd 	bl	8002a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3a:	200f      	movs	r0, #15
 8001e3c:	f000 f808 	bl	8001e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e40:	f7ff fc4a 	bl	80016d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023c00 	.word	0x40023c00

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x54>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_InitTick+0x58>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fe15 	bl	8002a9e <HAL_SYSTICK_Config>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00e      	b.n	8001e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b0f      	cmp	r3, #15
 8001e82:	d80a      	bhi.n	8001e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e84:	2200      	movs	r2, #0
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f000 fddd 	bl	8002a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <HAL_InitTick+0x5c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	2000000c 	.word	0x2000000c
 8001eac:	20000008 	.word	0x20000008

08001eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x20>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	2000000c 	.word	0x2000000c
 8001ed4:	20000330 	.word	0x20000330

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000330 	.word	0x20000330

08001ef0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e033      	b.n	8001f6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7fe fba2 	bl	8000658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d118      	bne.n	8001f60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f36:	f023 0302 	bic.w	r3, r3, #2
 8001f3a:	f043 0202 	orr.w	r2, r3, #2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fba0 	bl	8002688 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f023 0303 	bic.w	r3, r3, #3
 8001f56:	f043 0201 	orr.w	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f5e:	e001      	b.n	8001f64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_Start_IT+0x1a>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e0bd      	b.n	800210e <HAL_ADC_Start_IT+0x196>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d018      	beq.n	8001fda <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fb8:	4b58      	ldr	r3, [pc, #352]	; (800211c <HAL_ADC_Start_IT+0x1a4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a58      	ldr	r2, [pc, #352]	; (8002120 <HAL_ADC_Start_IT+0x1a8>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0c9a      	lsrs	r2, r3, #18
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fcc:	e002      	b.n	8001fd4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f9      	bne.n	8001fce <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	f040 8085 	bne.w	80020f4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002014:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002028:	d106      	bne.n	8002038 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f023 0206 	bic.w	r2, r3, #6
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	645a      	str	r2, [r3, #68]	; 0x44
 8002036:	e002      	b.n	800203e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002046:	4b37      	ldr	r3, [pc, #220]	; (8002124 <HAL_ADC_Start_IT+0x1ac>)
 8002048:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002052:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002062:	f043 0320 	orr.w	r3, r3, #32
 8002066:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2b00      	cmp	r3, #0
 8002072:	d12a      	bne.n	80020ca <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2b      	ldr	r2, [pc, #172]	; (8002128 <HAL_ADC_Start_IT+0x1b0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d015      	beq.n	80020aa <HAL_ADC_Start_IT+0x132>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a2a      	ldr	r2, [pc, #168]	; (800212c <HAL_ADC_Start_IT+0x1b4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d105      	bne.n	8002094 <HAL_ADC_Start_IT+0x11c>
 8002088:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_ADC_Start_IT+0x1ac>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a25      	ldr	r2, [pc, #148]	; (8002130 <HAL_ADC_Start_IT+0x1b8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d136      	bne.n	800210c <HAL_ADC_Start_IT+0x194>
 800209e:	4b21      	ldr	r3, [pc, #132]	; (8002124 <HAL_ADC_Start_IT+0x1ac>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d130      	bne.n	800210c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d129      	bne.n	800210c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	e020      	b.n	800210c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a16      	ldr	r2, [pc, #88]	; (8002128 <HAL_ADC_Start_IT+0x1b0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d11b      	bne.n	800210c <HAL_ADC_Start_IT+0x194>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d114      	bne.n	800210c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	e00b      	b.n	800210c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f043 0210 	orr.w	r2, r3, #16
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000004 	.word	0x20000004
 8002120:	431bde83 	.word	0x431bde83
 8002124:	40012300 	.word	0x40012300
 8002128:	40012000 	.word	0x40012000
 800212c:	40012100 	.word	0x40012100
 8002130:	40012200 	.word	0x40012200

08002134 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_ADC_Stop_IT+0x16>
 8002146:	2302      	movs	r3, #2
 8002148:	e02b      	b.n	80021a2 <HAL_ADC_Stop_IT+0x6e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0201 	bic.w	r2, r2, #1
 8002160:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d113      	bne.n	8002198 <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800217e:	f023 0320 	bic.w	r3, r3, #32
 8002182:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d049      	beq.n	8002278 <HAL_ADC_IRQHandler+0xca>
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d046      	beq.n	8002278 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d12b      	bne.n	8002268 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002214:	2b00      	cmp	r3, #0
 8002216:	d127      	bne.n	8002268 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002230:	2b00      	cmp	r3, #0
 8002232:	d119      	bne.n	8002268 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0220 	bic.w	r2, r2, #32
 8002242:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f8bd 	bl	80023e8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f06f 0212 	mvn.w	r2, #18
 8002276:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002286:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d057      	beq.n	800233e <HAL_ADC_IRQHandler+0x190>
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d054      	beq.n	800233e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d139      	bne.n	800232e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d12b      	bne.n	800232e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d124      	bne.n	800232e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d11d      	bne.n	800232e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d119      	bne.n	800232e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002308:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 faa6 	bl	8002880 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 020c 	mvn.w	r2, #12
 800233c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d017      	beq.n	8002384 <HAL_ADC_IRQHandler+0x1d6>
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d014      	beq.n	8002384 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d10d      	bne.n	8002384 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f841 	bl	80023fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f06f 0201 	mvn.w	r2, #1
 8002382:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002392:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d015      	beq.n	80023c6 <HAL_ADC_IRQHandler+0x218>
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d012      	beq.n	80023c6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	f043 0202 	orr.w	r2, r3, #2
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0220 	mvn.w	r2, #32
 80023b4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f82a 	bl	8002410 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0220 	mvn.w	r2, #32
 80023c4:	601a      	str	r2, [r3, #0]
  }
}
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x1c>
 800243c:	2302      	movs	r3, #2
 800243e:	e113      	b.n	8002668 <HAL_ADC_ConfigChannel+0x244>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b09      	cmp	r3, #9
 800244e:	d925      	bls.n	800249c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68d9      	ldr	r1, [r3, #12]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	3b1e      	subs	r3, #30
 8002466:	2207      	movs	r2, #7
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43da      	mvns	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	400a      	ands	r2, r1
 8002474:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68d9      	ldr	r1, [r3, #12]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	4618      	mov	r0, r3
 8002488:	4603      	mov	r3, r0
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4403      	add	r3, r0
 800248e:	3b1e      	subs	r3, #30
 8002490:	409a      	lsls	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	e022      	b.n	80024e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6919      	ldr	r1, [r3, #16]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	2207      	movs	r2, #7
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	400a      	ands	r2, r1
 80024be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6919      	ldr	r1, [r3, #16]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	4603      	mov	r3, r0
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4403      	add	r3, r0
 80024d8:	409a      	lsls	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d824      	bhi.n	8002534 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3b05      	subs	r3, #5
 80024fc:	221f      	movs	r2, #31
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43da      	mvns	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	400a      	ands	r2, r1
 800250a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	4618      	mov	r0, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	3b05      	subs	r3, #5
 8002526:	fa00 f203 	lsl.w	r2, r0, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	635a      	str	r2, [r3, #52]	; 0x34
 8002532:	e04c      	b.n	80025ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b0c      	cmp	r3, #12
 800253a:	d824      	bhi.n	8002586 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	3b23      	subs	r3, #35	; 0x23
 800254e:	221f      	movs	r2, #31
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43da      	mvns	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	400a      	ands	r2, r1
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	4618      	mov	r0, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	3b23      	subs	r3, #35	; 0x23
 8002578:	fa00 f203 	lsl.w	r2, r0, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
 8002584:	e023      	b.n	80025ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	3b41      	subs	r3, #65	; 0x41
 8002598:	221f      	movs	r2, #31
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	400a      	ands	r2, r1
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	4618      	mov	r0, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	3b41      	subs	r3, #65	; 0x41
 80025c2:	fa00 f203 	lsl.w	r2, r0, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ce:	4b29      	ldr	r3, [pc, #164]	; (8002674 <HAL_ADC_ConfigChannel+0x250>)
 80025d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a28      	ldr	r2, [pc, #160]	; (8002678 <HAL_ADC_ConfigChannel+0x254>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d10f      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x1d8>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b12      	cmp	r3, #18
 80025e2:	d10b      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a1d      	ldr	r2, [pc, #116]	; (8002678 <HAL_ADC_ConfigChannel+0x254>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d12b      	bne.n	800265e <HAL_ADC_ConfigChannel+0x23a>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <HAL_ADC_ConfigChannel+0x258>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d003      	beq.n	8002618 <HAL_ADC_ConfigChannel+0x1f4>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b11      	cmp	r3, #17
 8002616:	d122      	bne.n	800265e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a11      	ldr	r2, [pc, #68]	; (800267c <HAL_ADC_ConfigChannel+0x258>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d111      	bne.n	800265e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_ADC_ConfigChannel+0x25c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a11      	ldr	r2, [pc, #68]	; (8002684 <HAL_ADC_ConfigChannel+0x260>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	0c9a      	lsrs	r2, r3, #18
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002650:	e002      	b.n	8002658 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	3b01      	subs	r3, #1
 8002656:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f9      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	40012300 	.word	0x40012300
 8002678:	40012000 	.word	0x40012000
 800267c:	10000012 	.word	0x10000012
 8002680:	20000004 	.word	0x20000004
 8002684:	431bde83 	.word	0x431bde83

08002688 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002690:	4b79      	ldr	r3, [pc, #484]	; (8002878 <ADC_Init+0x1f0>)
 8002692:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	021a      	lsls	r2, r3, #8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6899      	ldr	r1, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	4a58      	ldr	r2, [pc, #352]	; (800287c <ADC_Init+0x1f4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d022      	beq.n	8002766 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800272e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6899      	ldr	r1, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6899      	ldr	r1, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	e00f      	b.n	8002786 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002774:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002784:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0202 	bic.w	r2, r2, #2
 8002794:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6899      	ldr	r1, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7e1b      	ldrb	r3, [r3, #24]
 80027a0:	005a      	lsls	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01b      	beq.n	80027ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6859      	ldr	r1, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	3b01      	subs	r3, #1
 80027e0:	035a      	lsls	r2, r3, #13
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	e007      	b.n	80027fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	3b01      	subs	r3, #1
 8002818:	051a      	lsls	r2, r3, #20
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6899      	ldr	r1, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800283e:	025a      	lsls	r2, r3, #9
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002856:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6899      	ldr	r1, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	029a      	lsls	r2, r3, #10
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	609a      	str	r2, [r3, #8]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	40012300 	.word	0x40012300
 800287c:	0f000001 	.word	0x0f000001

08002880 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b0:	4013      	ands	r3, r2
 80028b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c6:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	60d3      	str	r3, [r2, #12]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <__NVIC_GetPriorityGrouping+0x18>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	f003 0307 	and.w	r3, r3, #7
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	2b00      	cmp	r3, #0
 8002908:	db0b      	blt.n	8002922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	4907      	ldr	r1, [pc, #28]	; (8002930 <__NVIC_EnableIRQ+0x38>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2001      	movs	r0, #1
 800291a:	fa00 f202 	lsl.w	r2, r0, r2
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000e100 	.word	0xe000e100

08002934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002944:	2b00      	cmp	r3, #0
 8002946:	db0a      	blt.n	800295e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	490c      	ldr	r1, [pc, #48]	; (8002980 <__NVIC_SetPriority+0x4c>)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	0112      	lsls	r2, r2, #4
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	440b      	add	r3, r1
 8002958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800295c:	e00a      	b.n	8002974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4908      	ldr	r1, [pc, #32]	; (8002984 <__NVIC_SetPriority+0x50>)
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	3b04      	subs	r3, #4
 800296c:	0112      	lsls	r2, r2, #4
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	440b      	add	r3, r1
 8002972:	761a      	strb	r2, [r3, #24]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000e100 	.word	0xe000e100
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	; 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f1c3 0307 	rsb	r3, r3, #7
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	bf28      	it	cs
 80029a6:	2304      	movcs	r3, #4
 80029a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d902      	bls.n	80029b8 <NVIC_EncodePriority+0x30>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3b03      	subs	r3, #3
 80029b6:	e000      	b.n	80029ba <NVIC_EncodePriority+0x32>
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	f04f 32ff 	mov.w	r2, #4294967295
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43da      	mvns	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	401a      	ands	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d0:	f04f 31ff 	mov.w	r1, #4294967295
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43d9      	mvns	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	4313      	orrs	r3, r2
         );
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a00:	d301      	bcc.n	8002a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00f      	b.n	8002a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a06:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <SysTick_Config+0x40>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0e:	210f      	movs	r1, #15
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295
 8002a14:	f7ff ff8e 	bl	8002934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <SysTick_Config+0x40>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <SysTick_Config+0x40>)
 8002a20:	2207      	movs	r2, #7
 8002a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	e000e010 	.word	0xe000e010

08002a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ff29 	bl	8002894 <__NVIC_SetPriorityGrouping>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a5c:	f7ff ff3e 	bl	80028dc <__NVIC_GetPriorityGrouping>
 8002a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	6978      	ldr	r0, [r7, #20]
 8002a68:	f7ff ff8e 	bl	8002988 <NVIC_EncodePriority>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff5d 	bl	8002934 <__NVIC_SetPriority>
}
 8002a7a:	bf00      	nop
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff31 	bl	80028f8 <__NVIC_EnableIRQ>
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff ffa2 	bl	80029f0 <SysTick_Config>
 8002aac:	4603      	mov	r3, r0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	e165      	b.n	8002da0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	f040 8154 	bne.w	8002d9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d005      	beq.n	8002b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d130      	bne.n	8002b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 0201 	and.w	r2, r3, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d017      	beq.n	8002ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d123      	bne.n	8002bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	08da      	lsrs	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3208      	adds	r2, #8
 8002bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	220f      	movs	r2, #15
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	08da      	lsrs	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3208      	adds	r2, #8
 8002bf6:	69b9      	ldr	r1, [r7, #24]
 8002bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	2203      	movs	r2, #3
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0203 	and.w	r2, r3, #3
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80ae 	beq.w	8002d9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b5d      	ldr	r3, [pc, #372]	; (8002db8 <HAL_GPIO_Init+0x300>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a5c      	ldr	r2, [pc, #368]	; (8002db8 <HAL_GPIO_Init+0x300>)
 8002c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4e:	4b5a      	ldr	r3, [pc, #360]	; (8002db8 <HAL_GPIO_Init+0x300>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c5a:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4f      	ldr	r2, [pc, #316]	; (8002dc0 <HAL_GPIO_Init+0x308>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d025      	beq.n	8002cd2 <HAL_GPIO_Init+0x21a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4e      	ldr	r2, [pc, #312]	; (8002dc4 <HAL_GPIO_Init+0x30c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01f      	beq.n	8002cce <HAL_GPIO_Init+0x216>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4d      	ldr	r2, [pc, #308]	; (8002dc8 <HAL_GPIO_Init+0x310>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d019      	beq.n	8002cca <HAL_GPIO_Init+0x212>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4c      	ldr	r2, [pc, #304]	; (8002dcc <HAL_GPIO_Init+0x314>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_GPIO_Init+0x20e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4b      	ldr	r2, [pc, #300]	; (8002dd0 <HAL_GPIO_Init+0x318>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_GPIO_Init+0x20a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4a      	ldr	r2, [pc, #296]	; (8002dd4 <HAL_GPIO_Init+0x31c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <HAL_GPIO_Init+0x206>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a49      	ldr	r2, [pc, #292]	; (8002dd8 <HAL_GPIO_Init+0x320>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_GPIO_Init+0x202>
 8002cb6:	2306      	movs	r3, #6
 8002cb8:	e00c      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cba:	2307      	movs	r3, #7
 8002cbc:	e00a      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cbe:	2305      	movs	r3, #5
 8002cc0:	e008      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	e006      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e004      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e002      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	f002 0203 	and.w	r2, r2, #3
 8002cda:	0092      	lsls	r2, r2, #2
 8002cdc:	4093      	lsls	r3, r2
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce4:	4935      	ldr	r1, [pc, #212]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	3302      	adds	r3, #2
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf2:	4b3a      	ldr	r3, [pc, #232]	; (8002ddc <HAL_GPIO_Init+0x324>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d16:	4a31      	ldr	r2, [pc, #196]	; (8002ddc <HAL_GPIO_Init+0x324>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d1c:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <HAL_GPIO_Init+0x324>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d40:	4a26      	ldr	r2, [pc, #152]	; (8002ddc <HAL_GPIO_Init+0x324>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d46:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <HAL_GPIO_Init+0x324>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d6a:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <HAL_GPIO_Init+0x324>)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_GPIO_Init+0x324>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d94:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <HAL_GPIO_Init+0x324>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b0f      	cmp	r3, #15
 8002da4:	f67f ae96 	bls.w	8002ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3724      	adds	r7, #36	; 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40013800 	.word	0x40013800
 8002dc0:	40020000 	.word	0x40020000
 8002dc4:	40020400 	.word	0x40020400
 8002dc8:	40020800 	.word	0x40020800
 8002dcc:	40020c00 	.word	0x40020c00
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40021400 	.word	0x40021400
 8002dd8:	40021800 	.word	0x40021800
 8002ddc:	40013c00 	.word	0x40013c00

08002de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
 8002dec:	4613      	mov	r3, r2
 8002dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df0:	787b      	ldrb	r3, [r7, #1]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002df6:	887a      	ldrh	r2, [r7, #2]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dfc:	e003      	b.n	8002e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dfe:	887b      	ldrh	r3, [r7, #2]
 8002e00:	041a      	lsls	r2, r3, #16
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	619a      	str	r2, [r3, #24]
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0cc      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e28:	4b68      	ldr	r3, [pc, #416]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d90c      	bls.n	8002e50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b65      	ldr	r3, [pc, #404]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b63      	ldr	r3, [pc, #396]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0b8      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e68:	4b59      	ldr	r3, [pc, #356]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4a58      	ldr	r2, [pc, #352]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e80:	4b53      	ldr	r3, [pc, #332]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4a52      	ldr	r2, [pc, #328]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8c:	4b50      	ldr	r3, [pc, #320]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	494d      	ldr	r1, [pc, #308]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d044      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d107      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	4b47      	ldr	r3, [pc, #284]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d119      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e07f      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed2:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e06f      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee2:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e067      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef2:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f023 0203 	bic.w	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4934      	ldr	r1, [pc, #208]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f04:	f7fe ffe8 	bl	8001ed8 <HAL_GetTick>
 8002f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0c:	f7fe ffe4 	bl	8001ed8 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e04f      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 020c 	and.w	r2, r3, #12
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d1eb      	bne.n	8002f0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f34:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d20c      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f42:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e032      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f68:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4916      	ldr	r1, [pc, #88]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	490e      	ldr	r1, [pc, #56]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f9a:	f000 f821 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	490a      	ldr	r1, [pc, #40]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	5ccb      	ldrb	r3, [r1, r3]
 8002fae:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb2:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_RCC_ClockConfig+0x1c8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe ff48 	bl	8001e50 <HAL_InitTick>

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40023c00 	.word	0x40023c00
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	08008c8c 	.word	0x08008c8c
 8002fd8:	20000004 	.word	0x20000004
 8002fdc:	20000008 	.word	0x20000008

08002fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe4:	b0a6      	sub	sp, #152	; 0x98
 8002fe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003006:	4bc8      	ldr	r3, [pc, #800]	; (8003328 <HAL_RCC_GetSysClockFreq+0x348>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b0c      	cmp	r3, #12
 8003010:	f200 817e 	bhi.w	8003310 <HAL_RCC_GetSysClockFreq+0x330>
 8003014:	a201      	add	r2, pc, #4	; (adr r2, 800301c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	08003051 	.word	0x08003051
 8003020:	08003311 	.word	0x08003311
 8003024:	08003311 	.word	0x08003311
 8003028:	08003311 	.word	0x08003311
 800302c:	08003059 	.word	0x08003059
 8003030:	08003311 	.word	0x08003311
 8003034:	08003311 	.word	0x08003311
 8003038:	08003311 	.word	0x08003311
 800303c:	08003061 	.word	0x08003061
 8003040:	08003311 	.word	0x08003311
 8003044:	08003311 	.word	0x08003311
 8003048:	08003311 	.word	0x08003311
 800304c:	080031cb 	.word	0x080031cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003050:	4bb6      	ldr	r3, [pc, #728]	; (800332c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003056:	e15f      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003058:	4bb5      	ldr	r3, [pc, #724]	; (8003330 <HAL_RCC_GetSysClockFreq+0x350>)
 800305a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800305e:	e15b      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003060:	4bb1      	ldr	r3, [pc, #708]	; (8003328 <HAL_RCC_GetSysClockFreq+0x348>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003068:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800306c:	4bae      	ldr	r3, [pc, #696]	; (8003328 <HAL_RCC_GetSysClockFreq+0x348>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d031      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003078:	4bab      	ldr	r3, [pc, #684]	; (8003328 <HAL_RCC_GetSysClockFreq+0x348>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	2200      	movs	r2, #0
 8003080:	66bb      	str	r3, [r7, #104]	; 0x68
 8003082:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308a:	663b      	str	r3, [r7, #96]	; 0x60
 800308c:	2300      	movs	r3, #0
 800308e:	667b      	str	r3, [r7, #100]	; 0x64
 8003090:	4ba7      	ldr	r3, [pc, #668]	; (8003330 <HAL_RCC_GetSysClockFreq+0x350>)
 8003092:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003096:	462a      	mov	r2, r5
 8003098:	fb03 f202 	mul.w	r2, r3, r2
 800309c:	2300      	movs	r3, #0
 800309e:	4621      	mov	r1, r4
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	4aa2      	ldr	r2, [pc, #648]	; (8003330 <HAL_RCC_GetSysClockFreq+0x350>)
 80030a8:	4621      	mov	r1, r4
 80030aa:	fba1 1202 	umull	r1, r2, r1, r2
 80030ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030b0:	460a      	mov	r2, r1
 80030b2:	67ba      	str	r2, [r7, #120]	; 0x78
 80030b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80030b6:	4413      	add	r3, r2
 80030b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030be:	2200      	movs	r2, #0
 80030c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80030c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030c8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80030cc:	f7fd f8f0 	bl	80002b0 <__aeabi_uldivmod>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4613      	mov	r3, r2
 80030d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030da:	e064      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030dc:	4b92      	ldr	r3, [pc, #584]	; (8003328 <HAL_RCC_GetSysClockFreq+0x348>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	2200      	movs	r2, #0
 80030e4:	653b      	str	r3, [r7, #80]	; 0x50
 80030e6:	657a      	str	r2, [r7, #84]	; 0x54
 80030e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f0:	2300      	movs	r3, #0
 80030f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80030f8:	4622      	mov	r2, r4
 80030fa:	462b      	mov	r3, r5
 80030fc:	f04f 0000 	mov.w	r0, #0
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	0159      	lsls	r1, r3, #5
 8003106:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310a:	0150      	lsls	r0, r2, #5
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4621      	mov	r1, r4
 8003112:	1a51      	subs	r1, r2, r1
 8003114:	6139      	str	r1, [r7, #16]
 8003116:	4629      	mov	r1, r5
 8003118:	eb63 0301 	sbc.w	r3, r3, r1
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800312a:	4659      	mov	r1, fp
 800312c:	018b      	lsls	r3, r1, #6
 800312e:	4651      	mov	r1, sl
 8003130:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003134:	4651      	mov	r1, sl
 8003136:	018a      	lsls	r2, r1, #6
 8003138:	4651      	mov	r1, sl
 800313a:	ebb2 0801 	subs.w	r8, r2, r1
 800313e:	4659      	mov	r1, fp
 8003140:	eb63 0901 	sbc.w	r9, r3, r1
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003150:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003154:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003158:	4690      	mov	r8, r2
 800315a:	4699      	mov	r9, r3
 800315c:	4623      	mov	r3, r4
 800315e:	eb18 0303 	adds.w	r3, r8, r3
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	462b      	mov	r3, r5
 8003166:	eb49 0303 	adc.w	r3, r9, r3
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003178:	4629      	mov	r1, r5
 800317a:	028b      	lsls	r3, r1, #10
 800317c:	4621      	mov	r1, r4
 800317e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003182:	4621      	mov	r1, r4
 8003184:	028a      	lsls	r2, r1, #10
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800318e:	2200      	movs	r2, #0
 8003190:	643b      	str	r3, [r7, #64]	; 0x40
 8003192:	647a      	str	r2, [r7, #68]	; 0x44
 8003194:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003198:	f7fd f88a 	bl	80002b0 <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4613      	mov	r3, r2
 80031a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031a6:	4b60      	ldr	r3, [pc, #384]	; (8003328 <HAL_RCC_GetSysClockFreq+0x348>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	0c1b      	lsrs	r3, r3, #16
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	3301      	adds	r3, #1
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80031b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80031c8:	e0a6      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031ca:	4b57      	ldr	r3, [pc, #348]	; (8003328 <HAL_RCC_GetSysClockFreq+0x348>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031d6:	4b54      	ldr	r3, [pc, #336]	; (8003328 <HAL_RCC_GetSysClockFreq+0x348>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d02a      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e2:	4b51      	ldr	r3, [pc, #324]	; (8003328 <HAL_RCC_GetSysClockFreq+0x348>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	099b      	lsrs	r3, r3, #6
 80031e8:	2200      	movs	r2, #0
 80031ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031f4:	2100      	movs	r1, #0
 80031f6:	4b4e      	ldr	r3, [pc, #312]	; (8003330 <HAL_RCC_GetSysClockFreq+0x350>)
 80031f8:	fb03 f201 	mul.w	r2, r3, r1
 80031fc:	2300      	movs	r3, #0
 80031fe:	fb00 f303 	mul.w	r3, r0, r3
 8003202:	4413      	add	r3, r2
 8003204:	4a4a      	ldr	r2, [pc, #296]	; (8003330 <HAL_RCC_GetSysClockFreq+0x350>)
 8003206:	fba0 1202 	umull	r1, r2, r0, r2
 800320a:	677a      	str	r2, [r7, #116]	; 0x74
 800320c:	460a      	mov	r2, r1
 800320e:	673a      	str	r2, [r7, #112]	; 0x70
 8003210:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003212:	4413      	add	r3, r2
 8003214:	677b      	str	r3, [r7, #116]	; 0x74
 8003216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800321a:	2200      	movs	r2, #0
 800321c:	633b      	str	r3, [r7, #48]	; 0x30
 800321e:	637a      	str	r2, [r7, #52]	; 0x34
 8003220:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003224:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003228:	f7fd f842 	bl	80002b0 <__aeabi_uldivmod>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4613      	mov	r3, r2
 8003232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003236:	e05b      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003238:	4b3b      	ldr	r3, [pc, #236]	; (8003328 <HAL_RCC_GetSysClockFreq+0x348>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	099b      	lsrs	r3, r3, #6
 800323e:	2200      	movs	r2, #0
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
 8003242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324a:	623b      	str	r3, [r7, #32]
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
 8003250:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003254:	4642      	mov	r2, r8
 8003256:	464b      	mov	r3, r9
 8003258:	f04f 0000 	mov.w	r0, #0
 800325c:	f04f 0100 	mov.w	r1, #0
 8003260:	0159      	lsls	r1, r3, #5
 8003262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003266:	0150      	lsls	r0, r2, #5
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4641      	mov	r1, r8
 800326e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003272:	4649      	mov	r1, r9
 8003274:	eb63 0b01 	sbc.w	fp, r3, r1
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003284:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003288:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800328c:	ebb2 040a 	subs.w	r4, r2, sl
 8003290:	eb63 050b 	sbc.w	r5, r3, fp
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	00eb      	lsls	r3, r5, #3
 800329e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032a2:	00e2      	lsls	r2, r4, #3
 80032a4:	4614      	mov	r4, r2
 80032a6:	461d      	mov	r5, r3
 80032a8:	4643      	mov	r3, r8
 80032aa:	18e3      	adds	r3, r4, r3
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	464b      	mov	r3, r9
 80032b0:	eb45 0303 	adc.w	r3, r5, r3
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032c2:	4629      	mov	r1, r5
 80032c4:	028b      	lsls	r3, r1, #10
 80032c6:	4621      	mov	r1, r4
 80032c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032cc:	4621      	mov	r1, r4
 80032ce:	028a      	lsls	r2, r1, #10
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032d8:	2200      	movs	r2, #0
 80032da:	61bb      	str	r3, [r7, #24]
 80032dc:	61fa      	str	r2, [r7, #28]
 80032de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e2:	f7fc ffe5 	bl	80002b0 <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4613      	mov	r3, r2
 80032ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032f0:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <HAL_RCC_GetSysClockFreq+0x348>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	0f1b      	lsrs	r3, r3, #28
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80032fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003302:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003306:	fbb2 f3f3 	udiv	r3, r2, r3
 800330a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800330e:	e003      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003312:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003316:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003318:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800331c:	4618      	mov	r0, r3
 800331e:	3798      	adds	r7, #152	; 0x98
 8003320:	46bd      	mov	sp, r7
 8003322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	00f42400 	.word	0x00f42400
 8003330:	017d7840 	.word	0x017d7840

08003334 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e28d      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8083 	beq.w	800345a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003354:	4b94      	ldr	r3, [pc, #592]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b04      	cmp	r3, #4
 800335e:	d019      	beq.n	8003394 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003360:	4b91      	ldr	r3, [pc, #580]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003368:	2b08      	cmp	r3, #8
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800336c:	4b8e      	ldr	r3, [pc, #568]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003378:	d00c      	beq.n	8003394 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4b8b      	ldr	r3, [pc, #556]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d112      	bne.n	80033ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003386:	4b88      	ldr	r3, [pc, #544]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003392:	d10b      	bne.n	80033ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	4b84      	ldr	r3, [pc, #528]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d05b      	beq.n	8003458 <HAL_RCC_OscConfig+0x124>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d157      	bne.n	8003458 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e25a      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d106      	bne.n	80033c4 <HAL_RCC_OscConfig+0x90>
 80033b6:	4b7c      	ldr	r3, [pc, #496]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7b      	ldr	r2, [pc, #492]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e01d      	b.n	8003400 <HAL_RCC_OscConfig+0xcc>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0xb4>
 80033ce:	4b76      	ldr	r3, [pc, #472]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a75      	ldr	r2, [pc, #468]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b73      	ldr	r3, [pc, #460]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a72      	ldr	r2, [pc, #456]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0xcc>
 80033e8:	4b6f      	ldr	r3, [pc, #444]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a6e      	ldr	r2, [pc, #440]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b6c      	ldr	r3, [pc, #432]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a6b      	ldr	r2, [pc, #428]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe fd66 	bl	8001ed8 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003410:	f7fe fd62 	bl	8001ed8 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	; 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e21f      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b61      	ldr	r3, [pc, #388]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0xdc>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fe fd52 	bl	8001ed8 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe fd4e 	bl	8001ed8 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e20b      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	4b57      	ldr	r3, [pc, #348]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x104>
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d06f      	beq.n	8003546 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003466:	4b50      	ldr	r3, [pc, #320]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b00      	cmp	r3, #0
 8003470:	d017      	beq.n	80034a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003472:	4b4d      	ldr	r3, [pc, #308]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800347a:	2b08      	cmp	r3, #8
 800347c:	d105      	bne.n	800348a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800347e:	4b4a      	ldr	r3, [pc, #296]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003492:	2b0c      	cmp	r3, #12
 8003494:	d11c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003496:	4b44      	ldr	r3, [pc, #272]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d116      	bne.n	80034d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_RCC_OscConfig+0x186>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e1d3      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ba:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4937      	ldr	r1, [pc, #220]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ce:	e03a      	b.n	8003546 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d020      	beq.n	800351a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d8:	4b34      	ldr	r3, [pc, #208]	; (80035ac <HAL_RCC_OscConfig+0x278>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034de:	f7fe fcfb 	bl	8001ed8 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e6:	f7fe fcf7 	bl	8001ed8 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e1b4      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f8:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003504:	4b28      	ldr	r3, [pc, #160]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4925      	ldr	r1, [pc, #148]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
 8003518:	e015      	b.n	8003546 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351a:	4b24      	ldr	r3, [pc, #144]	; (80035ac <HAL_RCC_OscConfig+0x278>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fe fcda 	bl	8001ed8 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003528:	f7fe fcd6 	bl	8001ed8 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e193      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d036      	beq.n	80035c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <HAL_RCC_OscConfig+0x27c>)
 800355c:	2201      	movs	r2, #1
 800355e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fe fcba 	bl	8001ed8 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003568:	f7fe fcb6 	bl	8001ed8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e173      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357a:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 800357c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x234>
 8003586:	e01b      	b.n	80035c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_RCC_OscConfig+0x27c>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358e:	f7fe fca3 	bl	8001ed8 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003594:	e00e      	b.n	80035b4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003596:	f7fe fc9f 	bl	8001ed8 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d907      	bls.n	80035b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e15c      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
 80035a8:	40023800 	.word	0x40023800
 80035ac:	42470000 	.word	0x42470000
 80035b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b4:	4b8a      	ldr	r3, [pc, #552]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80035b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1ea      	bne.n	8003596 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8097 	beq.w	80036fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d2:	4b83      	ldr	r3, [pc, #524]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10f      	bne.n	80035fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	4b7f      	ldr	r3, [pc, #508]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	4a7e      	ldr	r2, [pc, #504]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ec:	6413      	str	r3, [r2, #64]	; 0x40
 80035ee:	4b7c      	ldr	r3, [pc, #496]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fa:	2301      	movs	r3, #1
 80035fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	4b79      	ldr	r3, [pc, #484]	; (80037e4 <HAL_RCC_OscConfig+0x4b0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d118      	bne.n	800363c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360a:	4b76      	ldr	r3, [pc, #472]	; (80037e4 <HAL_RCC_OscConfig+0x4b0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a75      	ldr	r2, [pc, #468]	; (80037e4 <HAL_RCC_OscConfig+0x4b0>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003616:	f7fe fc5f 	bl	8001ed8 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361e:	f7fe fc5b 	bl	8001ed8 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e118      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	4b6c      	ldr	r3, [pc, #432]	; (80037e4 <HAL_RCC_OscConfig+0x4b0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d106      	bne.n	8003652 <HAL_RCC_OscConfig+0x31e>
 8003644:	4b66      	ldr	r3, [pc, #408]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	4a65      	ldr	r2, [pc, #404]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
 8003650:	e01c      	b.n	800368c <HAL_RCC_OscConfig+0x358>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b05      	cmp	r3, #5
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0x340>
 800365a:	4b61      	ldr	r3, [pc, #388]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	4a60      	ldr	r2, [pc, #384]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003660:	f043 0304 	orr.w	r3, r3, #4
 8003664:	6713      	str	r3, [r2, #112]	; 0x70
 8003666:	4b5e      	ldr	r3, [pc, #376]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a5d      	ldr	r2, [pc, #372]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6713      	str	r3, [r2, #112]	; 0x70
 8003672:	e00b      	b.n	800368c <HAL_RCC_OscConfig+0x358>
 8003674:	4b5a      	ldr	r3, [pc, #360]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	4a59      	ldr	r2, [pc, #356]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	6713      	str	r3, [r2, #112]	; 0x70
 8003680:	4b57      	ldr	r3, [pc, #348]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	4a56      	ldr	r2, [pc, #344]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003686:	f023 0304 	bic.w	r3, r3, #4
 800368a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d015      	beq.n	80036c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fe fc20 	bl	8001ed8 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369c:	f7fe fc1c 	bl	8001ed8 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e0d7      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b2:	4b4b      	ldr	r3, [pc, #300]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0ee      	beq.n	800369c <HAL_RCC_OscConfig+0x368>
 80036be:	e014      	b.n	80036ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fe fc0a 	bl	8001ed8 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c6:	e00a      	b.n	80036de <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fe fc06 	bl	8001ed8 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e0c1      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036de:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1ee      	bne.n	80036c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f0:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	4a3a      	ldr	r2, [pc, #232]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80036f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80ad 	beq.w	8003860 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003706:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b08      	cmp	r3, #8
 8003710:	d060      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d145      	bne.n	80037a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	4b33      	ldr	r3, [pc, #204]	; (80037e8 <HAL_RCC_OscConfig+0x4b4>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fe fbda 	bl	8001ed8 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003728:	f7fe fbd6 	bl	8001ed8 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e093      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69da      	ldr	r2, [r3, #28]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	019b      	lsls	r3, r3, #6
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	3b01      	subs	r3, #1
 8003760:	041b      	lsls	r3, r3, #16
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	071b      	lsls	r3, r3, #28
 8003772:	491b      	ldr	r1, [pc, #108]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003778:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_RCC_OscConfig+0x4b4>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fe fbab 	bl	8001ed8 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003786:	f7fe fba7 	bl	8001ed8 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e064      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x452>
 80037a4:	e05c      	b.n	8003860 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <HAL_RCC_OscConfig+0x4b4>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe fb94 	bl	8001ed8 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe fb90 	bl	8001ed8 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e04d      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x480>
 80037d2:	e045      	b.n	8003860 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d107      	bne.n	80037ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e040      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40007000 	.word	0x40007000
 80037e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037ec:	4b1f      	ldr	r3, [pc, #124]	; (800386c <HAL_RCC_OscConfig+0x538>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d030      	beq.n	800385c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d129      	bne.n	800385c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d122      	bne.n	800385c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003824:	4293      	cmp	r3, r2
 8003826:	d119      	bne.n	800385c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	3b01      	subs	r3, #1
 8003836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d10f      	bne.n	800385c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d107      	bne.n	800385c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800

08003870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07b      	b.n	800397a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	2b00      	cmp	r3, #0
 8003888:	d108      	bne.n	800389c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003892:	d009      	beq.n	80038a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	61da      	str	r2, [r3, #28]
 800389a:	e005      	b.n	80038a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd fec0 	bl	8001648 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392c:	ea42 0103 	orr.w	r1, r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	f003 0104 	and.w	r1, r3, #4
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0210 	and.w	r2, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b088      	sub	sp, #32
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	4613      	mov	r3, r2
 8003990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_SPI_Transmit+0x22>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e126      	b.n	8003bf2 <HAL_SPI_Transmit+0x270>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ac:	f7fe fa94 	bl	8001ed8 <HAL_GetTick>
 80039b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d002      	beq.n	80039c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
 80039c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039c6:	e10b      	b.n	8003be0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_SPI_Transmit+0x52>
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039d8:	e102      	b.n	8003be0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2203      	movs	r2, #3
 80039de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	88fa      	ldrh	r2, [r7, #6]
 80039f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a20:	d10f      	bne.n	8003a42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d007      	beq.n	8003a60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a68:	d14b      	bne.n	8003b02 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_SPI_Transmit+0xf6>
 8003a72:	8afb      	ldrh	r3, [r7, #22]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d13e      	bne.n	8003af6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	881a      	ldrh	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	1c9a      	adds	r2, r3, #2
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a9c:	e02b      	b.n	8003af6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d112      	bne.n	8003ad2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	881a      	ldrh	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	1c9a      	adds	r2, r3, #2
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ad0:	e011      	b.n	8003af6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad2:	f7fe fa01 	bl	8001ed8 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d803      	bhi.n	8003aea <HAL_SPI_Transmit+0x168>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d102      	bne.n	8003af0 <HAL_SPI_Transmit+0x16e>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003af4:	e074      	b.n	8003be0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ce      	bne.n	8003a9e <HAL_SPI_Transmit+0x11c>
 8003b00:	e04c      	b.n	8003b9c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_SPI_Transmit+0x18e>
 8003b0a:	8afb      	ldrh	r3, [r7, #22]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d140      	bne.n	8003b92 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	7812      	ldrb	r2, [r2, #0]
 8003b1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b36:	e02c      	b.n	8003b92 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d113      	bne.n	8003b6e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	330c      	adds	r3, #12
 8003b50:	7812      	ldrb	r2, [r2, #0]
 8003b52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b6c:	e011      	b.n	8003b92 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b6e:	f7fe f9b3 	bl	8001ed8 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d803      	bhi.n	8003b86 <HAL_SPI_Transmit+0x204>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b84:	d102      	bne.n	8003b8c <HAL_SPI_Transmit+0x20a>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b90:	e026      	b.n	8003be0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1cd      	bne.n	8003b38 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	6839      	ldr	r1, [r7, #0]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f8b3 	bl	8003d0c <SPI_EndRxTxTransaction>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	77fb      	strb	r3, [r7, #31]
 8003bdc:	e000      	b.n	8003be0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003bde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c0c:	f7fe f964 	bl	8001ed8 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	4413      	add	r3, r2
 8003c1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c1c:	f7fe f95c 	bl	8001ed8 <HAL_GetTick>
 8003c20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c22:	4b39      	ldr	r3, [pc, #228]	; (8003d08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	015b      	lsls	r3, r3, #5
 8003c28:	0d1b      	lsrs	r3, r3, #20
 8003c2a:	69fa      	ldr	r2, [r7, #28]
 8003c2c:	fb02 f303 	mul.w	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c32:	e054      	b.n	8003cde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	d050      	beq.n	8003cde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c3c:	f7fe f94c 	bl	8001ed8 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d902      	bls.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d13d      	bne.n	8003cce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c6a:	d111      	bne.n	8003c90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c74:	d004      	beq.n	8003c80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7e:	d107      	bne.n	8003c90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c98:	d10f      	bne.n	8003cba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e017      	b.n	8003cfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	bf0c      	ite	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	2300      	movne	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d19b      	bne.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3720      	adds	r7, #32
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000004 	.word	0x20000004

08003d0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d18:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <SPI_EndRxTxTransaction+0x7c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1b      	ldr	r2, [pc, #108]	; (8003d8c <SPI_EndRxTxTransaction+0x80>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	0d5b      	lsrs	r3, r3, #21
 8003d24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d36:	d112      	bne.n	8003d5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2180      	movs	r1, #128	; 0x80
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7ff ff5a 	bl	8003bfc <SPI_WaitFlagStateUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d016      	beq.n	8003d7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	f043 0220 	orr.w	r2, r3, #32
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e00f      	b.n	8003d7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b80      	cmp	r3, #128	; 0x80
 8003d76:	d0f2      	beq.n	8003d5e <SPI_EndRxTxTransaction+0x52>
 8003d78:	e000      	b.n	8003d7c <SPI_EndRxTxTransaction+0x70>
        break;
 8003d7a:	bf00      	nop
  }

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000004 	.word	0x20000004
 8003d8c:	165e9f81 	.word	0x165e9f81

08003d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e041      	b.n	8003e26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fd ffd6 	bl	8001d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f000 fb4c 	bl	800446c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d001      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e04e      	b.n	8003ee6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a23      	ldr	r2, [pc, #140]	; (8003ef4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d022      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e72:	d01d      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1f      	ldr	r2, [pc, #124]	; (8003ef8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d018      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1e      	ldr	r2, [pc, #120]	; (8003efc <HAL_TIM_Base_Start_IT+0xcc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1c      	ldr	r2, [pc, #112]	; (8003f00 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00e      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d009      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d004      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a18      	ldr	r2, [pc, #96]	; (8003f0c <HAL_TIM_Base_Start_IT+0xdc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d111      	bne.n	8003ed4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b06      	cmp	r3, #6
 8003ec0:	d010      	beq.n	8003ee4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0201 	orr.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed2:	e007      	b.n	8003ee4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40010000 	.word	0x40010000
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800
 8003f00:	40000c00 	.word	0x40000c00
 8003f04:	40010400 	.word	0x40010400
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40001800 	.word	0x40001800

08003f10 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e041      	b.n	8003fa6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd fed2 	bl	8001ce0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f000 fa8c 	bl	800446c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d122      	bne.n	800400a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d11b      	bne.n	800400a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f06f 0202 	mvn.w	r2, #2
 8003fda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fa1c 	bl	800442e <HAL_TIM_IC_CaptureCallback>
 8003ff6:	e005      	b.n	8004004 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fa0e 	bl	800441a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa1f 	bl	8004442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b04      	cmp	r3, #4
 8004016:	d122      	bne.n	800405e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b04      	cmp	r3, #4
 8004024:	d11b      	bne.n	800405e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f06f 0204 	mvn.w	r2, #4
 800402e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f9f2 	bl	800442e <HAL_TIM_IC_CaptureCallback>
 800404a:	e005      	b.n	8004058 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f9e4 	bl	800441a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9f5 	bl	8004442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b08      	cmp	r3, #8
 800406a:	d122      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b08      	cmp	r3, #8
 8004078:	d11b      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f06f 0208 	mvn.w	r2, #8
 8004082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2204      	movs	r2, #4
 8004088:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f9c8 	bl	800442e <HAL_TIM_IC_CaptureCallback>
 800409e:	e005      	b.n	80040ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f9ba 	bl	800441a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f9cb 	bl	8004442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b10      	cmp	r3, #16
 80040be:	d122      	bne.n	8004106 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	d11b      	bne.n	8004106 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f06f 0210 	mvn.w	r2, #16
 80040d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2208      	movs	r2, #8
 80040dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f99e 	bl	800442e <HAL_TIM_IC_CaptureCallback>
 80040f2:	e005      	b.n	8004100 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f990 	bl	800441a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f9a1 	bl	8004442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10e      	bne.n	8004132 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d107      	bne.n	8004132 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f06f 0201 	mvn.w	r2, #1
 800412a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f96a 	bl	8004406 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413c:	2b80      	cmp	r3, #128	; 0x80
 800413e:	d10e      	bne.n	800415e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b80      	cmp	r3, #128	; 0x80
 800414c:	d107      	bne.n	800415e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fcf7 	bl	8004b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004168:	2b40      	cmp	r3, #64	; 0x40
 800416a:	d10e      	bne.n	800418a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b40      	cmp	r3, #64	; 0x40
 8004178:	d107      	bne.n	800418a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f966 	bl	8004456 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b20      	cmp	r3, #32
 8004196:	d10e      	bne.n	80041b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d107      	bne.n	80041b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f06f 0220 	mvn.w	r2, #32
 80041ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fcc1 	bl	8004b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_TIM_OC_ConfigChannel+0x1e>
 80041da:	2302      	movs	r3, #2
 80041dc:	e048      	b.n	8004270 <HAL_TIM_OC_ConfigChannel+0xb0>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b0c      	cmp	r3, #12
 80041ea:	d839      	bhi.n	8004260 <HAL_TIM_OC_ConfigChannel+0xa0>
 80041ec:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004229 	.word	0x08004229
 80041f8:	08004261 	.word	0x08004261
 80041fc:	08004261 	.word	0x08004261
 8004200:	08004261 	.word	0x08004261
 8004204:	08004237 	.word	0x08004237
 8004208:	08004261 	.word	0x08004261
 800420c:	08004261 	.word	0x08004261
 8004210:	08004261 	.word	0x08004261
 8004214:	08004245 	.word	0x08004245
 8004218:	08004261 	.word	0x08004261
 800421c:	08004261 	.word	0x08004261
 8004220:	08004261 	.word	0x08004261
 8004224:	08004253 	.word	0x08004253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	4618      	mov	r0, r3
 8004230:	f000 f9bc 	bl	80045ac <TIM_OC1_SetConfig>
      break;
 8004234:	e017      	b.n	8004266 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fa25 	bl	800468c <TIM_OC2_SetConfig>
      break;
 8004242:	e010      	b.n	8004266 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fa94 	bl	8004778 <TIM_OC3_SetConfig>
      break;
 8004250:	e009      	b.n	8004266 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fb01 	bl	8004860 <TIM_OC4_SetConfig>
      break;
 800425e:	e002      	b.n	8004266 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	75fb      	strb	r3, [r7, #23]
      break;
 8004264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800426e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIM_ConfigClockSource+0x1c>
 8004290:	2302      	movs	r3, #2
 8004292:	e0b4      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x186>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042cc:	d03e      	beq.n	800434c <HAL_TIM_ConfigClockSource+0xd4>
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d2:	f200 8087 	bhi.w	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	f000 8086 	beq.w	80043ea <HAL_TIM_ConfigClockSource+0x172>
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e2:	d87f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042e4:	2b70      	cmp	r3, #112	; 0x70
 80042e6:	d01a      	beq.n	800431e <HAL_TIM_ConfigClockSource+0xa6>
 80042e8:	2b70      	cmp	r3, #112	; 0x70
 80042ea:	d87b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042ec:	2b60      	cmp	r3, #96	; 0x60
 80042ee:	d050      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x11a>
 80042f0:	2b60      	cmp	r3, #96	; 0x60
 80042f2:	d877      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042f4:	2b50      	cmp	r3, #80	; 0x50
 80042f6:	d03c      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0xfa>
 80042f8:	2b50      	cmp	r3, #80	; 0x50
 80042fa:	d873      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	d058      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004300:	2b40      	cmp	r3, #64	; 0x40
 8004302:	d86f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004304:	2b30      	cmp	r3, #48	; 0x30
 8004306:	d064      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004308:	2b30      	cmp	r3, #48	; 0x30
 800430a:	d86b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d060      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d867      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d05c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004318:	2b10      	cmp	r3, #16
 800431a:	d05a      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 800431c:	e062      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6899      	ldr	r1, [r3, #8]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f000 fb67 	bl	8004a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	609a      	str	r2, [r3, #8]
      break;
 800434a:	e04f      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6899      	ldr	r1, [r3, #8]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f000 fb50 	bl	8004a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436e:	609a      	str	r2, [r3, #8]
      break;
 8004370:	e03c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6859      	ldr	r1, [r3, #4]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	461a      	mov	r2, r3
 8004380:	f000 fac4 	bl	800490c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2150      	movs	r1, #80	; 0x50
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fb1d 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 8004390:	e02c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	461a      	mov	r2, r3
 80043a0:	f000 fae3 	bl	800496a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2160      	movs	r1, #96	; 0x60
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fb0d 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 80043b0:	e01c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	461a      	mov	r2, r3
 80043c0:	f000 faa4 	bl	800490c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2140      	movs	r1, #64	; 0x40
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fafd 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 80043d0:	e00c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f000 faf4 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 80043e2:	e003      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      break;
 80043e8:	e000      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
	...

0800446c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a40      	ldr	r2, [pc, #256]	; (8004580 <TIM_Base_SetConfig+0x114>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d013      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448a:	d00f      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a3d      	ldr	r2, [pc, #244]	; (8004584 <TIM_Base_SetConfig+0x118>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00b      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a3c      	ldr	r2, [pc, #240]	; (8004588 <TIM_Base_SetConfig+0x11c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d007      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3b      	ldr	r2, [pc, #236]	; (800458c <TIM_Base_SetConfig+0x120>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3a      	ldr	r2, [pc, #232]	; (8004590 <TIM_Base_SetConfig+0x124>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d108      	bne.n	80044be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2f      	ldr	r2, [pc, #188]	; (8004580 <TIM_Base_SetConfig+0x114>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d02b      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044cc:	d027      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2c      	ldr	r2, [pc, #176]	; (8004584 <TIM_Base_SetConfig+0x118>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d023      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2b      	ldr	r2, [pc, #172]	; (8004588 <TIM_Base_SetConfig+0x11c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01f      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2a      	ldr	r2, [pc, #168]	; (800458c <TIM_Base_SetConfig+0x120>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01b      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a29      	ldr	r2, [pc, #164]	; (8004590 <TIM_Base_SetConfig+0x124>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d017      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a28      	ldr	r2, [pc, #160]	; (8004594 <TIM_Base_SetConfig+0x128>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a27      	ldr	r2, [pc, #156]	; (8004598 <TIM_Base_SetConfig+0x12c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00f      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a26      	ldr	r2, [pc, #152]	; (800459c <TIM_Base_SetConfig+0x130>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00b      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a25      	ldr	r2, [pc, #148]	; (80045a0 <TIM_Base_SetConfig+0x134>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d007      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a24      	ldr	r2, [pc, #144]	; (80045a4 <TIM_Base_SetConfig+0x138>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d003      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a23      	ldr	r2, [pc, #140]	; (80045a8 <TIM_Base_SetConfig+0x13c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d108      	bne.n	8004530 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <TIM_Base_SetConfig+0x114>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <TIM_Base_SetConfig+0xf8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <TIM_Base_SetConfig+0x124>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d103      	bne.n	800456c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	615a      	str	r2, [r3, #20]
}
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40010000 	.word	0x40010000
 8004584:	40000400 	.word	0x40000400
 8004588:	40000800 	.word	0x40000800
 800458c:	40000c00 	.word	0x40000c00
 8004590:	40010400 	.word	0x40010400
 8004594:	40014000 	.word	0x40014000
 8004598:	40014400 	.word	0x40014400
 800459c:	40014800 	.word	0x40014800
 80045a0:	40001800 	.word	0x40001800
 80045a4:	40001c00 	.word	0x40001c00
 80045a8:	40002000 	.word	0x40002000

080045ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0303 	bic.w	r3, r3, #3
 80045e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f023 0302 	bic.w	r3, r3, #2
 80045f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a20      	ldr	r2, [pc, #128]	; (8004684 <TIM_OC1_SetConfig+0xd8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_OC1_SetConfig+0x64>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a1f      	ldr	r2, [pc, #124]	; (8004688 <TIM_OC1_SetConfig+0xdc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d10c      	bne.n	800462a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f023 0308 	bic.w	r3, r3, #8
 8004616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f023 0304 	bic.w	r3, r3, #4
 8004628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a15      	ldr	r2, [pc, #84]	; (8004684 <TIM_OC1_SetConfig+0xd8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d003      	beq.n	800463a <TIM_OC1_SetConfig+0x8e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a14      	ldr	r2, [pc, #80]	; (8004688 <TIM_OC1_SetConfig+0xdc>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d111      	bne.n	800465e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	621a      	str	r2, [r3, #32]
}
 8004678:	bf00      	nop
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	40010000 	.word	0x40010000
 8004688:	40010400 	.word	0x40010400

0800468c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f023 0210 	bic.w	r2, r3, #16
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f023 0320 	bic.w	r3, r3, #32
 80046d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a22      	ldr	r2, [pc, #136]	; (8004770 <TIM_OC2_SetConfig+0xe4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d003      	beq.n	80046f4 <TIM_OC2_SetConfig+0x68>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a21      	ldr	r2, [pc, #132]	; (8004774 <TIM_OC2_SetConfig+0xe8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d10d      	bne.n	8004710 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a17      	ldr	r2, [pc, #92]	; (8004770 <TIM_OC2_SetConfig+0xe4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d003      	beq.n	8004720 <TIM_OC2_SetConfig+0x94>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a16      	ldr	r2, [pc, #88]	; (8004774 <TIM_OC2_SetConfig+0xe8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d113      	bne.n	8004748 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800472e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	621a      	str	r2, [r3, #32]
}
 8004762:	bf00      	nop
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40010000 	.word	0x40010000
 8004774:	40010400 	.word	0x40010400

08004778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0303 	bic.w	r3, r3, #3
 80047ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	021b      	lsls	r3, r3, #8
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a21      	ldr	r2, [pc, #132]	; (8004858 <TIM_OC3_SetConfig+0xe0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d003      	beq.n	80047de <TIM_OC3_SetConfig+0x66>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a20      	ldr	r2, [pc, #128]	; (800485c <TIM_OC3_SetConfig+0xe4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d10d      	bne.n	80047fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	021b      	lsls	r3, r3, #8
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a16      	ldr	r2, [pc, #88]	; (8004858 <TIM_OC3_SetConfig+0xe0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d003      	beq.n	800480a <TIM_OC3_SetConfig+0x92>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a15      	ldr	r2, [pc, #84]	; (800485c <TIM_OC3_SetConfig+0xe4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d113      	bne.n	8004832 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	621a      	str	r2, [r3, #32]
}
 800484c:	bf00      	nop
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	40010000 	.word	0x40010000
 800485c:	40010400 	.word	0x40010400

08004860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	031b      	lsls	r3, r3, #12
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a12      	ldr	r2, [pc, #72]	; (8004904 <TIM_OC4_SetConfig+0xa4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_OC4_SetConfig+0x68>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a11      	ldr	r2, [pc, #68]	; (8004908 <TIM_OC4_SetConfig+0xa8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d109      	bne.n	80048dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	019b      	lsls	r3, r3, #6
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40010000 	.word	0x40010000
 8004908:	40010400 	.word	0x40010400

0800490c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f023 0201 	bic.w	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f023 030a 	bic.w	r3, r3, #10
 8004948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4313      	orrs	r3, r2
 8004950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	621a      	str	r2, [r3, #32]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800496a:	b480      	push	{r7}
 800496c:	b087      	sub	sp, #28
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	f023 0210 	bic.w	r2, r3, #16
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	031b      	lsls	r3, r3, #12
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	621a      	str	r2, [r3, #32]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f043 0307 	orr.w	r3, r3, #7
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	609a      	str	r2, [r3, #8]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	021a      	lsls	r2, r3, #8
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	609a      	str	r2, [r3, #8]
}
 8004a34:	bf00      	nop
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e05a      	b.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a21      	ldr	r2, [pc, #132]	; (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d022      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa4:	d01d      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1d      	ldr	r2, [pc, #116]	; (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d018      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1a      	ldr	r2, [pc, #104]	; (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a18      	ldr	r2, [pc, #96]	; (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a17      	ldr	r2, [pc, #92]	; (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a15      	ldr	r2, [pc, #84]	; (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d10c      	bne.n	8004afc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40010000 	.word	0x40010000
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40000800 	.word	0x40000800
 8004b28:	40000c00 	.word	0x40000c00
 8004b2c:	40010400 	.word	0x40010400
 8004b30:	40014000 	.word	0x40014000
 8004b34:	40001800 	.word	0x40001800

08004b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <__errno>:
 8004b60:	4b01      	ldr	r3, [pc, #4]	; (8004b68 <__errno+0x8>)
 8004b62:	6818      	ldr	r0, [r3, #0]
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000010 	.word	0x20000010

08004b6c <__libc_init_array>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	4d0d      	ldr	r5, [pc, #52]	; (8004ba4 <__libc_init_array+0x38>)
 8004b70:	4c0d      	ldr	r4, [pc, #52]	; (8004ba8 <__libc_init_array+0x3c>)
 8004b72:	1b64      	subs	r4, r4, r5
 8004b74:	10a4      	asrs	r4, r4, #2
 8004b76:	2600      	movs	r6, #0
 8004b78:	42a6      	cmp	r6, r4
 8004b7a:	d109      	bne.n	8004b90 <__libc_init_array+0x24>
 8004b7c:	4d0b      	ldr	r5, [pc, #44]	; (8004bac <__libc_init_array+0x40>)
 8004b7e:	4c0c      	ldr	r4, [pc, #48]	; (8004bb0 <__libc_init_array+0x44>)
 8004b80:	f001 fa6e 	bl	8006060 <_init>
 8004b84:	1b64      	subs	r4, r4, r5
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	2600      	movs	r6, #0
 8004b8a:	42a6      	cmp	r6, r4
 8004b8c:	d105      	bne.n	8004b9a <__libc_init_array+0x2e>
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
 8004b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b94:	4798      	blx	r3
 8004b96:	3601      	adds	r6, #1
 8004b98:	e7ee      	b.n	8004b78 <__libc_init_array+0xc>
 8004b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b9e:	4798      	blx	r3
 8004ba0:	3601      	adds	r6, #1
 8004ba2:	e7f2      	b.n	8004b8a <__libc_init_array+0x1e>
 8004ba4:	08008dec 	.word	0x08008dec
 8004ba8:	08008dec 	.word	0x08008dec
 8004bac:	08008dec 	.word	0x08008dec
 8004bb0:	08008df0 	.word	0x08008df0

08004bb4 <memcpy>:
 8004bb4:	440a      	add	r2, r1
 8004bb6:	4291      	cmp	r1, r2
 8004bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bbc:	d100      	bne.n	8004bc0 <memcpy+0xc>
 8004bbe:	4770      	bx	lr
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bca:	4291      	cmp	r1, r2
 8004bcc:	d1f9      	bne.n	8004bc2 <memcpy+0xe>
 8004bce:	bd10      	pop	{r4, pc}

08004bd0 <memset>:
 8004bd0:	4402      	add	r2, r0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d100      	bne.n	8004bda <memset+0xa>
 8004bd8:	4770      	bx	lr
 8004bda:	f803 1b01 	strb.w	r1, [r3], #1
 8004bde:	e7f9      	b.n	8004bd4 <memset+0x4>

08004be0 <rand>:
 8004be0:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <rand+0x5c>)
 8004be2:	b510      	push	{r4, lr}
 8004be4:	681c      	ldr	r4, [r3, #0]
 8004be6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004be8:	b9b3      	cbnz	r3, 8004c18 <rand+0x38>
 8004bea:	2018      	movs	r0, #24
 8004bec:	f000 f9b8 	bl	8004f60 <malloc>
 8004bf0:	63a0      	str	r0, [r4, #56]	; 0x38
 8004bf2:	b928      	cbnz	r0, 8004c00 <rand+0x20>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <rand+0x60>)
 8004bf8:	4812      	ldr	r0, [pc, #72]	; (8004c44 <rand+0x64>)
 8004bfa:	214e      	movs	r1, #78	; 0x4e
 8004bfc:	f000 f888 	bl	8004d10 <__assert_func>
 8004c00:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <rand+0x68>)
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <rand+0x6c>)
 8004c04:	e9c0 2300 	strd	r2, r3, [r0]
 8004c08:	4b11      	ldr	r3, [pc, #68]	; (8004c50 <rand+0x70>)
 8004c0a:	6083      	str	r3, [r0, #8]
 8004c0c:	230b      	movs	r3, #11
 8004c0e:	8183      	strh	r3, [r0, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	2300      	movs	r3, #0
 8004c14:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004c18:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004c1a:	4a0e      	ldr	r2, [pc, #56]	; (8004c54 <rand+0x74>)
 8004c1c:	6920      	ldr	r0, [r4, #16]
 8004c1e:	6963      	ldr	r3, [r4, #20]
 8004c20:	490d      	ldr	r1, [pc, #52]	; (8004c58 <rand+0x78>)
 8004c22:	4342      	muls	r2, r0
 8004c24:	fb01 2203 	mla	r2, r1, r3, r2
 8004c28:	fba0 0101 	umull	r0, r1, r0, r1
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	eb42 0001 	adc.w	r0, r2, r1
 8004c32:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004c36:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004c3a:	bd10      	pop	{r4, pc}
 8004c3c:	20000010 	.word	0x20000010
 8004c40:	08008ca0 	.word	0x08008ca0
 8004c44:	08008cb7 	.word	0x08008cb7
 8004c48:	abcd330e 	.word	0xabcd330e
 8004c4c:	e66d1234 	.word	0xe66d1234
 8004c50:	0005deec 	.word	0x0005deec
 8004c54:	5851f42d 	.word	0x5851f42d
 8004c58:	4c957f2d 	.word	0x4c957f2d

08004c5c <siprintf>:
 8004c5c:	b40e      	push	{r1, r2, r3}
 8004c5e:	b500      	push	{lr}
 8004c60:	b09c      	sub	sp, #112	; 0x70
 8004c62:	ab1d      	add	r3, sp, #116	; 0x74
 8004c64:	9002      	str	r0, [sp, #8]
 8004c66:	9006      	str	r0, [sp, #24]
 8004c68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c6c:	4809      	ldr	r0, [pc, #36]	; (8004c94 <siprintf+0x38>)
 8004c6e:	9107      	str	r1, [sp, #28]
 8004c70:	9104      	str	r1, [sp, #16]
 8004c72:	4909      	ldr	r1, [pc, #36]	; (8004c98 <siprintf+0x3c>)
 8004c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c78:	9105      	str	r1, [sp, #20]
 8004c7a:	6800      	ldr	r0, [r0, #0]
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	a902      	add	r1, sp, #8
 8004c80:	f000 fab2 	bl	80051e8 <_svfiprintf_r>
 8004c84:	9b02      	ldr	r3, [sp, #8]
 8004c86:	2200      	movs	r2, #0
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	b01c      	add	sp, #112	; 0x70
 8004c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c90:	b003      	add	sp, #12
 8004c92:	4770      	bx	lr
 8004c94:	20000010 	.word	0x20000010
 8004c98:	ffff0208 	.word	0xffff0208

08004c9c <_vsniprintf_r>:
 8004c9c:	b530      	push	{r4, r5, lr}
 8004c9e:	4614      	mov	r4, r2
 8004ca0:	2c00      	cmp	r4, #0
 8004ca2:	b09b      	sub	sp, #108	; 0x6c
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	da05      	bge.n	8004cb6 <_vsniprintf_r+0x1a>
 8004caa:	238b      	movs	r3, #139	; 0x8b
 8004cac:	6003      	str	r3, [r0, #0]
 8004cae:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb2:	b01b      	add	sp, #108	; 0x6c
 8004cb4:	bd30      	pop	{r4, r5, pc}
 8004cb6:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004cba:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004cbe:	bf14      	ite	ne
 8004cc0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004cc4:	4623      	moveq	r3, r4
 8004cc6:	9302      	str	r3, [sp, #8]
 8004cc8:	9305      	str	r3, [sp, #20]
 8004cca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cce:	9100      	str	r1, [sp, #0]
 8004cd0:	9104      	str	r1, [sp, #16]
 8004cd2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004cd6:	4669      	mov	r1, sp
 8004cd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004cda:	f000 fa85 	bl	80051e8 <_svfiprintf_r>
 8004cde:	1c43      	adds	r3, r0, #1
 8004ce0:	bfbc      	itt	lt
 8004ce2:	238b      	movlt	r3, #139	; 0x8b
 8004ce4:	602b      	strlt	r3, [r5, #0]
 8004ce6:	2c00      	cmp	r4, #0
 8004ce8:	d0e3      	beq.n	8004cb2 <_vsniprintf_r+0x16>
 8004cea:	9b00      	ldr	r3, [sp, #0]
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	e7df      	b.n	8004cb2 <_vsniprintf_r+0x16>
	...

08004cf4 <vsniprintf>:
 8004cf4:	b507      	push	{r0, r1, r2, lr}
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	460a      	mov	r2, r1
 8004cfc:	4601      	mov	r1, r0
 8004cfe:	4803      	ldr	r0, [pc, #12]	; (8004d0c <vsniprintf+0x18>)
 8004d00:	6800      	ldr	r0, [r0, #0]
 8004d02:	f7ff ffcb 	bl	8004c9c <_vsniprintf_r>
 8004d06:	b003      	add	sp, #12
 8004d08:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d0c:	20000010 	.word	0x20000010

08004d10 <__assert_func>:
 8004d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d12:	4614      	mov	r4, r2
 8004d14:	461a      	mov	r2, r3
 8004d16:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <__assert_func+0x2c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	68d8      	ldr	r0, [r3, #12]
 8004d1e:	b14c      	cbz	r4, 8004d34 <__assert_func+0x24>
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <__assert_func+0x30>)
 8004d22:	9100      	str	r1, [sp, #0]
 8004d24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d28:	4906      	ldr	r1, [pc, #24]	; (8004d44 <__assert_func+0x34>)
 8004d2a:	462b      	mov	r3, r5
 8004d2c:	f000 f8e4 	bl	8004ef8 <fiprintf>
 8004d30:	f000 ff6e 	bl	8005c10 <abort>
 8004d34:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <__assert_func+0x38>)
 8004d36:	461c      	mov	r4, r3
 8004d38:	e7f3      	b.n	8004d22 <__assert_func+0x12>
 8004d3a:	bf00      	nop
 8004d3c:	20000010 	.word	0x20000010
 8004d40:	08008d12 	.word	0x08008d12
 8004d44:	08008d1f 	.word	0x08008d1f
 8004d48:	08008d4d 	.word	0x08008d4d

08004d4c <std>:
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	4604      	mov	r4, r0
 8004d52:	e9c0 3300 	strd	r3, r3, [r0]
 8004d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d5a:	6083      	str	r3, [r0, #8]
 8004d5c:	8181      	strh	r1, [r0, #12]
 8004d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d60:	81c2      	strh	r2, [r0, #14]
 8004d62:	6183      	str	r3, [r0, #24]
 8004d64:	4619      	mov	r1, r3
 8004d66:	2208      	movs	r2, #8
 8004d68:	305c      	adds	r0, #92	; 0x5c
 8004d6a:	f7ff ff31 	bl	8004bd0 <memset>
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <std+0x38>)
 8004d70:	6263      	str	r3, [r4, #36]	; 0x24
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <std+0x3c>)
 8004d74:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <std+0x40>)
 8004d78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d7a:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <std+0x44>)
 8004d7c:	6224      	str	r4, [r4, #32]
 8004d7e:	6323      	str	r3, [r4, #48]	; 0x30
 8004d80:	bd10      	pop	{r4, pc}
 8004d82:	bf00      	nop
 8004d84:	080059e5 	.word	0x080059e5
 8004d88:	08005a07 	.word	0x08005a07
 8004d8c:	08005a3f 	.word	0x08005a3f
 8004d90:	08005a63 	.word	0x08005a63

08004d94 <_cleanup_r>:
 8004d94:	4901      	ldr	r1, [pc, #4]	; (8004d9c <_cleanup_r+0x8>)
 8004d96:	f000 b8c1 	b.w	8004f1c <_fwalk_reent>
 8004d9a:	bf00      	nop
 8004d9c:	08005d4d 	.word	0x08005d4d

08004da0 <__sfmoreglue>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	2268      	movs	r2, #104	; 0x68
 8004da4:	1e4d      	subs	r5, r1, #1
 8004da6:	4355      	muls	r5, r2
 8004da8:	460e      	mov	r6, r1
 8004daa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004dae:	f000 f94b 	bl	8005048 <_malloc_r>
 8004db2:	4604      	mov	r4, r0
 8004db4:	b140      	cbz	r0, 8004dc8 <__sfmoreglue+0x28>
 8004db6:	2100      	movs	r1, #0
 8004db8:	e9c0 1600 	strd	r1, r6, [r0]
 8004dbc:	300c      	adds	r0, #12
 8004dbe:	60a0      	str	r0, [r4, #8]
 8004dc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004dc4:	f7ff ff04 	bl	8004bd0 <memset>
 8004dc8:	4620      	mov	r0, r4
 8004dca:	bd70      	pop	{r4, r5, r6, pc}

08004dcc <__sfp_lock_acquire>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	; (8004dd4 <__sfp_lock_acquire+0x8>)
 8004dce:	f000 b8c5 	b.w	8004f5c <__retarget_lock_acquire_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	20000335 	.word	0x20000335

08004dd8 <__sfp_lock_release>:
 8004dd8:	4801      	ldr	r0, [pc, #4]	; (8004de0 <__sfp_lock_release+0x8>)
 8004dda:	f000 b8c0 	b.w	8004f5e <__retarget_lock_release_recursive>
 8004dde:	bf00      	nop
 8004de0:	20000335 	.word	0x20000335

08004de4 <__sinit_lock_acquire>:
 8004de4:	4801      	ldr	r0, [pc, #4]	; (8004dec <__sinit_lock_acquire+0x8>)
 8004de6:	f000 b8b9 	b.w	8004f5c <__retarget_lock_acquire_recursive>
 8004dea:	bf00      	nop
 8004dec:	20000336 	.word	0x20000336

08004df0 <__sinit_lock_release>:
 8004df0:	4801      	ldr	r0, [pc, #4]	; (8004df8 <__sinit_lock_release+0x8>)
 8004df2:	f000 b8b4 	b.w	8004f5e <__retarget_lock_release_recursive>
 8004df6:	bf00      	nop
 8004df8:	20000336 	.word	0x20000336

08004dfc <__sinit>:
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	4604      	mov	r4, r0
 8004e00:	f7ff fff0 	bl	8004de4 <__sinit_lock_acquire>
 8004e04:	69a3      	ldr	r3, [r4, #24]
 8004e06:	b11b      	cbz	r3, 8004e10 <__sinit+0x14>
 8004e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e0c:	f7ff bff0 	b.w	8004df0 <__sinit_lock_release>
 8004e10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e14:	6523      	str	r3, [r4, #80]	; 0x50
 8004e16:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <__sinit+0x68>)
 8004e18:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <__sinit+0x6c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	bf04      	itt	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	61a3      	streq	r3, [r4, #24]
 8004e26:	4620      	mov	r0, r4
 8004e28:	f000 f820 	bl	8004e6c <__sfp>
 8004e2c:	6060      	str	r0, [r4, #4]
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f000 f81c 	bl	8004e6c <__sfp>
 8004e34:	60a0      	str	r0, [r4, #8]
 8004e36:	4620      	mov	r0, r4
 8004e38:	f000 f818 	bl	8004e6c <__sfp>
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	60e0      	str	r0, [r4, #12]
 8004e40:	2104      	movs	r1, #4
 8004e42:	6860      	ldr	r0, [r4, #4]
 8004e44:	f7ff ff82 	bl	8004d4c <std>
 8004e48:	68a0      	ldr	r0, [r4, #8]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2109      	movs	r1, #9
 8004e4e:	f7ff ff7d 	bl	8004d4c <std>
 8004e52:	68e0      	ldr	r0, [r4, #12]
 8004e54:	2202      	movs	r2, #2
 8004e56:	2112      	movs	r1, #18
 8004e58:	f7ff ff78 	bl	8004d4c <std>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	61a3      	str	r3, [r4, #24]
 8004e60:	e7d2      	b.n	8004e08 <__sinit+0xc>
 8004e62:	bf00      	nop
 8004e64:	08008c9c 	.word	0x08008c9c
 8004e68:	08004d95 	.word	0x08004d95

08004e6c <__sfp>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	4607      	mov	r7, r0
 8004e70:	f7ff ffac 	bl	8004dcc <__sfp_lock_acquire>
 8004e74:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <__sfp+0x84>)
 8004e76:	681e      	ldr	r6, [r3, #0]
 8004e78:	69b3      	ldr	r3, [r6, #24]
 8004e7a:	b913      	cbnz	r3, 8004e82 <__sfp+0x16>
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f7ff ffbd 	bl	8004dfc <__sinit>
 8004e82:	3648      	adds	r6, #72	; 0x48
 8004e84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	d503      	bpl.n	8004e94 <__sfp+0x28>
 8004e8c:	6833      	ldr	r3, [r6, #0]
 8004e8e:	b30b      	cbz	r3, 8004ed4 <__sfp+0x68>
 8004e90:	6836      	ldr	r6, [r6, #0]
 8004e92:	e7f7      	b.n	8004e84 <__sfp+0x18>
 8004e94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e98:	b9d5      	cbnz	r5, 8004ed0 <__sfp+0x64>
 8004e9a:	4b16      	ldr	r3, [pc, #88]	; (8004ef4 <__sfp+0x88>)
 8004e9c:	60e3      	str	r3, [r4, #12]
 8004e9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ea2:	6665      	str	r5, [r4, #100]	; 0x64
 8004ea4:	f000 f859 	bl	8004f5a <__retarget_lock_init_recursive>
 8004ea8:	f7ff ff96 	bl	8004dd8 <__sfp_lock_release>
 8004eac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004eb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004eb4:	6025      	str	r5, [r4, #0]
 8004eb6:	61a5      	str	r5, [r4, #24]
 8004eb8:	2208      	movs	r2, #8
 8004eba:	4629      	mov	r1, r5
 8004ebc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ec0:	f7ff fe86 	bl	8004bd0 <memset>
 8004ec4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ec8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ecc:	4620      	mov	r0, r4
 8004ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ed0:	3468      	adds	r4, #104	; 0x68
 8004ed2:	e7d9      	b.n	8004e88 <__sfp+0x1c>
 8004ed4:	2104      	movs	r1, #4
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	f7ff ff62 	bl	8004da0 <__sfmoreglue>
 8004edc:	4604      	mov	r4, r0
 8004ede:	6030      	str	r0, [r6, #0]
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d1d5      	bne.n	8004e90 <__sfp+0x24>
 8004ee4:	f7ff ff78 	bl	8004dd8 <__sfp_lock_release>
 8004ee8:	230c      	movs	r3, #12
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	e7ee      	b.n	8004ecc <__sfp+0x60>
 8004eee:	bf00      	nop
 8004ef0:	08008c9c 	.word	0x08008c9c
 8004ef4:	ffff0001 	.word	0xffff0001

08004ef8 <fiprintf>:
 8004ef8:	b40e      	push	{r1, r2, r3}
 8004efa:	b503      	push	{r0, r1, lr}
 8004efc:	4601      	mov	r1, r0
 8004efe:	ab03      	add	r3, sp, #12
 8004f00:	4805      	ldr	r0, [pc, #20]	; (8004f18 <fiprintf+0x20>)
 8004f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f06:	6800      	ldr	r0, [r0, #0]
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	f000 fa97 	bl	800543c <_vfiprintf_r>
 8004f0e:	b002      	add	sp, #8
 8004f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f14:	b003      	add	sp, #12
 8004f16:	4770      	bx	lr
 8004f18:	20000010 	.word	0x20000010

08004f1c <_fwalk_reent>:
 8004f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f20:	4606      	mov	r6, r0
 8004f22:	4688      	mov	r8, r1
 8004f24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f28:	2700      	movs	r7, #0
 8004f2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f2e:	f1b9 0901 	subs.w	r9, r9, #1
 8004f32:	d505      	bpl.n	8004f40 <_fwalk_reent+0x24>
 8004f34:	6824      	ldr	r4, [r4, #0]
 8004f36:	2c00      	cmp	r4, #0
 8004f38:	d1f7      	bne.n	8004f2a <_fwalk_reent+0xe>
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f40:	89ab      	ldrh	r3, [r5, #12]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d907      	bls.n	8004f56 <_fwalk_reent+0x3a>
 8004f46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	d003      	beq.n	8004f56 <_fwalk_reent+0x3a>
 8004f4e:	4629      	mov	r1, r5
 8004f50:	4630      	mov	r0, r6
 8004f52:	47c0      	blx	r8
 8004f54:	4307      	orrs	r7, r0
 8004f56:	3568      	adds	r5, #104	; 0x68
 8004f58:	e7e9      	b.n	8004f2e <_fwalk_reent+0x12>

08004f5a <__retarget_lock_init_recursive>:
 8004f5a:	4770      	bx	lr

08004f5c <__retarget_lock_acquire_recursive>:
 8004f5c:	4770      	bx	lr

08004f5e <__retarget_lock_release_recursive>:
 8004f5e:	4770      	bx	lr

08004f60 <malloc>:
 8004f60:	4b02      	ldr	r3, [pc, #8]	; (8004f6c <malloc+0xc>)
 8004f62:	4601      	mov	r1, r0
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	f000 b86f 	b.w	8005048 <_malloc_r>
 8004f6a:	bf00      	nop
 8004f6c:	20000010 	.word	0x20000010

08004f70 <_free_r>:
 8004f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f72:	2900      	cmp	r1, #0
 8004f74:	d044      	beq.n	8005000 <_free_r+0x90>
 8004f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f7a:	9001      	str	r0, [sp, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f1a1 0404 	sub.w	r4, r1, #4
 8004f82:	bfb8      	it	lt
 8004f84:	18e4      	addlt	r4, r4, r3
 8004f86:	f000 ffaf 	bl	8005ee8 <__malloc_lock>
 8004f8a:	4a1e      	ldr	r2, [pc, #120]	; (8005004 <_free_r+0x94>)
 8004f8c:	9801      	ldr	r0, [sp, #4]
 8004f8e:	6813      	ldr	r3, [r2, #0]
 8004f90:	b933      	cbnz	r3, 8004fa0 <_free_r+0x30>
 8004f92:	6063      	str	r3, [r4, #4]
 8004f94:	6014      	str	r4, [r2, #0]
 8004f96:	b003      	add	sp, #12
 8004f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f9c:	f000 bfaa 	b.w	8005ef4 <__malloc_unlock>
 8004fa0:	42a3      	cmp	r3, r4
 8004fa2:	d908      	bls.n	8004fb6 <_free_r+0x46>
 8004fa4:	6825      	ldr	r5, [r4, #0]
 8004fa6:	1961      	adds	r1, r4, r5
 8004fa8:	428b      	cmp	r3, r1
 8004faa:	bf01      	itttt	eq
 8004fac:	6819      	ldreq	r1, [r3, #0]
 8004fae:	685b      	ldreq	r3, [r3, #4]
 8004fb0:	1949      	addeq	r1, r1, r5
 8004fb2:	6021      	streq	r1, [r4, #0]
 8004fb4:	e7ed      	b.n	8004f92 <_free_r+0x22>
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	b10b      	cbz	r3, 8004fc0 <_free_r+0x50>
 8004fbc:	42a3      	cmp	r3, r4
 8004fbe:	d9fa      	bls.n	8004fb6 <_free_r+0x46>
 8004fc0:	6811      	ldr	r1, [r2, #0]
 8004fc2:	1855      	adds	r5, r2, r1
 8004fc4:	42a5      	cmp	r5, r4
 8004fc6:	d10b      	bne.n	8004fe0 <_free_r+0x70>
 8004fc8:	6824      	ldr	r4, [r4, #0]
 8004fca:	4421      	add	r1, r4
 8004fcc:	1854      	adds	r4, r2, r1
 8004fce:	42a3      	cmp	r3, r4
 8004fd0:	6011      	str	r1, [r2, #0]
 8004fd2:	d1e0      	bne.n	8004f96 <_free_r+0x26>
 8004fd4:	681c      	ldr	r4, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	6053      	str	r3, [r2, #4]
 8004fda:	4421      	add	r1, r4
 8004fdc:	6011      	str	r1, [r2, #0]
 8004fde:	e7da      	b.n	8004f96 <_free_r+0x26>
 8004fe0:	d902      	bls.n	8004fe8 <_free_r+0x78>
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	6003      	str	r3, [r0, #0]
 8004fe6:	e7d6      	b.n	8004f96 <_free_r+0x26>
 8004fe8:	6825      	ldr	r5, [r4, #0]
 8004fea:	1961      	adds	r1, r4, r5
 8004fec:	428b      	cmp	r3, r1
 8004fee:	bf04      	itt	eq
 8004ff0:	6819      	ldreq	r1, [r3, #0]
 8004ff2:	685b      	ldreq	r3, [r3, #4]
 8004ff4:	6063      	str	r3, [r4, #4]
 8004ff6:	bf04      	itt	eq
 8004ff8:	1949      	addeq	r1, r1, r5
 8004ffa:	6021      	streq	r1, [r4, #0]
 8004ffc:	6054      	str	r4, [r2, #4]
 8004ffe:	e7ca      	b.n	8004f96 <_free_r+0x26>
 8005000:	b003      	add	sp, #12
 8005002:	bd30      	pop	{r4, r5, pc}
 8005004:	20000338 	.word	0x20000338

08005008 <sbrk_aligned>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	4e0e      	ldr	r6, [pc, #56]	; (8005044 <sbrk_aligned+0x3c>)
 800500c:	460c      	mov	r4, r1
 800500e:	6831      	ldr	r1, [r6, #0]
 8005010:	4605      	mov	r5, r0
 8005012:	b911      	cbnz	r1, 800501a <sbrk_aligned+0x12>
 8005014:	f000 fcd6 	bl	80059c4 <_sbrk_r>
 8005018:	6030      	str	r0, [r6, #0]
 800501a:	4621      	mov	r1, r4
 800501c:	4628      	mov	r0, r5
 800501e:	f000 fcd1 	bl	80059c4 <_sbrk_r>
 8005022:	1c43      	adds	r3, r0, #1
 8005024:	d00a      	beq.n	800503c <sbrk_aligned+0x34>
 8005026:	1cc4      	adds	r4, r0, #3
 8005028:	f024 0403 	bic.w	r4, r4, #3
 800502c:	42a0      	cmp	r0, r4
 800502e:	d007      	beq.n	8005040 <sbrk_aligned+0x38>
 8005030:	1a21      	subs	r1, r4, r0
 8005032:	4628      	mov	r0, r5
 8005034:	f000 fcc6 	bl	80059c4 <_sbrk_r>
 8005038:	3001      	adds	r0, #1
 800503a:	d101      	bne.n	8005040 <sbrk_aligned+0x38>
 800503c:	f04f 34ff 	mov.w	r4, #4294967295
 8005040:	4620      	mov	r0, r4
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	2000033c 	.word	0x2000033c

08005048 <_malloc_r>:
 8005048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800504c:	1ccd      	adds	r5, r1, #3
 800504e:	f025 0503 	bic.w	r5, r5, #3
 8005052:	3508      	adds	r5, #8
 8005054:	2d0c      	cmp	r5, #12
 8005056:	bf38      	it	cc
 8005058:	250c      	movcc	r5, #12
 800505a:	2d00      	cmp	r5, #0
 800505c:	4607      	mov	r7, r0
 800505e:	db01      	blt.n	8005064 <_malloc_r+0x1c>
 8005060:	42a9      	cmp	r1, r5
 8005062:	d905      	bls.n	8005070 <_malloc_r+0x28>
 8005064:	230c      	movs	r3, #12
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	2600      	movs	r6, #0
 800506a:	4630      	mov	r0, r6
 800506c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005070:	4e2e      	ldr	r6, [pc, #184]	; (800512c <_malloc_r+0xe4>)
 8005072:	f000 ff39 	bl	8005ee8 <__malloc_lock>
 8005076:	6833      	ldr	r3, [r6, #0]
 8005078:	461c      	mov	r4, r3
 800507a:	bb34      	cbnz	r4, 80050ca <_malloc_r+0x82>
 800507c:	4629      	mov	r1, r5
 800507e:	4638      	mov	r0, r7
 8005080:	f7ff ffc2 	bl	8005008 <sbrk_aligned>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	4604      	mov	r4, r0
 8005088:	d14d      	bne.n	8005126 <_malloc_r+0xde>
 800508a:	6834      	ldr	r4, [r6, #0]
 800508c:	4626      	mov	r6, r4
 800508e:	2e00      	cmp	r6, #0
 8005090:	d140      	bne.n	8005114 <_malloc_r+0xcc>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	4631      	mov	r1, r6
 8005096:	4638      	mov	r0, r7
 8005098:	eb04 0803 	add.w	r8, r4, r3
 800509c:	f000 fc92 	bl	80059c4 <_sbrk_r>
 80050a0:	4580      	cmp	r8, r0
 80050a2:	d13a      	bne.n	800511a <_malloc_r+0xd2>
 80050a4:	6821      	ldr	r1, [r4, #0]
 80050a6:	3503      	adds	r5, #3
 80050a8:	1a6d      	subs	r5, r5, r1
 80050aa:	f025 0503 	bic.w	r5, r5, #3
 80050ae:	3508      	adds	r5, #8
 80050b0:	2d0c      	cmp	r5, #12
 80050b2:	bf38      	it	cc
 80050b4:	250c      	movcc	r5, #12
 80050b6:	4629      	mov	r1, r5
 80050b8:	4638      	mov	r0, r7
 80050ba:	f7ff ffa5 	bl	8005008 <sbrk_aligned>
 80050be:	3001      	adds	r0, #1
 80050c0:	d02b      	beq.n	800511a <_malloc_r+0xd2>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	442b      	add	r3, r5
 80050c6:	6023      	str	r3, [r4, #0]
 80050c8:	e00e      	b.n	80050e8 <_malloc_r+0xa0>
 80050ca:	6822      	ldr	r2, [r4, #0]
 80050cc:	1b52      	subs	r2, r2, r5
 80050ce:	d41e      	bmi.n	800510e <_malloc_r+0xc6>
 80050d0:	2a0b      	cmp	r2, #11
 80050d2:	d916      	bls.n	8005102 <_malloc_r+0xba>
 80050d4:	1961      	adds	r1, r4, r5
 80050d6:	42a3      	cmp	r3, r4
 80050d8:	6025      	str	r5, [r4, #0]
 80050da:	bf18      	it	ne
 80050dc:	6059      	strne	r1, [r3, #4]
 80050de:	6863      	ldr	r3, [r4, #4]
 80050e0:	bf08      	it	eq
 80050e2:	6031      	streq	r1, [r6, #0]
 80050e4:	5162      	str	r2, [r4, r5]
 80050e6:	604b      	str	r3, [r1, #4]
 80050e8:	4638      	mov	r0, r7
 80050ea:	f104 060b 	add.w	r6, r4, #11
 80050ee:	f000 ff01 	bl	8005ef4 <__malloc_unlock>
 80050f2:	f026 0607 	bic.w	r6, r6, #7
 80050f6:	1d23      	adds	r3, r4, #4
 80050f8:	1af2      	subs	r2, r6, r3
 80050fa:	d0b6      	beq.n	800506a <_malloc_r+0x22>
 80050fc:	1b9b      	subs	r3, r3, r6
 80050fe:	50a3      	str	r3, [r4, r2]
 8005100:	e7b3      	b.n	800506a <_malloc_r+0x22>
 8005102:	6862      	ldr	r2, [r4, #4]
 8005104:	42a3      	cmp	r3, r4
 8005106:	bf0c      	ite	eq
 8005108:	6032      	streq	r2, [r6, #0]
 800510a:	605a      	strne	r2, [r3, #4]
 800510c:	e7ec      	b.n	80050e8 <_malloc_r+0xa0>
 800510e:	4623      	mov	r3, r4
 8005110:	6864      	ldr	r4, [r4, #4]
 8005112:	e7b2      	b.n	800507a <_malloc_r+0x32>
 8005114:	4634      	mov	r4, r6
 8005116:	6876      	ldr	r6, [r6, #4]
 8005118:	e7b9      	b.n	800508e <_malloc_r+0x46>
 800511a:	230c      	movs	r3, #12
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	4638      	mov	r0, r7
 8005120:	f000 fee8 	bl	8005ef4 <__malloc_unlock>
 8005124:	e7a1      	b.n	800506a <_malloc_r+0x22>
 8005126:	6025      	str	r5, [r4, #0]
 8005128:	e7de      	b.n	80050e8 <_malloc_r+0xa0>
 800512a:	bf00      	nop
 800512c:	20000338 	.word	0x20000338

08005130 <__ssputs_r>:
 8005130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005134:	688e      	ldr	r6, [r1, #8]
 8005136:	429e      	cmp	r6, r3
 8005138:	4682      	mov	sl, r0
 800513a:	460c      	mov	r4, r1
 800513c:	4690      	mov	r8, r2
 800513e:	461f      	mov	r7, r3
 8005140:	d838      	bhi.n	80051b4 <__ssputs_r+0x84>
 8005142:	898a      	ldrh	r2, [r1, #12]
 8005144:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005148:	d032      	beq.n	80051b0 <__ssputs_r+0x80>
 800514a:	6825      	ldr	r5, [r4, #0]
 800514c:	6909      	ldr	r1, [r1, #16]
 800514e:	eba5 0901 	sub.w	r9, r5, r1
 8005152:	6965      	ldr	r5, [r4, #20]
 8005154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005158:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800515c:	3301      	adds	r3, #1
 800515e:	444b      	add	r3, r9
 8005160:	106d      	asrs	r5, r5, #1
 8005162:	429d      	cmp	r5, r3
 8005164:	bf38      	it	cc
 8005166:	461d      	movcc	r5, r3
 8005168:	0553      	lsls	r3, r2, #21
 800516a:	d531      	bpl.n	80051d0 <__ssputs_r+0xa0>
 800516c:	4629      	mov	r1, r5
 800516e:	f7ff ff6b 	bl	8005048 <_malloc_r>
 8005172:	4606      	mov	r6, r0
 8005174:	b950      	cbnz	r0, 800518c <__ssputs_r+0x5c>
 8005176:	230c      	movs	r3, #12
 8005178:	f8ca 3000 	str.w	r3, [sl]
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005182:	81a3      	strh	r3, [r4, #12]
 8005184:	f04f 30ff 	mov.w	r0, #4294967295
 8005188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800518c:	6921      	ldr	r1, [r4, #16]
 800518e:	464a      	mov	r2, r9
 8005190:	f7ff fd10 	bl	8004bb4 <memcpy>
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800519a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519e:	81a3      	strh	r3, [r4, #12]
 80051a0:	6126      	str	r6, [r4, #16]
 80051a2:	6165      	str	r5, [r4, #20]
 80051a4:	444e      	add	r6, r9
 80051a6:	eba5 0509 	sub.w	r5, r5, r9
 80051aa:	6026      	str	r6, [r4, #0]
 80051ac:	60a5      	str	r5, [r4, #8]
 80051ae:	463e      	mov	r6, r7
 80051b0:	42be      	cmp	r6, r7
 80051b2:	d900      	bls.n	80051b6 <__ssputs_r+0x86>
 80051b4:	463e      	mov	r6, r7
 80051b6:	6820      	ldr	r0, [r4, #0]
 80051b8:	4632      	mov	r2, r6
 80051ba:	4641      	mov	r1, r8
 80051bc:	f000 fe7a 	bl	8005eb4 <memmove>
 80051c0:	68a3      	ldr	r3, [r4, #8]
 80051c2:	1b9b      	subs	r3, r3, r6
 80051c4:	60a3      	str	r3, [r4, #8]
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	4433      	add	r3, r6
 80051ca:	6023      	str	r3, [r4, #0]
 80051cc:	2000      	movs	r0, #0
 80051ce:	e7db      	b.n	8005188 <__ssputs_r+0x58>
 80051d0:	462a      	mov	r2, r5
 80051d2:	f000 fe95 	bl	8005f00 <_realloc_r>
 80051d6:	4606      	mov	r6, r0
 80051d8:	2800      	cmp	r0, #0
 80051da:	d1e1      	bne.n	80051a0 <__ssputs_r+0x70>
 80051dc:	6921      	ldr	r1, [r4, #16]
 80051de:	4650      	mov	r0, sl
 80051e0:	f7ff fec6 	bl	8004f70 <_free_r>
 80051e4:	e7c7      	b.n	8005176 <__ssputs_r+0x46>
	...

080051e8 <_svfiprintf_r>:
 80051e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ec:	4698      	mov	r8, r3
 80051ee:	898b      	ldrh	r3, [r1, #12]
 80051f0:	061b      	lsls	r3, r3, #24
 80051f2:	b09d      	sub	sp, #116	; 0x74
 80051f4:	4607      	mov	r7, r0
 80051f6:	460d      	mov	r5, r1
 80051f8:	4614      	mov	r4, r2
 80051fa:	d50e      	bpl.n	800521a <_svfiprintf_r+0x32>
 80051fc:	690b      	ldr	r3, [r1, #16]
 80051fe:	b963      	cbnz	r3, 800521a <_svfiprintf_r+0x32>
 8005200:	2140      	movs	r1, #64	; 0x40
 8005202:	f7ff ff21 	bl	8005048 <_malloc_r>
 8005206:	6028      	str	r0, [r5, #0]
 8005208:	6128      	str	r0, [r5, #16]
 800520a:	b920      	cbnz	r0, 8005216 <_svfiprintf_r+0x2e>
 800520c:	230c      	movs	r3, #12
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	f04f 30ff 	mov.w	r0, #4294967295
 8005214:	e0d1      	b.n	80053ba <_svfiprintf_r+0x1d2>
 8005216:	2340      	movs	r3, #64	; 0x40
 8005218:	616b      	str	r3, [r5, #20]
 800521a:	2300      	movs	r3, #0
 800521c:	9309      	str	r3, [sp, #36]	; 0x24
 800521e:	2320      	movs	r3, #32
 8005220:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005224:	f8cd 800c 	str.w	r8, [sp, #12]
 8005228:	2330      	movs	r3, #48	; 0x30
 800522a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80053d4 <_svfiprintf_r+0x1ec>
 800522e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005232:	f04f 0901 	mov.w	r9, #1
 8005236:	4623      	mov	r3, r4
 8005238:	469a      	mov	sl, r3
 800523a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800523e:	b10a      	cbz	r2, 8005244 <_svfiprintf_r+0x5c>
 8005240:	2a25      	cmp	r2, #37	; 0x25
 8005242:	d1f9      	bne.n	8005238 <_svfiprintf_r+0x50>
 8005244:	ebba 0b04 	subs.w	fp, sl, r4
 8005248:	d00b      	beq.n	8005262 <_svfiprintf_r+0x7a>
 800524a:	465b      	mov	r3, fp
 800524c:	4622      	mov	r2, r4
 800524e:	4629      	mov	r1, r5
 8005250:	4638      	mov	r0, r7
 8005252:	f7ff ff6d 	bl	8005130 <__ssputs_r>
 8005256:	3001      	adds	r0, #1
 8005258:	f000 80aa 	beq.w	80053b0 <_svfiprintf_r+0x1c8>
 800525c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800525e:	445a      	add	r2, fp
 8005260:	9209      	str	r2, [sp, #36]	; 0x24
 8005262:	f89a 3000 	ldrb.w	r3, [sl]
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 80a2 	beq.w	80053b0 <_svfiprintf_r+0x1c8>
 800526c:	2300      	movs	r3, #0
 800526e:	f04f 32ff 	mov.w	r2, #4294967295
 8005272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005276:	f10a 0a01 	add.w	sl, sl, #1
 800527a:	9304      	str	r3, [sp, #16]
 800527c:	9307      	str	r3, [sp, #28]
 800527e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005282:	931a      	str	r3, [sp, #104]	; 0x68
 8005284:	4654      	mov	r4, sl
 8005286:	2205      	movs	r2, #5
 8005288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800528c:	4851      	ldr	r0, [pc, #324]	; (80053d4 <_svfiprintf_r+0x1ec>)
 800528e:	f7fa ffbf 	bl	8000210 <memchr>
 8005292:	9a04      	ldr	r2, [sp, #16]
 8005294:	b9d8      	cbnz	r0, 80052ce <_svfiprintf_r+0xe6>
 8005296:	06d0      	lsls	r0, r2, #27
 8005298:	bf44      	itt	mi
 800529a:	2320      	movmi	r3, #32
 800529c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052a0:	0711      	lsls	r1, r2, #28
 80052a2:	bf44      	itt	mi
 80052a4:	232b      	movmi	r3, #43	; 0x2b
 80052a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052aa:	f89a 3000 	ldrb.w	r3, [sl]
 80052ae:	2b2a      	cmp	r3, #42	; 0x2a
 80052b0:	d015      	beq.n	80052de <_svfiprintf_r+0xf6>
 80052b2:	9a07      	ldr	r2, [sp, #28]
 80052b4:	4654      	mov	r4, sl
 80052b6:	2000      	movs	r0, #0
 80052b8:	f04f 0c0a 	mov.w	ip, #10
 80052bc:	4621      	mov	r1, r4
 80052be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052c2:	3b30      	subs	r3, #48	; 0x30
 80052c4:	2b09      	cmp	r3, #9
 80052c6:	d94e      	bls.n	8005366 <_svfiprintf_r+0x17e>
 80052c8:	b1b0      	cbz	r0, 80052f8 <_svfiprintf_r+0x110>
 80052ca:	9207      	str	r2, [sp, #28]
 80052cc:	e014      	b.n	80052f8 <_svfiprintf_r+0x110>
 80052ce:	eba0 0308 	sub.w	r3, r0, r8
 80052d2:	fa09 f303 	lsl.w	r3, r9, r3
 80052d6:	4313      	orrs	r3, r2
 80052d8:	9304      	str	r3, [sp, #16]
 80052da:	46a2      	mov	sl, r4
 80052dc:	e7d2      	b.n	8005284 <_svfiprintf_r+0x9c>
 80052de:	9b03      	ldr	r3, [sp, #12]
 80052e0:	1d19      	adds	r1, r3, #4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	9103      	str	r1, [sp, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bfbb      	ittet	lt
 80052ea:	425b      	neglt	r3, r3
 80052ec:	f042 0202 	orrlt.w	r2, r2, #2
 80052f0:	9307      	strge	r3, [sp, #28]
 80052f2:	9307      	strlt	r3, [sp, #28]
 80052f4:	bfb8      	it	lt
 80052f6:	9204      	strlt	r2, [sp, #16]
 80052f8:	7823      	ldrb	r3, [r4, #0]
 80052fa:	2b2e      	cmp	r3, #46	; 0x2e
 80052fc:	d10c      	bne.n	8005318 <_svfiprintf_r+0x130>
 80052fe:	7863      	ldrb	r3, [r4, #1]
 8005300:	2b2a      	cmp	r3, #42	; 0x2a
 8005302:	d135      	bne.n	8005370 <_svfiprintf_r+0x188>
 8005304:	9b03      	ldr	r3, [sp, #12]
 8005306:	1d1a      	adds	r2, r3, #4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	9203      	str	r2, [sp, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	bfb8      	it	lt
 8005310:	f04f 33ff 	movlt.w	r3, #4294967295
 8005314:	3402      	adds	r4, #2
 8005316:	9305      	str	r3, [sp, #20]
 8005318:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80053e4 <_svfiprintf_r+0x1fc>
 800531c:	7821      	ldrb	r1, [r4, #0]
 800531e:	2203      	movs	r2, #3
 8005320:	4650      	mov	r0, sl
 8005322:	f7fa ff75 	bl	8000210 <memchr>
 8005326:	b140      	cbz	r0, 800533a <_svfiprintf_r+0x152>
 8005328:	2340      	movs	r3, #64	; 0x40
 800532a:	eba0 000a 	sub.w	r0, r0, sl
 800532e:	fa03 f000 	lsl.w	r0, r3, r0
 8005332:	9b04      	ldr	r3, [sp, #16]
 8005334:	4303      	orrs	r3, r0
 8005336:	3401      	adds	r4, #1
 8005338:	9304      	str	r3, [sp, #16]
 800533a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800533e:	4826      	ldr	r0, [pc, #152]	; (80053d8 <_svfiprintf_r+0x1f0>)
 8005340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005344:	2206      	movs	r2, #6
 8005346:	f7fa ff63 	bl	8000210 <memchr>
 800534a:	2800      	cmp	r0, #0
 800534c:	d038      	beq.n	80053c0 <_svfiprintf_r+0x1d8>
 800534e:	4b23      	ldr	r3, [pc, #140]	; (80053dc <_svfiprintf_r+0x1f4>)
 8005350:	bb1b      	cbnz	r3, 800539a <_svfiprintf_r+0x1b2>
 8005352:	9b03      	ldr	r3, [sp, #12]
 8005354:	3307      	adds	r3, #7
 8005356:	f023 0307 	bic.w	r3, r3, #7
 800535a:	3308      	adds	r3, #8
 800535c:	9303      	str	r3, [sp, #12]
 800535e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005360:	4433      	add	r3, r6
 8005362:	9309      	str	r3, [sp, #36]	; 0x24
 8005364:	e767      	b.n	8005236 <_svfiprintf_r+0x4e>
 8005366:	fb0c 3202 	mla	r2, ip, r2, r3
 800536a:	460c      	mov	r4, r1
 800536c:	2001      	movs	r0, #1
 800536e:	e7a5      	b.n	80052bc <_svfiprintf_r+0xd4>
 8005370:	2300      	movs	r3, #0
 8005372:	3401      	adds	r4, #1
 8005374:	9305      	str	r3, [sp, #20]
 8005376:	4619      	mov	r1, r3
 8005378:	f04f 0c0a 	mov.w	ip, #10
 800537c:	4620      	mov	r0, r4
 800537e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005382:	3a30      	subs	r2, #48	; 0x30
 8005384:	2a09      	cmp	r2, #9
 8005386:	d903      	bls.n	8005390 <_svfiprintf_r+0x1a8>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0c5      	beq.n	8005318 <_svfiprintf_r+0x130>
 800538c:	9105      	str	r1, [sp, #20]
 800538e:	e7c3      	b.n	8005318 <_svfiprintf_r+0x130>
 8005390:	fb0c 2101 	mla	r1, ip, r1, r2
 8005394:	4604      	mov	r4, r0
 8005396:	2301      	movs	r3, #1
 8005398:	e7f0      	b.n	800537c <_svfiprintf_r+0x194>
 800539a:	ab03      	add	r3, sp, #12
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	462a      	mov	r2, r5
 80053a0:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <_svfiprintf_r+0x1f8>)
 80053a2:	a904      	add	r1, sp, #16
 80053a4:	4638      	mov	r0, r7
 80053a6:	f3af 8000 	nop.w
 80053aa:	1c42      	adds	r2, r0, #1
 80053ac:	4606      	mov	r6, r0
 80053ae:	d1d6      	bne.n	800535e <_svfiprintf_r+0x176>
 80053b0:	89ab      	ldrh	r3, [r5, #12]
 80053b2:	065b      	lsls	r3, r3, #25
 80053b4:	f53f af2c 	bmi.w	8005210 <_svfiprintf_r+0x28>
 80053b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053ba:	b01d      	add	sp, #116	; 0x74
 80053bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c0:	ab03      	add	r3, sp, #12
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	462a      	mov	r2, r5
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <_svfiprintf_r+0x1f8>)
 80053c8:	a904      	add	r1, sp, #16
 80053ca:	4638      	mov	r0, r7
 80053cc:	f000 f9d4 	bl	8005778 <_printf_i>
 80053d0:	e7eb      	b.n	80053aa <_svfiprintf_r+0x1c2>
 80053d2:	bf00      	nop
 80053d4:	08008db0 	.word	0x08008db0
 80053d8:	08008dba 	.word	0x08008dba
 80053dc:	00000000 	.word	0x00000000
 80053e0:	08005131 	.word	0x08005131
 80053e4:	08008db6 	.word	0x08008db6

080053e8 <__sfputc_r>:
 80053e8:	6893      	ldr	r3, [r2, #8]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	b410      	push	{r4}
 80053f0:	6093      	str	r3, [r2, #8]
 80053f2:	da08      	bge.n	8005406 <__sfputc_r+0x1e>
 80053f4:	6994      	ldr	r4, [r2, #24]
 80053f6:	42a3      	cmp	r3, r4
 80053f8:	db01      	blt.n	80053fe <__sfputc_r+0x16>
 80053fa:	290a      	cmp	r1, #10
 80053fc:	d103      	bne.n	8005406 <__sfputc_r+0x1e>
 80053fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005402:	f000 bb33 	b.w	8005a6c <__swbuf_r>
 8005406:	6813      	ldr	r3, [r2, #0]
 8005408:	1c58      	adds	r0, r3, #1
 800540a:	6010      	str	r0, [r2, #0]
 800540c:	7019      	strb	r1, [r3, #0]
 800540e:	4608      	mov	r0, r1
 8005410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005414:	4770      	bx	lr

08005416 <__sfputs_r>:
 8005416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005418:	4606      	mov	r6, r0
 800541a:	460f      	mov	r7, r1
 800541c:	4614      	mov	r4, r2
 800541e:	18d5      	adds	r5, r2, r3
 8005420:	42ac      	cmp	r4, r5
 8005422:	d101      	bne.n	8005428 <__sfputs_r+0x12>
 8005424:	2000      	movs	r0, #0
 8005426:	e007      	b.n	8005438 <__sfputs_r+0x22>
 8005428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800542c:	463a      	mov	r2, r7
 800542e:	4630      	mov	r0, r6
 8005430:	f7ff ffda 	bl	80053e8 <__sfputc_r>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d1f3      	bne.n	8005420 <__sfputs_r+0xa>
 8005438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800543c <_vfiprintf_r>:
 800543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005440:	460d      	mov	r5, r1
 8005442:	b09d      	sub	sp, #116	; 0x74
 8005444:	4614      	mov	r4, r2
 8005446:	4698      	mov	r8, r3
 8005448:	4606      	mov	r6, r0
 800544a:	b118      	cbz	r0, 8005454 <_vfiprintf_r+0x18>
 800544c:	6983      	ldr	r3, [r0, #24]
 800544e:	b90b      	cbnz	r3, 8005454 <_vfiprintf_r+0x18>
 8005450:	f7ff fcd4 	bl	8004dfc <__sinit>
 8005454:	4b89      	ldr	r3, [pc, #548]	; (800567c <_vfiprintf_r+0x240>)
 8005456:	429d      	cmp	r5, r3
 8005458:	d11b      	bne.n	8005492 <_vfiprintf_r+0x56>
 800545a:	6875      	ldr	r5, [r6, #4]
 800545c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800545e:	07d9      	lsls	r1, r3, #31
 8005460:	d405      	bmi.n	800546e <_vfiprintf_r+0x32>
 8005462:	89ab      	ldrh	r3, [r5, #12]
 8005464:	059a      	lsls	r2, r3, #22
 8005466:	d402      	bmi.n	800546e <_vfiprintf_r+0x32>
 8005468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800546a:	f7ff fd77 	bl	8004f5c <__retarget_lock_acquire_recursive>
 800546e:	89ab      	ldrh	r3, [r5, #12]
 8005470:	071b      	lsls	r3, r3, #28
 8005472:	d501      	bpl.n	8005478 <_vfiprintf_r+0x3c>
 8005474:	692b      	ldr	r3, [r5, #16]
 8005476:	b9eb      	cbnz	r3, 80054b4 <_vfiprintf_r+0x78>
 8005478:	4629      	mov	r1, r5
 800547a:	4630      	mov	r0, r6
 800547c:	f000 fb5a 	bl	8005b34 <__swsetup_r>
 8005480:	b1c0      	cbz	r0, 80054b4 <_vfiprintf_r+0x78>
 8005482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005484:	07dc      	lsls	r4, r3, #31
 8005486:	d50e      	bpl.n	80054a6 <_vfiprintf_r+0x6a>
 8005488:	f04f 30ff 	mov.w	r0, #4294967295
 800548c:	b01d      	add	sp, #116	; 0x74
 800548e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005492:	4b7b      	ldr	r3, [pc, #492]	; (8005680 <_vfiprintf_r+0x244>)
 8005494:	429d      	cmp	r5, r3
 8005496:	d101      	bne.n	800549c <_vfiprintf_r+0x60>
 8005498:	68b5      	ldr	r5, [r6, #8]
 800549a:	e7df      	b.n	800545c <_vfiprintf_r+0x20>
 800549c:	4b79      	ldr	r3, [pc, #484]	; (8005684 <_vfiprintf_r+0x248>)
 800549e:	429d      	cmp	r5, r3
 80054a0:	bf08      	it	eq
 80054a2:	68f5      	ldreq	r5, [r6, #12]
 80054a4:	e7da      	b.n	800545c <_vfiprintf_r+0x20>
 80054a6:	89ab      	ldrh	r3, [r5, #12]
 80054a8:	0598      	lsls	r0, r3, #22
 80054aa:	d4ed      	bmi.n	8005488 <_vfiprintf_r+0x4c>
 80054ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054ae:	f7ff fd56 	bl	8004f5e <__retarget_lock_release_recursive>
 80054b2:	e7e9      	b.n	8005488 <_vfiprintf_r+0x4c>
 80054b4:	2300      	movs	r3, #0
 80054b6:	9309      	str	r3, [sp, #36]	; 0x24
 80054b8:	2320      	movs	r3, #32
 80054ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054be:	f8cd 800c 	str.w	r8, [sp, #12]
 80054c2:	2330      	movs	r3, #48	; 0x30
 80054c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005688 <_vfiprintf_r+0x24c>
 80054c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054cc:	f04f 0901 	mov.w	r9, #1
 80054d0:	4623      	mov	r3, r4
 80054d2:	469a      	mov	sl, r3
 80054d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054d8:	b10a      	cbz	r2, 80054de <_vfiprintf_r+0xa2>
 80054da:	2a25      	cmp	r2, #37	; 0x25
 80054dc:	d1f9      	bne.n	80054d2 <_vfiprintf_r+0x96>
 80054de:	ebba 0b04 	subs.w	fp, sl, r4
 80054e2:	d00b      	beq.n	80054fc <_vfiprintf_r+0xc0>
 80054e4:	465b      	mov	r3, fp
 80054e6:	4622      	mov	r2, r4
 80054e8:	4629      	mov	r1, r5
 80054ea:	4630      	mov	r0, r6
 80054ec:	f7ff ff93 	bl	8005416 <__sfputs_r>
 80054f0:	3001      	adds	r0, #1
 80054f2:	f000 80aa 	beq.w	800564a <_vfiprintf_r+0x20e>
 80054f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054f8:	445a      	add	r2, fp
 80054fa:	9209      	str	r2, [sp, #36]	; 0x24
 80054fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 80a2 	beq.w	800564a <_vfiprintf_r+0x20e>
 8005506:	2300      	movs	r3, #0
 8005508:	f04f 32ff 	mov.w	r2, #4294967295
 800550c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005510:	f10a 0a01 	add.w	sl, sl, #1
 8005514:	9304      	str	r3, [sp, #16]
 8005516:	9307      	str	r3, [sp, #28]
 8005518:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800551c:	931a      	str	r3, [sp, #104]	; 0x68
 800551e:	4654      	mov	r4, sl
 8005520:	2205      	movs	r2, #5
 8005522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005526:	4858      	ldr	r0, [pc, #352]	; (8005688 <_vfiprintf_r+0x24c>)
 8005528:	f7fa fe72 	bl	8000210 <memchr>
 800552c:	9a04      	ldr	r2, [sp, #16]
 800552e:	b9d8      	cbnz	r0, 8005568 <_vfiprintf_r+0x12c>
 8005530:	06d1      	lsls	r1, r2, #27
 8005532:	bf44      	itt	mi
 8005534:	2320      	movmi	r3, #32
 8005536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800553a:	0713      	lsls	r3, r2, #28
 800553c:	bf44      	itt	mi
 800553e:	232b      	movmi	r3, #43	; 0x2b
 8005540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005544:	f89a 3000 	ldrb.w	r3, [sl]
 8005548:	2b2a      	cmp	r3, #42	; 0x2a
 800554a:	d015      	beq.n	8005578 <_vfiprintf_r+0x13c>
 800554c:	9a07      	ldr	r2, [sp, #28]
 800554e:	4654      	mov	r4, sl
 8005550:	2000      	movs	r0, #0
 8005552:	f04f 0c0a 	mov.w	ip, #10
 8005556:	4621      	mov	r1, r4
 8005558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800555c:	3b30      	subs	r3, #48	; 0x30
 800555e:	2b09      	cmp	r3, #9
 8005560:	d94e      	bls.n	8005600 <_vfiprintf_r+0x1c4>
 8005562:	b1b0      	cbz	r0, 8005592 <_vfiprintf_r+0x156>
 8005564:	9207      	str	r2, [sp, #28]
 8005566:	e014      	b.n	8005592 <_vfiprintf_r+0x156>
 8005568:	eba0 0308 	sub.w	r3, r0, r8
 800556c:	fa09 f303 	lsl.w	r3, r9, r3
 8005570:	4313      	orrs	r3, r2
 8005572:	9304      	str	r3, [sp, #16]
 8005574:	46a2      	mov	sl, r4
 8005576:	e7d2      	b.n	800551e <_vfiprintf_r+0xe2>
 8005578:	9b03      	ldr	r3, [sp, #12]
 800557a:	1d19      	adds	r1, r3, #4
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	9103      	str	r1, [sp, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	bfbb      	ittet	lt
 8005584:	425b      	neglt	r3, r3
 8005586:	f042 0202 	orrlt.w	r2, r2, #2
 800558a:	9307      	strge	r3, [sp, #28]
 800558c:	9307      	strlt	r3, [sp, #28]
 800558e:	bfb8      	it	lt
 8005590:	9204      	strlt	r2, [sp, #16]
 8005592:	7823      	ldrb	r3, [r4, #0]
 8005594:	2b2e      	cmp	r3, #46	; 0x2e
 8005596:	d10c      	bne.n	80055b2 <_vfiprintf_r+0x176>
 8005598:	7863      	ldrb	r3, [r4, #1]
 800559a:	2b2a      	cmp	r3, #42	; 0x2a
 800559c:	d135      	bne.n	800560a <_vfiprintf_r+0x1ce>
 800559e:	9b03      	ldr	r3, [sp, #12]
 80055a0:	1d1a      	adds	r2, r3, #4
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	9203      	str	r2, [sp, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bfb8      	it	lt
 80055aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80055ae:	3402      	adds	r4, #2
 80055b0:	9305      	str	r3, [sp, #20]
 80055b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005698 <_vfiprintf_r+0x25c>
 80055b6:	7821      	ldrb	r1, [r4, #0]
 80055b8:	2203      	movs	r2, #3
 80055ba:	4650      	mov	r0, sl
 80055bc:	f7fa fe28 	bl	8000210 <memchr>
 80055c0:	b140      	cbz	r0, 80055d4 <_vfiprintf_r+0x198>
 80055c2:	2340      	movs	r3, #64	; 0x40
 80055c4:	eba0 000a 	sub.w	r0, r0, sl
 80055c8:	fa03 f000 	lsl.w	r0, r3, r0
 80055cc:	9b04      	ldr	r3, [sp, #16]
 80055ce:	4303      	orrs	r3, r0
 80055d0:	3401      	adds	r4, #1
 80055d2:	9304      	str	r3, [sp, #16]
 80055d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d8:	482c      	ldr	r0, [pc, #176]	; (800568c <_vfiprintf_r+0x250>)
 80055da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055de:	2206      	movs	r2, #6
 80055e0:	f7fa fe16 	bl	8000210 <memchr>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d03f      	beq.n	8005668 <_vfiprintf_r+0x22c>
 80055e8:	4b29      	ldr	r3, [pc, #164]	; (8005690 <_vfiprintf_r+0x254>)
 80055ea:	bb1b      	cbnz	r3, 8005634 <_vfiprintf_r+0x1f8>
 80055ec:	9b03      	ldr	r3, [sp, #12]
 80055ee:	3307      	adds	r3, #7
 80055f0:	f023 0307 	bic.w	r3, r3, #7
 80055f4:	3308      	adds	r3, #8
 80055f6:	9303      	str	r3, [sp, #12]
 80055f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055fa:	443b      	add	r3, r7
 80055fc:	9309      	str	r3, [sp, #36]	; 0x24
 80055fe:	e767      	b.n	80054d0 <_vfiprintf_r+0x94>
 8005600:	fb0c 3202 	mla	r2, ip, r2, r3
 8005604:	460c      	mov	r4, r1
 8005606:	2001      	movs	r0, #1
 8005608:	e7a5      	b.n	8005556 <_vfiprintf_r+0x11a>
 800560a:	2300      	movs	r3, #0
 800560c:	3401      	adds	r4, #1
 800560e:	9305      	str	r3, [sp, #20]
 8005610:	4619      	mov	r1, r3
 8005612:	f04f 0c0a 	mov.w	ip, #10
 8005616:	4620      	mov	r0, r4
 8005618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800561c:	3a30      	subs	r2, #48	; 0x30
 800561e:	2a09      	cmp	r2, #9
 8005620:	d903      	bls.n	800562a <_vfiprintf_r+0x1ee>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0c5      	beq.n	80055b2 <_vfiprintf_r+0x176>
 8005626:	9105      	str	r1, [sp, #20]
 8005628:	e7c3      	b.n	80055b2 <_vfiprintf_r+0x176>
 800562a:	fb0c 2101 	mla	r1, ip, r1, r2
 800562e:	4604      	mov	r4, r0
 8005630:	2301      	movs	r3, #1
 8005632:	e7f0      	b.n	8005616 <_vfiprintf_r+0x1da>
 8005634:	ab03      	add	r3, sp, #12
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	462a      	mov	r2, r5
 800563a:	4b16      	ldr	r3, [pc, #88]	; (8005694 <_vfiprintf_r+0x258>)
 800563c:	a904      	add	r1, sp, #16
 800563e:	4630      	mov	r0, r6
 8005640:	f3af 8000 	nop.w
 8005644:	4607      	mov	r7, r0
 8005646:	1c78      	adds	r0, r7, #1
 8005648:	d1d6      	bne.n	80055f8 <_vfiprintf_r+0x1bc>
 800564a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800564c:	07d9      	lsls	r1, r3, #31
 800564e:	d405      	bmi.n	800565c <_vfiprintf_r+0x220>
 8005650:	89ab      	ldrh	r3, [r5, #12]
 8005652:	059a      	lsls	r2, r3, #22
 8005654:	d402      	bmi.n	800565c <_vfiprintf_r+0x220>
 8005656:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005658:	f7ff fc81 	bl	8004f5e <__retarget_lock_release_recursive>
 800565c:	89ab      	ldrh	r3, [r5, #12]
 800565e:	065b      	lsls	r3, r3, #25
 8005660:	f53f af12 	bmi.w	8005488 <_vfiprintf_r+0x4c>
 8005664:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005666:	e711      	b.n	800548c <_vfiprintf_r+0x50>
 8005668:	ab03      	add	r3, sp, #12
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	462a      	mov	r2, r5
 800566e:	4b09      	ldr	r3, [pc, #36]	; (8005694 <_vfiprintf_r+0x258>)
 8005670:	a904      	add	r1, sp, #16
 8005672:	4630      	mov	r0, r6
 8005674:	f000 f880 	bl	8005778 <_printf_i>
 8005678:	e7e4      	b.n	8005644 <_vfiprintf_r+0x208>
 800567a:	bf00      	nop
 800567c:	08008d70 	.word	0x08008d70
 8005680:	08008d90 	.word	0x08008d90
 8005684:	08008d50 	.word	0x08008d50
 8005688:	08008db0 	.word	0x08008db0
 800568c:	08008dba 	.word	0x08008dba
 8005690:	00000000 	.word	0x00000000
 8005694:	08005417 	.word	0x08005417
 8005698:	08008db6 	.word	0x08008db6

0800569c <_printf_common>:
 800569c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a0:	4616      	mov	r6, r2
 80056a2:	4699      	mov	r9, r3
 80056a4:	688a      	ldr	r2, [r1, #8]
 80056a6:	690b      	ldr	r3, [r1, #16]
 80056a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056ac:	4293      	cmp	r3, r2
 80056ae:	bfb8      	it	lt
 80056b0:	4613      	movlt	r3, r2
 80056b2:	6033      	str	r3, [r6, #0]
 80056b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056b8:	4607      	mov	r7, r0
 80056ba:	460c      	mov	r4, r1
 80056bc:	b10a      	cbz	r2, 80056c2 <_printf_common+0x26>
 80056be:	3301      	adds	r3, #1
 80056c0:	6033      	str	r3, [r6, #0]
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	0699      	lsls	r1, r3, #26
 80056c6:	bf42      	ittt	mi
 80056c8:	6833      	ldrmi	r3, [r6, #0]
 80056ca:	3302      	addmi	r3, #2
 80056cc:	6033      	strmi	r3, [r6, #0]
 80056ce:	6825      	ldr	r5, [r4, #0]
 80056d0:	f015 0506 	ands.w	r5, r5, #6
 80056d4:	d106      	bne.n	80056e4 <_printf_common+0x48>
 80056d6:	f104 0a19 	add.w	sl, r4, #25
 80056da:	68e3      	ldr	r3, [r4, #12]
 80056dc:	6832      	ldr	r2, [r6, #0]
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	42ab      	cmp	r3, r5
 80056e2:	dc26      	bgt.n	8005732 <_printf_common+0x96>
 80056e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056e8:	1e13      	subs	r3, r2, #0
 80056ea:	6822      	ldr	r2, [r4, #0]
 80056ec:	bf18      	it	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	0692      	lsls	r2, r2, #26
 80056f2:	d42b      	bmi.n	800574c <_printf_common+0xb0>
 80056f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056f8:	4649      	mov	r1, r9
 80056fa:	4638      	mov	r0, r7
 80056fc:	47c0      	blx	r8
 80056fe:	3001      	adds	r0, #1
 8005700:	d01e      	beq.n	8005740 <_printf_common+0xa4>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	68e5      	ldr	r5, [r4, #12]
 8005706:	6832      	ldr	r2, [r6, #0]
 8005708:	f003 0306 	and.w	r3, r3, #6
 800570c:	2b04      	cmp	r3, #4
 800570e:	bf08      	it	eq
 8005710:	1aad      	subeq	r5, r5, r2
 8005712:	68a3      	ldr	r3, [r4, #8]
 8005714:	6922      	ldr	r2, [r4, #16]
 8005716:	bf0c      	ite	eq
 8005718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800571c:	2500      	movne	r5, #0
 800571e:	4293      	cmp	r3, r2
 8005720:	bfc4      	itt	gt
 8005722:	1a9b      	subgt	r3, r3, r2
 8005724:	18ed      	addgt	r5, r5, r3
 8005726:	2600      	movs	r6, #0
 8005728:	341a      	adds	r4, #26
 800572a:	42b5      	cmp	r5, r6
 800572c:	d11a      	bne.n	8005764 <_printf_common+0xc8>
 800572e:	2000      	movs	r0, #0
 8005730:	e008      	b.n	8005744 <_printf_common+0xa8>
 8005732:	2301      	movs	r3, #1
 8005734:	4652      	mov	r2, sl
 8005736:	4649      	mov	r1, r9
 8005738:	4638      	mov	r0, r7
 800573a:	47c0      	blx	r8
 800573c:	3001      	adds	r0, #1
 800573e:	d103      	bne.n	8005748 <_printf_common+0xac>
 8005740:	f04f 30ff 	mov.w	r0, #4294967295
 8005744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005748:	3501      	adds	r5, #1
 800574a:	e7c6      	b.n	80056da <_printf_common+0x3e>
 800574c:	18e1      	adds	r1, r4, r3
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	2030      	movs	r0, #48	; 0x30
 8005752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005756:	4422      	add	r2, r4
 8005758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800575c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005760:	3302      	adds	r3, #2
 8005762:	e7c7      	b.n	80056f4 <_printf_common+0x58>
 8005764:	2301      	movs	r3, #1
 8005766:	4622      	mov	r2, r4
 8005768:	4649      	mov	r1, r9
 800576a:	4638      	mov	r0, r7
 800576c:	47c0      	blx	r8
 800576e:	3001      	adds	r0, #1
 8005770:	d0e6      	beq.n	8005740 <_printf_common+0xa4>
 8005772:	3601      	adds	r6, #1
 8005774:	e7d9      	b.n	800572a <_printf_common+0x8e>
	...

08005778 <_printf_i>:
 8005778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800577c:	7e0f      	ldrb	r7, [r1, #24]
 800577e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005780:	2f78      	cmp	r7, #120	; 0x78
 8005782:	4691      	mov	r9, r2
 8005784:	4680      	mov	r8, r0
 8005786:	460c      	mov	r4, r1
 8005788:	469a      	mov	sl, r3
 800578a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800578e:	d807      	bhi.n	80057a0 <_printf_i+0x28>
 8005790:	2f62      	cmp	r7, #98	; 0x62
 8005792:	d80a      	bhi.n	80057aa <_printf_i+0x32>
 8005794:	2f00      	cmp	r7, #0
 8005796:	f000 80d8 	beq.w	800594a <_printf_i+0x1d2>
 800579a:	2f58      	cmp	r7, #88	; 0x58
 800579c:	f000 80a3 	beq.w	80058e6 <_printf_i+0x16e>
 80057a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057a8:	e03a      	b.n	8005820 <_printf_i+0xa8>
 80057aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057ae:	2b15      	cmp	r3, #21
 80057b0:	d8f6      	bhi.n	80057a0 <_printf_i+0x28>
 80057b2:	a101      	add	r1, pc, #4	; (adr r1, 80057b8 <_printf_i+0x40>)
 80057b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057b8:	08005811 	.word	0x08005811
 80057bc:	08005825 	.word	0x08005825
 80057c0:	080057a1 	.word	0x080057a1
 80057c4:	080057a1 	.word	0x080057a1
 80057c8:	080057a1 	.word	0x080057a1
 80057cc:	080057a1 	.word	0x080057a1
 80057d0:	08005825 	.word	0x08005825
 80057d4:	080057a1 	.word	0x080057a1
 80057d8:	080057a1 	.word	0x080057a1
 80057dc:	080057a1 	.word	0x080057a1
 80057e0:	080057a1 	.word	0x080057a1
 80057e4:	08005931 	.word	0x08005931
 80057e8:	08005855 	.word	0x08005855
 80057ec:	08005913 	.word	0x08005913
 80057f0:	080057a1 	.word	0x080057a1
 80057f4:	080057a1 	.word	0x080057a1
 80057f8:	08005953 	.word	0x08005953
 80057fc:	080057a1 	.word	0x080057a1
 8005800:	08005855 	.word	0x08005855
 8005804:	080057a1 	.word	0x080057a1
 8005808:	080057a1 	.word	0x080057a1
 800580c:	0800591b 	.word	0x0800591b
 8005810:	682b      	ldr	r3, [r5, #0]
 8005812:	1d1a      	adds	r2, r3, #4
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	602a      	str	r2, [r5, #0]
 8005818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800581c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005820:	2301      	movs	r3, #1
 8005822:	e0a3      	b.n	800596c <_printf_i+0x1f4>
 8005824:	6820      	ldr	r0, [r4, #0]
 8005826:	6829      	ldr	r1, [r5, #0]
 8005828:	0606      	lsls	r6, r0, #24
 800582a:	f101 0304 	add.w	r3, r1, #4
 800582e:	d50a      	bpl.n	8005846 <_printf_i+0xce>
 8005830:	680e      	ldr	r6, [r1, #0]
 8005832:	602b      	str	r3, [r5, #0]
 8005834:	2e00      	cmp	r6, #0
 8005836:	da03      	bge.n	8005840 <_printf_i+0xc8>
 8005838:	232d      	movs	r3, #45	; 0x2d
 800583a:	4276      	negs	r6, r6
 800583c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005840:	485e      	ldr	r0, [pc, #376]	; (80059bc <_printf_i+0x244>)
 8005842:	230a      	movs	r3, #10
 8005844:	e019      	b.n	800587a <_printf_i+0x102>
 8005846:	680e      	ldr	r6, [r1, #0]
 8005848:	602b      	str	r3, [r5, #0]
 800584a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800584e:	bf18      	it	ne
 8005850:	b236      	sxthne	r6, r6
 8005852:	e7ef      	b.n	8005834 <_printf_i+0xbc>
 8005854:	682b      	ldr	r3, [r5, #0]
 8005856:	6820      	ldr	r0, [r4, #0]
 8005858:	1d19      	adds	r1, r3, #4
 800585a:	6029      	str	r1, [r5, #0]
 800585c:	0601      	lsls	r1, r0, #24
 800585e:	d501      	bpl.n	8005864 <_printf_i+0xec>
 8005860:	681e      	ldr	r6, [r3, #0]
 8005862:	e002      	b.n	800586a <_printf_i+0xf2>
 8005864:	0646      	lsls	r6, r0, #25
 8005866:	d5fb      	bpl.n	8005860 <_printf_i+0xe8>
 8005868:	881e      	ldrh	r6, [r3, #0]
 800586a:	4854      	ldr	r0, [pc, #336]	; (80059bc <_printf_i+0x244>)
 800586c:	2f6f      	cmp	r7, #111	; 0x6f
 800586e:	bf0c      	ite	eq
 8005870:	2308      	moveq	r3, #8
 8005872:	230a      	movne	r3, #10
 8005874:	2100      	movs	r1, #0
 8005876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800587a:	6865      	ldr	r5, [r4, #4]
 800587c:	60a5      	str	r5, [r4, #8]
 800587e:	2d00      	cmp	r5, #0
 8005880:	bfa2      	ittt	ge
 8005882:	6821      	ldrge	r1, [r4, #0]
 8005884:	f021 0104 	bicge.w	r1, r1, #4
 8005888:	6021      	strge	r1, [r4, #0]
 800588a:	b90e      	cbnz	r6, 8005890 <_printf_i+0x118>
 800588c:	2d00      	cmp	r5, #0
 800588e:	d04d      	beq.n	800592c <_printf_i+0x1b4>
 8005890:	4615      	mov	r5, r2
 8005892:	fbb6 f1f3 	udiv	r1, r6, r3
 8005896:	fb03 6711 	mls	r7, r3, r1, r6
 800589a:	5dc7      	ldrb	r7, [r0, r7]
 800589c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058a0:	4637      	mov	r7, r6
 80058a2:	42bb      	cmp	r3, r7
 80058a4:	460e      	mov	r6, r1
 80058a6:	d9f4      	bls.n	8005892 <_printf_i+0x11a>
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d10b      	bne.n	80058c4 <_printf_i+0x14c>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	07de      	lsls	r6, r3, #31
 80058b0:	d508      	bpl.n	80058c4 <_printf_i+0x14c>
 80058b2:	6923      	ldr	r3, [r4, #16]
 80058b4:	6861      	ldr	r1, [r4, #4]
 80058b6:	4299      	cmp	r1, r3
 80058b8:	bfde      	ittt	le
 80058ba:	2330      	movle	r3, #48	; 0x30
 80058bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058c4:	1b52      	subs	r2, r2, r5
 80058c6:	6122      	str	r2, [r4, #16]
 80058c8:	f8cd a000 	str.w	sl, [sp]
 80058cc:	464b      	mov	r3, r9
 80058ce:	aa03      	add	r2, sp, #12
 80058d0:	4621      	mov	r1, r4
 80058d2:	4640      	mov	r0, r8
 80058d4:	f7ff fee2 	bl	800569c <_printf_common>
 80058d8:	3001      	adds	r0, #1
 80058da:	d14c      	bne.n	8005976 <_printf_i+0x1fe>
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	b004      	add	sp, #16
 80058e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e6:	4835      	ldr	r0, [pc, #212]	; (80059bc <_printf_i+0x244>)
 80058e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058ec:	6829      	ldr	r1, [r5, #0]
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80058f4:	6029      	str	r1, [r5, #0]
 80058f6:	061d      	lsls	r5, r3, #24
 80058f8:	d514      	bpl.n	8005924 <_printf_i+0x1ac>
 80058fa:	07df      	lsls	r7, r3, #31
 80058fc:	bf44      	itt	mi
 80058fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005902:	6023      	strmi	r3, [r4, #0]
 8005904:	b91e      	cbnz	r6, 800590e <_printf_i+0x196>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	f023 0320 	bic.w	r3, r3, #32
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	2310      	movs	r3, #16
 8005910:	e7b0      	b.n	8005874 <_printf_i+0xfc>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	f043 0320 	orr.w	r3, r3, #32
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	2378      	movs	r3, #120	; 0x78
 800591c:	4828      	ldr	r0, [pc, #160]	; (80059c0 <_printf_i+0x248>)
 800591e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005922:	e7e3      	b.n	80058ec <_printf_i+0x174>
 8005924:	0659      	lsls	r1, r3, #25
 8005926:	bf48      	it	mi
 8005928:	b2b6      	uxthmi	r6, r6
 800592a:	e7e6      	b.n	80058fa <_printf_i+0x182>
 800592c:	4615      	mov	r5, r2
 800592e:	e7bb      	b.n	80058a8 <_printf_i+0x130>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	6826      	ldr	r6, [r4, #0]
 8005934:	6961      	ldr	r1, [r4, #20]
 8005936:	1d18      	adds	r0, r3, #4
 8005938:	6028      	str	r0, [r5, #0]
 800593a:	0635      	lsls	r5, r6, #24
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	d501      	bpl.n	8005944 <_printf_i+0x1cc>
 8005940:	6019      	str	r1, [r3, #0]
 8005942:	e002      	b.n	800594a <_printf_i+0x1d2>
 8005944:	0670      	lsls	r0, r6, #25
 8005946:	d5fb      	bpl.n	8005940 <_printf_i+0x1c8>
 8005948:	8019      	strh	r1, [r3, #0]
 800594a:	2300      	movs	r3, #0
 800594c:	6123      	str	r3, [r4, #16]
 800594e:	4615      	mov	r5, r2
 8005950:	e7ba      	b.n	80058c8 <_printf_i+0x150>
 8005952:	682b      	ldr	r3, [r5, #0]
 8005954:	1d1a      	adds	r2, r3, #4
 8005956:	602a      	str	r2, [r5, #0]
 8005958:	681d      	ldr	r5, [r3, #0]
 800595a:	6862      	ldr	r2, [r4, #4]
 800595c:	2100      	movs	r1, #0
 800595e:	4628      	mov	r0, r5
 8005960:	f7fa fc56 	bl	8000210 <memchr>
 8005964:	b108      	cbz	r0, 800596a <_printf_i+0x1f2>
 8005966:	1b40      	subs	r0, r0, r5
 8005968:	6060      	str	r0, [r4, #4]
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	6123      	str	r3, [r4, #16]
 800596e:	2300      	movs	r3, #0
 8005970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005974:	e7a8      	b.n	80058c8 <_printf_i+0x150>
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	462a      	mov	r2, r5
 800597a:	4649      	mov	r1, r9
 800597c:	4640      	mov	r0, r8
 800597e:	47d0      	blx	sl
 8005980:	3001      	adds	r0, #1
 8005982:	d0ab      	beq.n	80058dc <_printf_i+0x164>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	079b      	lsls	r3, r3, #30
 8005988:	d413      	bmi.n	80059b2 <_printf_i+0x23a>
 800598a:	68e0      	ldr	r0, [r4, #12]
 800598c:	9b03      	ldr	r3, [sp, #12]
 800598e:	4298      	cmp	r0, r3
 8005990:	bfb8      	it	lt
 8005992:	4618      	movlt	r0, r3
 8005994:	e7a4      	b.n	80058e0 <_printf_i+0x168>
 8005996:	2301      	movs	r3, #1
 8005998:	4632      	mov	r2, r6
 800599a:	4649      	mov	r1, r9
 800599c:	4640      	mov	r0, r8
 800599e:	47d0      	blx	sl
 80059a0:	3001      	adds	r0, #1
 80059a2:	d09b      	beq.n	80058dc <_printf_i+0x164>
 80059a4:	3501      	adds	r5, #1
 80059a6:	68e3      	ldr	r3, [r4, #12]
 80059a8:	9903      	ldr	r1, [sp, #12]
 80059aa:	1a5b      	subs	r3, r3, r1
 80059ac:	42ab      	cmp	r3, r5
 80059ae:	dcf2      	bgt.n	8005996 <_printf_i+0x21e>
 80059b0:	e7eb      	b.n	800598a <_printf_i+0x212>
 80059b2:	2500      	movs	r5, #0
 80059b4:	f104 0619 	add.w	r6, r4, #25
 80059b8:	e7f5      	b.n	80059a6 <_printf_i+0x22e>
 80059ba:	bf00      	nop
 80059bc:	08008dc1 	.word	0x08008dc1
 80059c0:	08008dd2 	.word	0x08008dd2

080059c4 <_sbrk_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4d06      	ldr	r5, [pc, #24]	; (80059e0 <_sbrk_r+0x1c>)
 80059c8:	2300      	movs	r3, #0
 80059ca:	4604      	mov	r4, r0
 80059cc:	4608      	mov	r0, r1
 80059ce:	602b      	str	r3, [r5, #0]
 80059d0:	f7fc f81e 	bl	8001a10 <_sbrk>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d102      	bne.n	80059de <_sbrk_r+0x1a>
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	b103      	cbz	r3, 80059de <_sbrk_r+0x1a>
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	bd38      	pop	{r3, r4, r5, pc}
 80059e0:	20000340 	.word	0x20000340

080059e4 <__sread>:
 80059e4:	b510      	push	{r4, lr}
 80059e6:	460c      	mov	r4, r1
 80059e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ec:	f000 fab8 	bl	8005f60 <_read_r>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	bfab      	itete	ge
 80059f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059f6:	89a3      	ldrhlt	r3, [r4, #12]
 80059f8:	181b      	addge	r3, r3, r0
 80059fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059fe:	bfac      	ite	ge
 8005a00:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a02:	81a3      	strhlt	r3, [r4, #12]
 8005a04:	bd10      	pop	{r4, pc}

08005a06 <__swrite>:
 8005a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0a:	461f      	mov	r7, r3
 8005a0c:	898b      	ldrh	r3, [r1, #12]
 8005a0e:	05db      	lsls	r3, r3, #23
 8005a10:	4605      	mov	r5, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	4616      	mov	r6, r2
 8005a16:	d505      	bpl.n	8005a24 <__swrite+0x1e>
 8005a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f000 f9d0 	bl	8005dc4 <_lseek_r>
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a2e:	81a3      	strh	r3, [r4, #12]
 8005a30:	4632      	mov	r2, r6
 8005a32:	463b      	mov	r3, r7
 8005a34:	4628      	mov	r0, r5
 8005a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3a:	f000 b869 	b.w	8005b10 <_write_r>

08005a3e <__sseek>:
 8005a3e:	b510      	push	{r4, lr}
 8005a40:	460c      	mov	r4, r1
 8005a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a46:	f000 f9bd 	bl	8005dc4 <_lseek_r>
 8005a4a:	1c43      	adds	r3, r0, #1
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	bf15      	itete	ne
 8005a50:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a5a:	81a3      	strheq	r3, [r4, #12]
 8005a5c:	bf18      	it	ne
 8005a5e:	81a3      	strhne	r3, [r4, #12]
 8005a60:	bd10      	pop	{r4, pc}

08005a62 <__sclose>:
 8005a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a66:	f000 b8db 	b.w	8005c20 <_close_r>
	...

08005a6c <__swbuf_r>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	460e      	mov	r6, r1
 8005a70:	4614      	mov	r4, r2
 8005a72:	4605      	mov	r5, r0
 8005a74:	b118      	cbz	r0, 8005a7e <__swbuf_r+0x12>
 8005a76:	6983      	ldr	r3, [r0, #24]
 8005a78:	b90b      	cbnz	r3, 8005a7e <__swbuf_r+0x12>
 8005a7a:	f7ff f9bf 	bl	8004dfc <__sinit>
 8005a7e:	4b21      	ldr	r3, [pc, #132]	; (8005b04 <__swbuf_r+0x98>)
 8005a80:	429c      	cmp	r4, r3
 8005a82:	d12b      	bne.n	8005adc <__swbuf_r+0x70>
 8005a84:	686c      	ldr	r4, [r5, #4]
 8005a86:	69a3      	ldr	r3, [r4, #24]
 8005a88:	60a3      	str	r3, [r4, #8]
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	071a      	lsls	r2, r3, #28
 8005a8e:	d52f      	bpl.n	8005af0 <__swbuf_r+0x84>
 8005a90:	6923      	ldr	r3, [r4, #16]
 8005a92:	b36b      	cbz	r3, 8005af0 <__swbuf_r+0x84>
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	6820      	ldr	r0, [r4, #0]
 8005a98:	1ac0      	subs	r0, r0, r3
 8005a9a:	6963      	ldr	r3, [r4, #20]
 8005a9c:	b2f6      	uxtb	r6, r6
 8005a9e:	4283      	cmp	r3, r0
 8005aa0:	4637      	mov	r7, r6
 8005aa2:	dc04      	bgt.n	8005aae <__swbuf_r+0x42>
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f000 f950 	bl	8005d4c <_fflush_r>
 8005aac:	bb30      	cbnz	r0, 8005afc <__swbuf_r+0x90>
 8005aae:	68a3      	ldr	r3, [r4, #8]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	60a3      	str	r3, [r4, #8]
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	6022      	str	r2, [r4, #0]
 8005aba:	701e      	strb	r6, [r3, #0]
 8005abc:	6963      	ldr	r3, [r4, #20]
 8005abe:	3001      	adds	r0, #1
 8005ac0:	4283      	cmp	r3, r0
 8005ac2:	d004      	beq.n	8005ace <__swbuf_r+0x62>
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	07db      	lsls	r3, r3, #31
 8005ac8:	d506      	bpl.n	8005ad8 <__swbuf_r+0x6c>
 8005aca:	2e0a      	cmp	r6, #10
 8005acc:	d104      	bne.n	8005ad8 <__swbuf_r+0x6c>
 8005ace:	4621      	mov	r1, r4
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f000 f93b 	bl	8005d4c <_fflush_r>
 8005ad6:	b988      	cbnz	r0, 8005afc <__swbuf_r+0x90>
 8005ad8:	4638      	mov	r0, r7
 8005ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <__swbuf_r+0x9c>)
 8005ade:	429c      	cmp	r4, r3
 8005ae0:	d101      	bne.n	8005ae6 <__swbuf_r+0x7a>
 8005ae2:	68ac      	ldr	r4, [r5, #8]
 8005ae4:	e7cf      	b.n	8005a86 <__swbuf_r+0x1a>
 8005ae6:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <__swbuf_r+0xa0>)
 8005ae8:	429c      	cmp	r4, r3
 8005aea:	bf08      	it	eq
 8005aec:	68ec      	ldreq	r4, [r5, #12]
 8005aee:	e7ca      	b.n	8005a86 <__swbuf_r+0x1a>
 8005af0:	4621      	mov	r1, r4
 8005af2:	4628      	mov	r0, r5
 8005af4:	f000 f81e 	bl	8005b34 <__swsetup_r>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d0cb      	beq.n	8005a94 <__swbuf_r+0x28>
 8005afc:	f04f 37ff 	mov.w	r7, #4294967295
 8005b00:	e7ea      	b.n	8005ad8 <__swbuf_r+0x6c>
 8005b02:	bf00      	nop
 8005b04:	08008d70 	.word	0x08008d70
 8005b08:	08008d90 	.word	0x08008d90
 8005b0c:	08008d50 	.word	0x08008d50

08005b10 <_write_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	4d07      	ldr	r5, [pc, #28]	; (8005b30 <_write_r+0x20>)
 8005b14:	4604      	mov	r4, r0
 8005b16:	4608      	mov	r0, r1
 8005b18:	4611      	mov	r1, r2
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	602a      	str	r2, [r5, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f7fb ff25 	bl	800196e <_write>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d102      	bne.n	8005b2e <_write_r+0x1e>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	b103      	cbz	r3, 8005b2e <_write_r+0x1e>
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
 8005b30:	20000340 	.word	0x20000340

08005b34 <__swsetup_r>:
 8005b34:	4b32      	ldr	r3, [pc, #200]	; (8005c00 <__swsetup_r+0xcc>)
 8005b36:	b570      	push	{r4, r5, r6, lr}
 8005b38:	681d      	ldr	r5, [r3, #0]
 8005b3a:	4606      	mov	r6, r0
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	b125      	cbz	r5, 8005b4a <__swsetup_r+0x16>
 8005b40:	69ab      	ldr	r3, [r5, #24]
 8005b42:	b913      	cbnz	r3, 8005b4a <__swsetup_r+0x16>
 8005b44:	4628      	mov	r0, r5
 8005b46:	f7ff f959 	bl	8004dfc <__sinit>
 8005b4a:	4b2e      	ldr	r3, [pc, #184]	; (8005c04 <__swsetup_r+0xd0>)
 8005b4c:	429c      	cmp	r4, r3
 8005b4e:	d10f      	bne.n	8005b70 <__swsetup_r+0x3c>
 8005b50:	686c      	ldr	r4, [r5, #4]
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b58:	0719      	lsls	r1, r3, #28
 8005b5a:	d42c      	bmi.n	8005bb6 <__swsetup_r+0x82>
 8005b5c:	06dd      	lsls	r5, r3, #27
 8005b5e:	d411      	bmi.n	8005b84 <__swsetup_r+0x50>
 8005b60:	2309      	movs	r3, #9
 8005b62:	6033      	str	r3, [r6, #0]
 8005b64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b68:	81a3      	strh	r3, [r4, #12]
 8005b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6e:	e03e      	b.n	8005bee <__swsetup_r+0xba>
 8005b70:	4b25      	ldr	r3, [pc, #148]	; (8005c08 <__swsetup_r+0xd4>)
 8005b72:	429c      	cmp	r4, r3
 8005b74:	d101      	bne.n	8005b7a <__swsetup_r+0x46>
 8005b76:	68ac      	ldr	r4, [r5, #8]
 8005b78:	e7eb      	b.n	8005b52 <__swsetup_r+0x1e>
 8005b7a:	4b24      	ldr	r3, [pc, #144]	; (8005c0c <__swsetup_r+0xd8>)
 8005b7c:	429c      	cmp	r4, r3
 8005b7e:	bf08      	it	eq
 8005b80:	68ec      	ldreq	r4, [r5, #12]
 8005b82:	e7e6      	b.n	8005b52 <__swsetup_r+0x1e>
 8005b84:	0758      	lsls	r0, r3, #29
 8005b86:	d512      	bpl.n	8005bae <__swsetup_r+0x7a>
 8005b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b8a:	b141      	cbz	r1, 8005b9e <__swsetup_r+0x6a>
 8005b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b90:	4299      	cmp	r1, r3
 8005b92:	d002      	beq.n	8005b9a <__swsetup_r+0x66>
 8005b94:	4630      	mov	r0, r6
 8005b96:	f7ff f9eb 	bl	8004f70 <_free_r>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b9e:	89a3      	ldrh	r3, [r4, #12]
 8005ba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	6063      	str	r3, [r4, #4]
 8005baa:	6923      	ldr	r3, [r4, #16]
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	89a3      	ldrh	r3, [r4, #12]
 8005bb0:	f043 0308 	orr.w	r3, r3, #8
 8005bb4:	81a3      	strh	r3, [r4, #12]
 8005bb6:	6923      	ldr	r3, [r4, #16]
 8005bb8:	b94b      	cbnz	r3, 8005bce <__swsetup_r+0x9a>
 8005bba:	89a3      	ldrh	r3, [r4, #12]
 8005bbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bc4:	d003      	beq.n	8005bce <__swsetup_r+0x9a>
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f000 f933 	bl	8005e34 <__smakebuf_r>
 8005bce:	89a0      	ldrh	r0, [r4, #12]
 8005bd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bd4:	f010 0301 	ands.w	r3, r0, #1
 8005bd8:	d00a      	beq.n	8005bf0 <__swsetup_r+0xbc>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60a3      	str	r3, [r4, #8]
 8005bde:	6963      	ldr	r3, [r4, #20]
 8005be0:	425b      	negs	r3, r3
 8005be2:	61a3      	str	r3, [r4, #24]
 8005be4:	6923      	ldr	r3, [r4, #16]
 8005be6:	b943      	cbnz	r3, 8005bfa <__swsetup_r+0xc6>
 8005be8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bec:	d1ba      	bne.n	8005b64 <__swsetup_r+0x30>
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	0781      	lsls	r1, r0, #30
 8005bf2:	bf58      	it	pl
 8005bf4:	6963      	ldrpl	r3, [r4, #20]
 8005bf6:	60a3      	str	r3, [r4, #8]
 8005bf8:	e7f4      	b.n	8005be4 <__swsetup_r+0xb0>
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	e7f7      	b.n	8005bee <__swsetup_r+0xba>
 8005bfe:	bf00      	nop
 8005c00:	20000010 	.word	0x20000010
 8005c04:	08008d70 	.word	0x08008d70
 8005c08:	08008d90 	.word	0x08008d90
 8005c0c:	08008d50 	.word	0x08008d50

08005c10 <abort>:
 8005c10:	b508      	push	{r3, lr}
 8005c12:	2006      	movs	r0, #6
 8005c14:	f000 f9de 	bl	8005fd4 <raise>
 8005c18:	2001      	movs	r0, #1
 8005c1a:	f7fb fe81 	bl	8001920 <_exit>
	...

08005c20 <_close_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4d06      	ldr	r5, [pc, #24]	; (8005c3c <_close_r+0x1c>)
 8005c24:	2300      	movs	r3, #0
 8005c26:	4604      	mov	r4, r0
 8005c28:	4608      	mov	r0, r1
 8005c2a:	602b      	str	r3, [r5, #0]
 8005c2c:	f7fb febb 	bl	80019a6 <_close>
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	d102      	bne.n	8005c3a <_close_r+0x1a>
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	b103      	cbz	r3, 8005c3a <_close_r+0x1a>
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	20000340 	.word	0x20000340

08005c40 <__sflush_r>:
 8005c40:	898a      	ldrh	r2, [r1, #12]
 8005c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c46:	4605      	mov	r5, r0
 8005c48:	0710      	lsls	r0, r2, #28
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	d458      	bmi.n	8005d00 <__sflush_r+0xc0>
 8005c4e:	684b      	ldr	r3, [r1, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	dc05      	bgt.n	8005c60 <__sflush_r+0x20>
 8005c54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	dc02      	bgt.n	8005c60 <__sflush_r+0x20>
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c62:	2e00      	cmp	r6, #0
 8005c64:	d0f9      	beq.n	8005c5a <__sflush_r+0x1a>
 8005c66:	2300      	movs	r3, #0
 8005c68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c6c:	682f      	ldr	r7, [r5, #0]
 8005c6e:	602b      	str	r3, [r5, #0]
 8005c70:	d032      	beq.n	8005cd8 <__sflush_r+0x98>
 8005c72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	075a      	lsls	r2, r3, #29
 8005c78:	d505      	bpl.n	8005c86 <__sflush_r+0x46>
 8005c7a:	6863      	ldr	r3, [r4, #4]
 8005c7c:	1ac0      	subs	r0, r0, r3
 8005c7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c80:	b10b      	cbz	r3, 8005c86 <__sflush_r+0x46>
 8005c82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c84:	1ac0      	subs	r0, r0, r3
 8005c86:	2300      	movs	r3, #0
 8005c88:	4602      	mov	r2, r0
 8005c8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c8c:	6a21      	ldr	r1, [r4, #32]
 8005c8e:	4628      	mov	r0, r5
 8005c90:	47b0      	blx	r6
 8005c92:	1c43      	adds	r3, r0, #1
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	d106      	bne.n	8005ca6 <__sflush_r+0x66>
 8005c98:	6829      	ldr	r1, [r5, #0]
 8005c9a:	291d      	cmp	r1, #29
 8005c9c:	d82c      	bhi.n	8005cf8 <__sflush_r+0xb8>
 8005c9e:	4a2a      	ldr	r2, [pc, #168]	; (8005d48 <__sflush_r+0x108>)
 8005ca0:	40ca      	lsrs	r2, r1
 8005ca2:	07d6      	lsls	r6, r2, #31
 8005ca4:	d528      	bpl.n	8005cf8 <__sflush_r+0xb8>
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	6062      	str	r2, [r4, #4]
 8005caa:	04d9      	lsls	r1, r3, #19
 8005cac:	6922      	ldr	r2, [r4, #16]
 8005cae:	6022      	str	r2, [r4, #0]
 8005cb0:	d504      	bpl.n	8005cbc <__sflush_r+0x7c>
 8005cb2:	1c42      	adds	r2, r0, #1
 8005cb4:	d101      	bne.n	8005cba <__sflush_r+0x7a>
 8005cb6:	682b      	ldr	r3, [r5, #0]
 8005cb8:	b903      	cbnz	r3, 8005cbc <__sflush_r+0x7c>
 8005cba:	6560      	str	r0, [r4, #84]	; 0x54
 8005cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cbe:	602f      	str	r7, [r5, #0]
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	d0ca      	beq.n	8005c5a <__sflush_r+0x1a>
 8005cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cc8:	4299      	cmp	r1, r3
 8005cca:	d002      	beq.n	8005cd2 <__sflush_r+0x92>
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f7ff f94f 	bl	8004f70 <_free_r>
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	6360      	str	r0, [r4, #52]	; 0x34
 8005cd6:	e7c1      	b.n	8005c5c <__sflush_r+0x1c>
 8005cd8:	6a21      	ldr	r1, [r4, #32]
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b0      	blx	r6
 8005ce0:	1c41      	adds	r1, r0, #1
 8005ce2:	d1c7      	bne.n	8005c74 <__sflush_r+0x34>
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0c4      	beq.n	8005c74 <__sflush_r+0x34>
 8005cea:	2b1d      	cmp	r3, #29
 8005cec:	d001      	beq.n	8005cf2 <__sflush_r+0xb2>
 8005cee:	2b16      	cmp	r3, #22
 8005cf0:	d101      	bne.n	8005cf6 <__sflush_r+0xb6>
 8005cf2:	602f      	str	r7, [r5, #0]
 8005cf4:	e7b1      	b.n	8005c5a <__sflush_r+0x1a>
 8005cf6:	89a3      	ldrh	r3, [r4, #12]
 8005cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	e7ad      	b.n	8005c5c <__sflush_r+0x1c>
 8005d00:	690f      	ldr	r7, [r1, #16]
 8005d02:	2f00      	cmp	r7, #0
 8005d04:	d0a9      	beq.n	8005c5a <__sflush_r+0x1a>
 8005d06:	0793      	lsls	r3, r2, #30
 8005d08:	680e      	ldr	r6, [r1, #0]
 8005d0a:	bf08      	it	eq
 8005d0c:	694b      	ldreq	r3, [r1, #20]
 8005d0e:	600f      	str	r7, [r1, #0]
 8005d10:	bf18      	it	ne
 8005d12:	2300      	movne	r3, #0
 8005d14:	eba6 0807 	sub.w	r8, r6, r7
 8005d18:	608b      	str	r3, [r1, #8]
 8005d1a:	f1b8 0f00 	cmp.w	r8, #0
 8005d1e:	dd9c      	ble.n	8005c5a <__sflush_r+0x1a>
 8005d20:	6a21      	ldr	r1, [r4, #32]
 8005d22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d24:	4643      	mov	r3, r8
 8005d26:	463a      	mov	r2, r7
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b0      	blx	r6
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	dc06      	bgt.n	8005d3e <__sflush_r+0xfe>
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d36:	81a3      	strh	r3, [r4, #12]
 8005d38:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3c:	e78e      	b.n	8005c5c <__sflush_r+0x1c>
 8005d3e:	4407      	add	r7, r0
 8005d40:	eba8 0800 	sub.w	r8, r8, r0
 8005d44:	e7e9      	b.n	8005d1a <__sflush_r+0xda>
 8005d46:	bf00      	nop
 8005d48:	20400001 	.word	0x20400001

08005d4c <_fflush_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	690b      	ldr	r3, [r1, #16]
 8005d50:	4605      	mov	r5, r0
 8005d52:	460c      	mov	r4, r1
 8005d54:	b913      	cbnz	r3, 8005d5c <_fflush_r+0x10>
 8005d56:	2500      	movs	r5, #0
 8005d58:	4628      	mov	r0, r5
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	b118      	cbz	r0, 8005d66 <_fflush_r+0x1a>
 8005d5e:	6983      	ldr	r3, [r0, #24]
 8005d60:	b90b      	cbnz	r3, 8005d66 <_fflush_r+0x1a>
 8005d62:	f7ff f84b 	bl	8004dfc <__sinit>
 8005d66:	4b14      	ldr	r3, [pc, #80]	; (8005db8 <_fflush_r+0x6c>)
 8005d68:	429c      	cmp	r4, r3
 8005d6a:	d11b      	bne.n	8005da4 <_fflush_r+0x58>
 8005d6c:	686c      	ldr	r4, [r5, #4]
 8005d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0ef      	beq.n	8005d56 <_fflush_r+0xa>
 8005d76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d78:	07d0      	lsls	r0, r2, #31
 8005d7a:	d404      	bmi.n	8005d86 <_fflush_r+0x3a>
 8005d7c:	0599      	lsls	r1, r3, #22
 8005d7e:	d402      	bmi.n	8005d86 <_fflush_r+0x3a>
 8005d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d82:	f7ff f8eb 	bl	8004f5c <__retarget_lock_acquire_recursive>
 8005d86:	4628      	mov	r0, r5
 8005d88:	4621      	mov	r1, r4
 8005d8a:	f7ff ff59 	bl	8005c40 <__sflush_r>
 8005d8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d90:	07da      	lsls	r2, r3, #31
 8005d92:	4605      	mov	r5, r0
 8005d94:	d4e0      	bmi.n	8005d58 <_fflush_r+0xc>
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	059b      	lsls	r3, r3, #22
 8005d9a:	d4dd      	bmi.n	8005d58 <_fflush_r+0xc>
 8005d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d9e:	f7ff f8de 	bl	8004f5e <__retarget_lock_release_recursive>
 8005da2:	e7d9      	b.n	8005d58 <_fflush_r+0xc>
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <_fflush_r+0x70>)
 8005da6:	429c      	cmp	r4, r3
 8005da8:	d101      	bne.n	8005dae <_fflush_r+0x62>
 8005daa:	68ac      	ldr	r4, [r5, #8]
 8005dac:	e7df      	b.n	8005d6e <_fflush_r+0x22>
 8005dae:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <_fflush_r+0x74>)
 8005db0:	429c      	cmp	r4, r3
 8005db2:	bf08      	it	eq
 8005db4:	68ec      	ldreq	r4, [r5, #12]
 8005db6:	e7da      	b.n	8005d6e <_fflush_r+0x22>
 8005db8:	08008d70 	.word	0x08008d70
 8005dbc:	08008d90 	.word	0x08008d90
 8005dc0:	08008d50 	.word	0x08008d50

08005dc4 <_lseek_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4d07      	ldr	r5, [pc, #28]	; (8005de4 <_lseek_r+0x20>)
 8005dc8:	4604      	mov	r4, r0
 8005dca:	4608      	mov	r0, r1
 8005dcc:	4611      	mov	r1, r2
 8005dce:	2200      	movs	r2, #0
 8005dd0:	602a      	str	r2, [r5, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f7fb fe0e 	bl	80019f4 <_lseek>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	d102      	bne.n	8005de2 <_lseek_r+0x1e>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	b103      	cbz	r3, 8005de2 <_lseek_r+0x1e>
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	bd38      	pop	{r3, r4, r5, pc}
 8005de4:	20000340 	.word	0x20000340

08005de8 <__swhatbuf_r>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	460e      	mov	r6, r1
 8005dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df0:	2900      	cmp	r1, #0
 8005df2:	b096      	sub	sp, #88	; 0x58
 8005df4:	4614      	mov	r4, r2
 8005df6:	461d      	mov	r5, r3
 8005df8:	da08      	bge.n	8005e0c <__swhatbuf_r+0x24>
 8005dfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	602a      	str	r2, [r5, #0]
 8005e02:	061a      	lsls	r2, r3, #24
 8005e04:	d410      	bmi.n	8005e28 <__swhatbuf_r+0x40>
 8005e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e0a:	e00e      	b.n	8005e2a <__swhatbuf_r+0x42>
 8005e0c:	466a      	mov	r2, sp
 8005e0e:	f000 f8fd 	bl	800600c <_fstat_r>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	dbf1      	blt.n	8005dfa <__swhatbuf_r+0x12>
 8005e16:	9a01      	ldr	r2, [sp, #4]
 8005e18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e20:	425a      	negs	r2, r3
 8005e22:	415a      	adcs	r2, r3
 8005e24:	602a      	str	r2, [r5, #0]
 8005e26:	e7ee      	b.n	8005e06 <__swhatbuf_r+0x1e>
 8005e28:	2340      	movs	r3, #64	; 0x40
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	b016      	add	sp, #88	; 0x58
 8005e30:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e34 <__smakebuf_r>:
 8005e34:	898b      	ldrh	r3, [r1, #12]
 8005e36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e38:	079d      	lsls	r5, r3, #30
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	d507      	bpl.n	8005e50 <__smakebuf_r+0x1c>
 8005e40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	6123      	str	r3, [r4, #16]
 8005e48:	2301      	movs	r3, #1
 8005e4a:	6163      	str	r3, [r4, #20]
 8005e4c:	b002      	add	sp, #8
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}
 8005e50:	ab01      	add	r3, sp, #4
 8005e52:	466a      	mov	r2, sp
 8005e54:	f7ff ffc8 	bl	8005de8 <__swhatbuf_r>
 8005e58:	9900      	ldr	r1, [sp, #0]
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f7ff f8f3 	bl	8005048 <_malloc_r>
 8005e62:	b948      	cbnz	r0, 8005e78 <__smakebuf_r+0x44>
 8005e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e68:	059a      	lsls	r2, r3, #22
 8005e6a:	d4ef      	bmi.n	8005e4c <__smakebuf_r+0x18>
 8005e6c:	f023 0303 	bic.w	r3, r3, #3
 8005e70:	f043 0302 	orr.w	r3, r3, #2
 8005e74:	81a3      	strh	r3, [r4, #12]
 8005e76:	e7e3      	b.n	8005e40 <__smakebuf_r+0xc>
 8005e78:	4b0d      	ldr	r3, [pc, #52]	; (8005eb0 <__smakebuf_r+0x7c>)
 8005e7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	6020      	str	r0, [r4, #0]
 8005e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e84:	81a3      	strh	r3, [r4, #12]
 8005e86:	9b00      	ldr	r3, [sp, #0]
 8005e88:	6163      	str	r3, [r4, #20]
 8005e8a:	9b01      	ldr	r3, [sp, #4]
 8005e8c:	6120      	str	r0, [r4, #16]
 8005e8e:	b15b      	cbz	r3, 8005ea8 <__smakebuf_r+0x74>
 8005e90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e94:	4630      	mov	r0, r6
 8005e96:	f000 f8cb 	bl	8006030 <_isatty_r>
 8005e9a:	b128      	cbz	r0, 8005ea8 <__smakebuf_r+0x74>
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	f023 0303 	bic.w	r3, r3, #3
 8005ea2:	f043 0301 	orr.w	r3, r3, #1
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	89a0      	ldrh	r0, [r4, #12]
 8005eaa:	4305      	orrs	r5, r0
 8005eac:	81a5      	strh	r5, [r4, #12]
 8005eae:	e7cd      	b.n	8005e4c <__smakebuf_r+0x18>
 8005eb0:	08004d95 	.word	0x08004d95

08005eb4 <memmove>:
 8005eb4:	4288      	cmp	r0, r1
 8005eb6:	b510      	push	{r4, lr}
 8005eb8:	eb01 0402 	add.w	r4, r1, r2
 8005ebc:	d902      	bls.n	8005ec4 <memmove+0x10>
 8005ebe:	4284      	cmp	r4, r0
 8005ec0:	4623      	mov	r3, r4
 8005ec2:	d807      	bhi.n	8005ed4 <memmove+0x20>
 8005ec4:	1e43      	subs	r3, r0, #1
 8005ec6:	42a1      	cmp	r1, r4
 8005ec8:	d008      	beq.n	8005edc <memmove+0x28>
 8005eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ed2:	e7f8      	b.n	8005ec6 <memmove+0x12>
 8005ed4:	4402      	add	r2, r0
 8005ed6:	4601      	mov	r1, r0
 8005ed8:	428a      	cmp	r2, r1
 8005eda:	d100      	bne.n	8005ede <memmove+0x2a>
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ee6:	e7f7      	b.n	8005ed8 <memmove+0x24>

08005ee8 <__malloc_lock>:
 8005ee8:	4801      	ldr	r0, [pc, #4]	; (8005ef0 <__malloc_lock+0x8>)
 8005eea:	f7ff b837 	b.w	8004f5c <__retarget_lock_acquire_recursive>
 8005eee:	bf00      	nop
 8005ef0:	20000334 	.word	0x20000334

08005ef4 <__malloc_unlock>:
 8005ef4:	4801      	ldr	r0, [pc, #4]	; (8005efc <__malloc_unlock+0x8>)
 8005ef6:	f7ff b832 	b.w	8004f5e <__retarget_lock_release_recursive>
 8005efa:	bf00      	nop
 8005efc:	20000334 	.word	0x20000334

08005f00 <_realloc_r>:
 8005f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f04:	4680      	mov	r8, r0
 8005f06:	4614      	mov	r4, r2
 8005f08:	460e      	mov	r6, r1
 8005f0a:	b921      	cbnz	r1, 8005f16 <_realloc_r+0x16>
 8005f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f10:	4611      	mov	r1, r2
 8005f12:	f7ff b899 	b.w	8005048 <_malloc_r>
 8005f16:	b92a      	cbnz	r2, 8005f24 <_realloc_r+0x24>
 8005f18:	f7ff f82a 	bl	8004f70 <_free_r>
 8005f1c:	4625      	mov	r5, r4
 8005f1e:	4628      	mov	r0, r5
 8005f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f24:	f000 f894 	bl	8006050 <_malloc_usable_size_r>
 8005f28:	4284      	cmp	r4, r0
 8005f2a:	4607      	mov	r7, r0
 8005f2c:	d802      	bhi.n	8005f34 <_realloc_r+0x34>
 8005f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f32:	d812      	bhi.n	8005f5a <_realloc_r+0x5a>
 8005f34:	4621      	mov	r1, r4
 8005f36:	4640      	mov	r0, r8
 8005f38:	f7ff f886 	bl	8005048 <_malloc_r>
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d0ed      	beq.n	8005f1e <_realloc_r+0x1e>
 8005f42:	42bc      	cmp	r4, r7
 8005f44:	4622      	mov	r2, r4
 8005f46:	4631      	mov	r1, r6
 8005f48:	bf28      	it	cs
 8005f4a:	463a      	movcs	r2, r7
 8005f4c:	f7fe fe32 	bl	8004bb4 <memcpy>
 8005f50:	4631      	mov	r1, r6
 8005f52:	4640      	mov	r0, r8
 8005f54:	f7ff f80c 	bl	8004f70 <_free_r>
 8005f58:	e7e1      	b.n	8005f1e <_realloc_r+0x1e>
 8005f5a:	4635      	mov	r5, r6
 8005f5c:	e7df      	b.n	8005f1e <_realloc_r+0x1e>
	...

08005f60 <_read_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4d07      	ldr	r5, [pc, #28]	; (8005f80 <_read_r+0x20>)
 8005f64:	4604      	mov	r4, r0
 8005f66:	4608      	mov	r0, r1
 8005f68:	4611      	mov	r1, r2
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	602a      	str	r2, [r5, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f7fb fce0 	bl	8001934 <_read>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d102      	bne.n	8005f7e <_read_r+0x1e>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b103      	cbz	r3, 8005f7e <_read_r+0x1e>
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
 8005f80:	20000340 	.word	0x20000340

08005f84 <_raise_r>:
 8005f84:	291f      	cmp	r1, #31
 8005f86:	b538      	push	{r3, r4, r5, lr}
 8005f88:	4604      	mov	r4, r0
 8005f8a:	460d      	mov	r5, r1
 8005f8c:	d904      	bls.n	8005f98 <_raise_r+0x14>
 8005f8e:	2316      	movs	r3, #22
 8005f90:	6003      	str	r3, [r0, #0]
 8005f92:	f04f 30ff 	mov.w	r0, #4294967295
 8005f96:	bd38      	pop	{r3, r4, r5, pc}
 8005f98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f9a:	b112      	cbz	r2, 8005fa2 <_raise_r+0x1e>
 8005f9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fa0:	b94b      	cbnz	r3, 8005fb6 <_raise_r+0x32>
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 f830 	bl	8006008 <_getpid_r>
 8005fa8:	462a      	mov	r2, r5
 8005faa:	4601      	mov	r1, r0
 8005fac:	4620      	mov	r0, r4
 8005fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fb2:	f000 b817 	b.w	8005fe4 <_kill_r>
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d00a      	beq.n	8005fd0 <_raise_r+0x4c>
 8005fba:	1c59      	adds	r1, r3, #1
 8005fbc:	d103      	bne.n	8005fc6 <_raise_r+0x42>
 8005fbe:	2316      	movs	r3, #22
 8005fc0:	6003      	str	r3, [r0, #0]
 8005fc2:	2001      	movs	r0, #1
 8005fc4:	e7e7      	b.n	8005f96 <_raise_r+0x12>
 8005fc6:	2400      	movs	r4, #0
 8005fc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005fcc:	4628      	mov	r0, r5
 8005fce:	4798      	blx	r3
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e7e0      	b.n	8005f96 <_raise_r+0x12>

08005fd4 <raise>:
 8005fd4:	4b02      	ldr	r3, [pc, #8]	; (8005fe0 <raise+0xc>)
 8005fd6:	4601      	mov	r1, r0
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	f7ff bfd3 	b.w	8005f84 <_raise_r>
 8005fde:	bf00      	nop
 8005fe0:	20000010 	.word	0x20000010

08005fe4 <_kill_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	4d07      	ldr	r5, [pc, #28]	; (8006004 <_kill_r+0x20>)
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4604      	mov	r4, r0
 8005fec:	4608      	mov	r0, r1
 8005fee:	4611      	mov	r1, r2
 8005ff0:	602b      	str	r3, [r5, #0]
 8005ff2:	f7fb fc85 	bl	8001900 <_kill>
 8005ff6:	1c43      	adds	r3, r0, #1
 8005ff8:	d102      	bne.n	8006000 <_kill_r+0x1c>
 8005ffa:	682b      	ldr	r3, [r5, #0]
 8005ffc:	b103      	cbz	r3, 8006000 <_kill_r+0x1c>
 8005ffe:	6023      	str	r3, [r4, #0]
 8006000:	bd38      	pop	{r3, r4, r5, pc}
 8006002:	bf00      	nop
 8006004:	20000340 	.word	0x20000340

08006008 <_getpid_r>:
 8006008:	f7fb bc72 	b.w	80018f0 <_getpid>

0800600c <_fstat_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4d07      	ldr	r5, [pc, #28]	; (800602c <_fstat_r+0x20>)
 8006010:	2300      	movs	r3, #0
 8006012:	4604      	mov	r4, r0
 8006014:	4608      	mov	r0, r1
 8006016:	4611      	mov	r1, r2
 8006018:	602b      	str	r3, [r5, #0]
 800601a:	f7fb fcd0 	bl	80019be <_fstat>
 800601e:	1c43      	adds	r3, r0, #1
 8006020:	d102      	bne.n	8006028 <_fstat_r+0x1c>
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	b103      	cbz	r3, 8006028 <_fstat_r+0x1c>
 8006026:	6023      	str	r3, [r4, #0]
 8006028:	bd38      	pop	{r3, r4, r5, pc}
 800602a:	bf00      	nop
 800602c:	20000340 	.word	0x20000340

08006030 <_isatty_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4d06      	ldr	r5, [pc, #24]	; (800604c <_isatty_r+0x1c>)
 8006034:	2300      	movs	r3, #0
 8006036:	4604      	mov	r4, r0
 8006038:	4608      	mov	r0, r1
 800603a:	602b      	str	r3, [r5, #0]
 800603c:	f7fb fccf 	bl	80019de <_isatty>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_isatty_r+0x1a>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	b103      	cbz	r3, 800604a <_isatty_r+0x1a>
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	20000340 	.word	0x20000340

08006050 <_malloc_usable_size_r>:
 8006050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006054:	1f18      	subs	r0, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	bfbc      	itt	lt
 800605a:	580b      	ldrlt	r3, [r1, r0]
 800605c:	18c0      	addlt	r0, r0, r3
 800605e:	4770      	bx	lr

08006060 <_init>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr

0800606c <_fini>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	bf00      	nop
 8006070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006072:	bc08      	pop	{r3}
 8006074:	469e      	mov	lr, r3
 8006076:	4770      	bx	lr
